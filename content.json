{"meta":{"title":"Anoyer's Blog","subtitle":"","description":"一个ACMer的个人博客","author":"John Doe","url":"https://anoyer.cn"},"pages":[{"title":"","date":"2019-01-21T02:10:48.316Z","updated":"2018-11-29T04:34:06.081Z","comments":true,"path":"404.html","permalink":"https://anoyer.cn/404.html","excerpt":"","text":"404错误@import url('https://fonts.googleapis.com/css?family=Montserrat:400,600,700'); @import url('https://fonts.googleapis.com/css?family=Catamaran:400,800'); .error-container { text-align: center; font-size: 180px; font-family: 'Catamaran', sans-serif; font-weight: 800; margin: 20px 15px; } .error-container > span { display: inline-block; line-height: 0.7; position: relative; color: #FFB485; } .error-container > span { display: inline-block; position: relative; vertical-align: middle; } .error-container > span:nth-of-type(1) { color: #D1F2A5; animation: colordancing 4s infinite; } .error-container > span:nth-of-type(3) { color: #F56991; animation: colordancing2 4s infinite; } .error-container > span:nth-of-type(2) { width: 120px; height: 120px; border-radius: 999px; } .error-container > span:nth-of-type(2):before, .error-container > span:nth-of-type(2):after { border-radius: 0%; content:\"\"; position: absolute; top: 0; left: 0; width: inherit; height: inherit; border-radius: 999px; box-shadow: inset 30px 0 0 rgba(209, 242, 165, 0.4), inset 0 30px 0 rgba(239, 250, 180, 0.4), inset -30px 0 0 rgba(255, 196, 140, 0.4), inset 0 -30px 0 rgba(245, 105, 145, 0.4); animation: shadowsdancing 4s infinite; } .error-container > span:nth-of-type(2):before { -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); transform: rotate(45deg); } .screen-reader-text { position: absolute; top: -9999em; left: -9999em; } @keyframes shadowsdancing { 0% { box-shadow: inset 30px 0 0 rgba(209, 242, 165, 0.4), inset 0 30px 0 rgba(239, 250, 180, 0.4), inset -30px 0 0 rgba(255, 196, 140, 0.4), inset 0 -30px 0 rgba(245, 105, 145, 0.4); } 25% { box-shadow: inset 30px 0 0 rgba(245, 105, 145, 0.4), inset 0 30px 0 rgba(209, 242, 165, 0.4), inset -30px 0 0 rgba(239, 250, 180, 0.4), inset 0 -30px 0 rgba(255, 196, 140, 0.4); } 50% { box-shadow: inset 30px 0 0 rgba(255, 196, 140, 0.4), inset 0 30px 0 rgba(245, 105, 145, 0.4), inset -30px 0 0 rgba(209, 242, 165, 0.4), inset 0 -30px 0 rgba(239, 250, 180, 0.4); } 75% { box-shadow: inset 30px 0 0 rgba(239, 250, 180, 0.4), inset 0 30px 0 rgba(255, 196, 140, 0.4), inset -30px 0 0 rgba(245, 105, 145, 0.4), inset 0 -30px 0 rgba(209, 242, 165, 0.4); } 100% { box-shadow: inset 30px 0 0 rgba(209, 242, 165, 0.4), inset 0 30px 0 rgba(239, 250, 180, 0.4), inset -30px 0 0 rgba(255, 196, 140, 0.4), inset 0 -30px 0 rgba(245, 105, 145, 0.4); } } @keyframes colordancing { 0% { color: #D1F2A5; } 25% { color: #F56991; } 50% { color: #FFC48C; } 75% { color: #EFFAB4; } 100% { color: #D1F2A5; } } @keyframes colordancing2 { 0% { color: #FFC48C; } 25% { color: #EFFAB4; } 50% { color: #D1F2A5; } 75% { color: #F56991; } 100% { color: #FFC48C; } } /* demo stuff */ * { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; } body { background-color: #666666; margin-bottom: 50px; } html, button, input, select, textarea { font-family: 'Montserrat', Helvetica, sans-serif; color: #92a4ad; } h1 { text-align: center; margin: 30px 15px; } .zoom-area { max-width: 490px; margin: 30px auto 30px; font-size: 19px; text-align: center; } .link-container { text-align: center; } a.more-link { text-transform: uppercase; font-size: 13px; background-color: #92a4ad; padding: 10px 15px; border-radius: 0; color: #416475; display: inline-block; margin-right: 5px; margin-bottom: 5px; line-height: 1.5; text-decoration: none; margin-top: 50px; letter-spacing: 1px; } .button { background-color: #4CAF50; /* Green */ border: none; color: white; padding: 16px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; -webkit-transition-duration: 0.4s; /* Safari */ transition-duration: 0.4s; cursor: pointer; border-radius: 50px; } .button1 { background-color: #666666; color: #00B09F; border: 2px solid #00B09F; } .button1:hover { background-color: #00B09F; color: white; }4 0 4木有找到你所请求的页面"},{"title":"","date":"2018-12-02T15:22:36.000Z","updated":"2018-12-03T14:24:55.671Z","comments":false,"path":"Library/index.html","permalink":"https://anoyer.cn/Library/index.html","excerpt":"","text":"此页会不定时的发布各种学习资料，内容涵盖ACM模板、C/C++学习资料、数据结构学习资料、各种IT类学习资料…等等等等，资源会以直链、软件官网、网盘等形式提供下载。温馨提示如果你发现有资源无法下载或者资源失效等情况可以联系我，我会马上进行处理。本站保证站内提供的所有可下载资源（软件等等）都是按”原样”提供，本站未做过任何改动；但不保证本站提供的下载资源的准确性、安全性和完整性；同时本站也不承担用户因使用这些下载的资源对自己和他人造成任何形式的损失或伤害。本站上的所有资源均来自互联网，仅供学习和研究使用，不得用于任何商业用途。如有侵犯你版权的，请联系我本人，本站将立即更改。ACM模板ACM算法模板ACM及算法学习书籍ACM模板-f_zyj[挑战程序设计竞赛(第2版)].巫泽俊ACM模板Deeplearning深度学习笔记v5.41kuangbin的ACM模板（新）027933-算法设计与分析基础 第二版[hejizhan.com]ACM模版-sxy算法导论_原书第3版_CHSACM模板-Anoyer刘汝佳《算法艺术与信息学竞赛》电子版oeis核心数列网算法竞赛入门经典 紫书dp进阶之路国际大学生程序设计竞赛指南IT类学习资料汇集C/C++学习资料数据结构学习资料狂人C程序员入门必备【大话数据结构】程杰C和指针（中文版）C陷阱与缺陷C专家编程C语言与C++语言程序设计其他学习资料英语Github入门教程四级单词一笑而过-俞敏洪亲笔力荐的词汇宝典从+0+开始学习+GitHub+系列视频学习资源C语言C++学习指南2017（零基础入门）Python全能自动化开发-基础入门汇编语言视频课程oeasy的ps教程，我们一起来玩ps(photoshop)"},{"title":"","date":"2018-09-15T03:49:07.000Z","updated":"2018-12-03T04:09:47.428Z","comments":false,"path":"about/index.html","permalink":"https://anoyer.cn/about/index.html","excerpt":"","text":"本人介绍一名大闲人在役ACMer铁牌选手有点强迫症喜欢HIFI喜欢旅游收藏名言“今日的我要超越昨日的我，明日的我要胜过今日的我”“人一我百！人十我万！永不放弃~~~怀着自信的心，去追逐梦想”“咕咕咕”“人类的本质是复读机”“过不了就是OJ有问题”联系方式Github：@AnoyerWeiBo：@Anoy_虚伪QQ：@在头像下方在线联系E-Mail：zhihuangliu@foxmail.com本站备用站点CSDN: https://me.csdn.net/Anoy_acer"},{"title":"categories","date":"2018-09-15T02:29:41.000Z","updated":"2018-09-15T02:30:42.835Z","comments":true,"path":"categories/index.html","permalink":"https://anoyer.cn/categories/index.html","excerpt":"","text":""},{"title":"为什么在Coding上搭建的博客有时打不开呢？","date":"2018-12-08T07:50:18.000Z","updated":"2018-12-08T09:42:36.432Z","comments":true,"path":"article/201812081538.html","permalink":"https://anoyer.cn/article/201812081538.html","excerpt":"","text":"今天（2018年12月8日），大概过了中午之后Coding的pages服务又出现了瘫痪现象，ping了下域名，整个地图全爆红。与上次Coding瘫痪（2018年11月18日下午）的情况基本一致。上一次Coding瘫痪的第二天中午我就联系了Coding的客服，以下是我和客服的聊天记录请大家过目，别的我也就不多说的，因为我早不信任它了。"},{"title":"","date":"2018-09-16T14:15:00.000Z","updated":"2018-12-01T16:39:40.756Z","comments":false,"path":"check-link/index.html","permalink":"https://anoyer.cn/check-link/index.html","excerpt":"","text":"友链检查记录以下是各个友链的撤链信息，若需恢复友链请联系我本人名称网址撤链原因撤链时间能否恢复阳一的博客http://www.heyangli.com链接错误2018.11.26能帖子http://www.tiezi.xyz链接错误2018.11.26能JasonYu的博客https://www.yuhuizhen.com/未加链接2018.11.26能JunMohttps://mo3.top/未加友链2018.11.26能最初的墨https://www.taitan.tech/域名错误2018.11.20能"},{"title":"","date":"2019-01-21T01:58:47.495Z","updated":"2018-11-23T01:04:46.056Z","comments":true,"path":"js/cover.js","permalink":"https://anoyer.cn/js/cover.js","excerpt":"","text":"var brightness; //��ʾ���� function cover(brightness) { if (typeof(div) == 'undefined') { div = document.createElement('div'); div.setAttribute('style', 'position:fixed;top:0;left:0;outline:5000px solid;z-index:99999;'); document.body.appendChild(div); } else { div.style.display = ''; } div.style.outlineColor = 'rgba(0,0,0,' + brightness + ')'; } //�¼����� window.addEventListener('keydown', function(e) { if (e.altKey && e.keyCode == 90) { //Alt+Z:��ҹ��ģʽ cover(brightness = 0.3); } if (e.altKey && e.keyCode == 88) { //Alt+X:�ر� cover(brightness = 0); } if (e.altKey && e.keyCode == 38) { //Alt+��:�������� if (brightness - 0.05 > 0.05) cover(brightness -= 0.05); } if (e.altKey && e.keyCode == 40) { //Alt+��:�������� if (brightness + 0.05 < 0.95) cover(brightness += 0.05); } }, false);"},{"title":"","date":"2019-01-21T01:58:47.493Z","updated":"2018-11-21T11:27:50.515Z","comments":true,"path":"js/back.top.js","permalink":"https://anoyer.cn/js/back.top.js","excerpt":"","text":"$(document).ready(function($){ // browser window scroll (in pixels) after which the \"back to top\" link is shown var offset = 300, //duration of the top scrolling animation (in ms) scroll_top_duration = 200, //grab the \"back to top\" link $back_to_top = $('.cd-top'); //hide or show the \"back to top\" link $(window).scroll(function(){ ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out'); }); //smooth scroll to top $back_to_top.on('click', function(event){ event.preventDefault(); $('body,html').animate({ scrollTop: 0 , }, scroll_top_duration ); }); });"},{"title":"","date":"2019-01-21T01:58:47.498Z","updated":"2018-11-26T02:26:20.273Z","comments":true,"path":"js/get.time.js","permalink":"https://anoyer.cn/js/get.time.js","excerpt":"","text":"function clock_12h() { var today = new Date(); //获得当前时间 //获得年、月、日，Date()函数中的月份是从0－11计算 var year = today.getFullYear(); var month = today.getMonth()+1; var date = today.getDate(); var hour = today.getHours(); //获得小时、分钟、秒 var minute = today.getMinutes(); var second = today.getSeconds(); var apm=\"AM\"; //默认显示上午: AM if (hour>12) //按12小时制显示 { hour=hour-12; apm=\"PM\" ; } var weekday = 0; switch(today.getDay()){ case 0: weekday = \"星期日\"; break; case 1: weekday = \"星期一\"; break; case 2: weekday = \"星期二\"; break; case 3: weekday = \"星期三\"; break; case 4: weekday = \"星期四\"; break; case 5: weekday = \"星期五\"; break; case 6: weekday = \"星期六\"; break; } /*设置div的内容为当前时间*/ document.getElementById(\"myclock\").innerHTML=\"\"+year+\"年\"+month+\"月\"+date+\"日\"+weekday; } /*使用setInterval()每间隔指定毫秒后调用clock_12h()*/ var myTime = setInterval(\"clock_12h()\",1000);"},{"title":"","date":"2019-01-21T10:53:36.506Z","updated":"2019-01-21T10:53:36.506Z","comments":false,"path":"links/index.html","permalink":"https://anoyer.cn/links/index.html","excerpt":"","text":"友 链海内存知己，天涯若比邻——以下为各位小白大佬的友链，优秀的博客友链还会放在博客的页脚哟~如果需要申请友链可以点击最下方的申请按钮！头像名称网站Anoyerhttps://blog.csdn.net/Anoy_acerf_zyjhttps://me.csdn.net/f_zyjCaprYanghttps://blog.csdn.net/CaprYangAererhttps://me.csdn.net/qq_41785863Leon_ldyhttps://blog.csdn.net/iamldyxumengnanhttps://blog.csdn.net/qq_40727946wzazzyhttps://blog.csdn.net/wzazzySXYhttps://orzsxy.github.ioCupccinohttps://me.csdn.net/qq_39898553小吴博客https://www.wushile.tophandsomehttps://www.ihewro.comChungZHhttps://chungzh.cn申请友情链接"},{"title":"","date":"2019-01-21T02:14:42.276Z","updated":"2018-12-02T08:43:55.253Z","comments":false,"path":"statement/index.html","permalink":"https://anoyer.cn/statement/index.html","excerpt":"","text":"网站声明本博客属个人所有，不涉及商业目的，非经允许，不得用于盈利目的。原创声明本站大部分内容属于原创，凡是本站发表的内容，请大家在转载的时候声明原文出处。博客中的所有文章或者本站的其他页面中使用的大部分图片或图标来自于网络，如果侵权与zhihuangliu@foxmail.com联系删除！转载声明转载本站文章可酌情修改内容，但需保证文章的语义完整性，以免让读者错误理会作者的真实意图。修改内容需通知源作者。任何转载自其他站点的文章，本站都会在文章结尾处声明原文链接，如果您的文章不希望被我转载，请及时联系我进行删除处理。评论审核制度任何评论无需审核即可通过评论，如发现有恶意评论以及垃圾评论我会及时处理掉。本人不会以任何理由在任何页面留下恶意评论、诽谤、谩骂，也不会留下任何对您有不良影响的评论，如果您发现有人盗用我的名义用来进行恶意评论，希望您能及时联系我，谢谢！"},{"title":"","date":"2018-09-16T14:15:00.000Z","updated":"2018-12-02T09:04:11.086Z","comments":false,"path":"link-sq/index.html","permalink":"https://anoyer.cn/link-sq/index.html","excerpt":"","text":"申请友情链接申请条件必须是非营利性且可以稳定运营的网站。网站内90%的内容属于原创，只接受博客网站，技术类博客优先。不接受包含色情、毒品、恐怖、赌博等含有违法内容以及包含大量广告的网站。不接受通过第三方网站代建平台（如“凡科建站”、“搜狐快站”等）搭建的博客网站。网站内容需要经常更新。申请须知友情链接只是结交朋友，而不是为了SEO。单方若需要撤销友链务必先通知另一方。除特殊友链外，友情链接都按正常顺序排列，不分排名前后。本博客将不定时对无法访问或含有违规内容以及私自撤链的网址，进行清理。在申请前请先将本博客添加至你博客的友情链接栏目中，在24小时内不要删除（我会在24小时内查收邮件）。本博客会精选出优质博客将其链接会另外在网站页脚显示，链接也会定期检查和重选。若发现我方先行撤链，请进入检查记录页面查看撤链的原因。后需恢复友链请联系我本人。阅读友情链接的申请条件和须知后可点击下方的申请按钮，浏览器会自动启动你客户端的邮件程序并自动载入申请模板，你只需在模板中填写博客地址和名称即可，若浏览器未成功启动邮件程序，请确认客户端是否已安装了邮件程序并绑定了自己的邮箱账号。当然，你也可以直接通过博主的联系方式来联系我交换友链，但必须需要说明你的博客名称和博客地址。申 请 友 情 链 接"},{"title":"tags","date":"2018-09-15T02:31:15.000Z","updated":"2018-09-15T02:31:46.964Z","comments":true,"path":"tags/index.html","permalink":"https://anoyer.cn/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-09-15T03:50:12.000Z","updated":"2018-12-03T14:25:00.153Z","comments":false,"path":"resources/index.html","permalink":"https://anoyer.cn/resources/index.html","excerpt":"这是藏有博主不可告人密码的小仓库哦。","text":"这是藏有博主不可告人密码的小仓库哦。 Incorrect Password! No content to display! "}],"posts":[{"title":"2019 Wannafly Camp Day 1","slug":"2019-Wannafly-Camp","date":"2019-01-20T14:19:23.000Z","updated":"2019-01-20T14:47:08.294Z","comments":true,"path":"article/2019-Wannafly-Camp.html","link":"","permalink":"https://anoyer.cn/article/2019-Wannafly-Camp.html","excerpt":"","text":"自闭感受第一次参加这种线下的算法Camp，不得不说和队友都是内心非常的小鸡动。上午开幕式wls讲了一堆话，差不多就是一起呲逼加鸡汤吧（哈哈希望wls不要打死我）。下午就是day训练赛了，因为一个主力队友生病没来，带着一个新队友2排，直接跳过了图论和DP题，差点就死怼C构造和E暴零自闭了，最后发现J题原题一发A，最后C题放弃了构造去写了100*100的暴力过了（抹汗）。自己还是太菜了，还有好多成长空间，细节，第一解题反应，耐心等等。不多说上题解（后期补题会更新其他能力范围内的题解）C-拆拆拆数思路：题目只有1和2的情况，如果ab互质则为1，如果不互质n为2，且一定存在答案（第一感觉是这样）。开始我对n=2的情况去构造，发现一直wa（菜哭了），后来A了J题后重新换了100*100暴力枚举两组ai,bi。1234567891011121314151617181920212223242526272829303132#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=1e9+7;const int mod=1e5+7;int main()&#123; int t; scanf(\"%d\",&amp;t); while(t--)&#123; ll a,b; scanf(\"%lld%lld\",&amp;a,&amp;b); if(__gcd(a,b)==1)&#123; printf(\"1\\n%lld %lld\\n\",a,b); &#125; else&#123; int flag=0; for(ll i=2;i&lt;=100;i++)&#123; for(ll j=2;i&lt;=100;i++)&#123; if(__gcd(a-i,b-j)==1&amp;&amp;__gcd(i,j)==1)&#123; printf(\"2\\n%lld %lld\\n\",i,j); printf(\"%lld %lld\\n\",a-i,a-j); flag=1; break; &#125; &#125; if(flag)break; &#125; &#125; &#125; return 0;&#125;J-夺宝奇兵思路：看着题比较晚了，一看woc这不就是CF原题嘛，考虑枚举最终票数。枚举完票数就开始处理，把每个党超过这个票数且收钱最少的人收买过来，如果这些人都收买完了可是还没有达到预定的票数，就一直收买之前还没有收买过的学生直到人数达标,就这样巴拉巴拉A了12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;stdio.h&gt;#include&lt;bits\\stdc++.h&gt;using namespace std;typedef long long ll;int n,m,ns,cnt[3005],Sum[3005];struct peo&#123; int p,c,rk;&#125;a[3005];struct val&#123; int rk,v;&#125;b[3005];bool vis[3005];ll min_ans=-1,ans;bool cmpa (peo a,peo b)&#123; if(a.p==b.p) return a.c&lt;b.c; return a.p&lt;b.p;&#125;bool cmpb (val a,val b)&#123; return a.v&lt;b.v;&#125;int main()&#123; scanf(\"%d%d\",&amp;m,&amp;n); for (int i=1;i&lt;=n;++i)&#123; scanf(\"%d%d\",&amp;a[i].c,&amp;a[i].p); a[i].p++; a[i].rk=i; b[i].rk=i; b[i].v=a[i].c; &#125; sort(a+1,a+1+n,cmpa); sort(b+1,b+1+n,cmpb); for (int i=1;i&lt;=n;++i) Sum[ a[i].p ]++; for (int s=1;s&lt;=n;++s)&#123; ns=0; ans=0; memset(vis,0,sizeof(vis)); memset(cnt,0,sizeof(cnt)); for (int j=1;j&lt;=n;++j)&#123; if(a[j].p==1) ns++,vis[ a[j].rk ]=true; else&#123; if(Sum[ a[j].p ]-cnt[ a[j].p ]&gt;=s)&#123; vis[ a[j].rk ]=true; cnt[ a[j].p ]++; ans+=a[j].c; ns++; &#125; &#125; &#125; for (int i=1;i&lt;=n;++i)&#123; if(ns&gt;=s) break; if(vis[ b[i].rk ]) continue; ns++; ans+=b[i].v; &#125; if(min_ans==-1) min_ans=ans; min_ans=min(ans,min_ans); &#125; cout&lt;&lt;min_ans; return 0;&#125;","categories":[{"name":"2019 Wannafly Winter Came","slug":"2019-Wannafly-Winter-Came","permalink":"https://anoyer.cn/categories/2019-Wannafly-Winter-Came/"}],"tags":[{"name":"Camp","slug":"Camp","permalink":"https://anoyer.cn/tags/Camp/"}]},{"title":"输入外挂总结","slug":"Fread","date":"2019-01-18T09:20:46.000Z","updated":"2019-01-18T09:35:03.952Z","comments":true,"path":"article/Fread.html","link":"","permalink":"https://anoyer.cn/article/Fread.html","excerpt":"","text":"题外话明明在C语言中有scanf()、printf()，C++中有cin、cout，为什么我们还要用输入输出外挂呢？这个问题很明显，一定是因为这些输入输出函数功能过于强大而导致效率低，（很多时候，功能越强大的东西越臃肿），而我们使用的输入输出外挂既然叫外挂，那说明其一定有很大的优势，而这方面优势就体现在术有专攻上。原来的输入输出函数因为要应对不同类型的输入输出，所以内部一定做了很多的判断，而我们在遇见实际问题时，往往都是对特定类型的进行输入输出，所以这些判断就显得无用且浪费资源。这时，我们的输入输出外挂也就有了存在的必要性，也就应运而生。我们都知道，scanf()、printf()、cin、cout其实就是对其他一些基础的获取或输出语句（getchar() putchar()等）进行封装，而这些基础的函数功能弱，效率高，所以我们的输入输出外挂也是仿照着scanf()、printf()、cin、cout来实现的，只不过做了针对性的改造，最终我们改造出来多种功能比scanf()等弱、比getchar()等强，效率比scanf()等高、比gerchar()等低的函数，从而达到针对性的作用，减少了不必要的资源消耗。当然输入输出外挂一般用在大量输入输出的情况下，这样性价比才高一些，否则得不偿失（牺牲了代码长度而换来了微不足道的效率提升）。摘抄原文：https://blog.csdn.net/f_zyj/article/details/51473493普通输入外挂(适用于正整数)12345void read(int &amp;x)&#123; char ch = getchar(); x = 0; for (; ch &lt; '0' || ch &gt; '9'; ch = getchar()); for (; ch &gt;= '0' &amp;&amp; ch &lt;= '9'; ch = getchar()) x = x * 10 + ch - '0';&#125;整数输入外挂(适用于整数)123456789101112131415const int BufferSize=1&lt;&lt;16;char buffer[BufferSize],*head,*tail;inline char Getchar() &#123; if(head==tail) &#123; int l=fread(buffer,1,BufferSize,stdin); tail=(head=buffer)+l; &#125; return *head++;&#125;inline int read() &#123; int x=0,f=1;char c=Getchar(); for(;!isdigit(c);c=Getchar()) if(c=='-') f=-1; for(;isdigit(c);c=Getchar()) x=x*10+c-'0'; return x*f;&#125;加强版输入外挂(速度比普通输入外挂快不少)12345678910111213141516171819202122232425262728namespace fastIO &#123;#define BUF_SIZE 100000 //fread -&gt; read bool IOerror = 0; inline char nc() &#123; static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE; if (p1 == pend) &#123; p1 = buf; pend = buf + fread(buf, 1, BUF_SIZE, stdin); if (pend == p1) &#123; IOerror = 1; return -1; &#125; &#125; return *p1++; &#125; inline bool blank(char ch) &#123; return ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t'; &#125; inline void read(int &amp;x) &#123; char ch; while (blank(ch = nc())); if (IOerror) return; for (x = ch - '0'; (ch = nc()) &gt;= '0' &amp;&amp; ch &lt;= '9'; x = x * 10 + ch - '0'); &#125;#undef BUF_SIZE&#125;;using namespace fastIO;加强版完整型输入外挂包(速度快，适用于整形，浮点型)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121namespace fastIO&#123; #define BUF_SIZE 100000 #define OUT_SIZE 100000 #define ll long long //fread-&gt;read bool IOerror=0; inline char nc()&#123; static char buf[BUF_SIZE],*p1=buf+BUF_SIZE,*pend=buf+BUF_SIZE; if (p1==pend)&#123; p1=buf; pend=buf+fread(buf,1,BUF_SIZE,stdin); if (pend==p1)&#123;IOerror=1;return -1;&#125; //&#123;printf(\"IO error!\\n\");system(\"pause\");for (;;);exit(0);&#125; &#125; return *p1++; &#125; inline bool blank(char ch)&#123;return ch==' '||ch=='\\n'||ch=='\\r'||ch=='\\t';&#125; inline void read(int &amp;x)&#123; bool sign=0; char ch=nc(); x=0; for (;blank(ch);ch=nc()); if (IOerror)return; if (ch=='-')sign=1,ch=nc(); for (;ch&gt;='0'&amp;&amp;ch&lt;='9';ch=nc())x=x*10+ch-'0'; if (sign)x=-x; &#125; inline void read(ll &amp;x)&#123; bool sign=0; char ch=nc(); x=0; for (;blank(ch);ch=nc()); if (IOerror)return; if (ch=='-')sign=1,ch=nc(); for (;ch&gt;='0'&amp;&amp;ch&lt;='9';ch=nc())x=x*10+ch-'0'; if (sign)x=-x; &#125; inline void read(double &amp;x)&#123; bool sign=0; char ch=nc(); x=0; for (;blank(ch);ch=nc()); if (IOerror)return; if (ch=='-')sign=1,ch=nc(); for (;ch&gt;='0'&amp;&amp;ch&lt;='9';ch=nc())x=x*10+ch-'0'; if (ch=='.')&#123; double tmp=1; ch=nc(); for (;ch&gt;='0'&amp;&amp;ch&lt;='9';ch=nc())tmp/=10.0,x+=tmp*(ch-'0'); &#125; if (sign)x=-x; &#125; inline void read(char *s)&#123; char ch=nc(); for (;blank(ch);ch=nc()); if (IOerror)return; for (;!blank(ch)&amp;&amp;!IOerror;ch=nc())*s++=ch; *s=0; &#125; inline void read(char &amp;c)&#123; for (c=nc();blank(c);c=nc()); if (IOerror)&#123;c=-1;return;&#125; &#125; //fwrite-&gt;write struct Ostream_fwrite&#123; char *buf,*p1,*pend; Ostream_fwrite()&#123;buf=new char[BUF_SIZE];p1=buf;pend=buf+BUF_SIZE;&#125; void out(char ch)&#123; if (p1==pend)&#123; fwrite(buf,1,BUF_SIZE,stdout);p1=buf; &#125; *p1++=ch; &#125; void print(int x)&#123; static char s[15],*s1;s1=s; if (!x)*s1++='0';if (x&lt;0)out('-'),x=-x; while(x)*s1++=x%10+'0',x/=10; while(s1--!=s)out(*s1); &#125; void println(int x)&#123; static char s[15],*s1;s1=s; if (!x)*s1++='0';if (x&lt;0)out('-'),x=-x; while(x)*s1++=x%10+'0',x/=10; while(s1--!=s)out(*s1); out('\\n'); &#125; void print(ll x)&#123; static char s[25],*s1;s1=s; if (!x)*s1++='0';if (x&lt;0)out('-'),x=-x; while(x)*s1++=x%10+'0',x/=10; while(s1--!=s)out(*s1); &#125; void println(ll x)&#123; static char s[25],*s1;s1=s; if (!x)*s1++='0';if (x&lt;0)out('-'),x=-x; while(x)*s1++=x%10+'0',x/=10; while(s1--!=s)out(*s1); out('\\n'); &#125; void print(double x,int y)&#123; static ll mul[]=&#123;1,10,100,1000,10000,100000,1000000,10000000,100000000, 1000000000,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL, 100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL&#125;; if (x&lt;-1e-12)out('-'),x=-x;x*=mul[y]; ll x1=(ll)floor(x); if (x-floor(x)&gt;=0.5)++x1; ll x2=x1/mul[y],x3=x1-x2*mul[y]; print(x2); if (y&gt;0)&#123;out('.'); for (size_t i=1;i&lt;y&amp;&amp;x3*mul[i]&lt;mul[y];out('0'),++i); print(x3);&#125; &#125; void println(double x,int y)&#123;print(x,y);out('\\n');&#125; void print(char *s)&#123;while (*s)out(*s++);&#125; void println(char *s)&#123;while (*s)out(*s++);out('\\n');&#125; void flush()&#123;if (p1!=buf)&#123;fwrite(buf,1,p1-buf,stdout);p1=buf;&#125;&#125; ~Ostream_fwrite()&#123;flush();&#125; &#125;Ostream; inline void print(int x)&#123;Ostream.print(x);&#125; inline void println(int x)&#123;Ostream.println(x);&#125; inline void print(char x)&#123;Ostream.out(x);&#125; inline void println(char x)&#123;Ostream.out(x);Ostream.out('\\n');&#125; inline void print(ll x)&#123;Ostream.print(x);&#125; inline void println(ll x)&#123;Ostream.println(x);&#125; inline void print(double x,int y)&#123;Ostream.print(x,y);&#125; //y为小数点后几位 inline void println(double x,int y)&#123;Ostream.println(x,y);&#125; inline void print(char *s)&#123;Ostream.print(s);&#125; inline void println(char *s)&#123;Ostream.println(s);&#125; inline void println()&#123;Ostream.out('\\n');&#125; inline void flush()&#123;Ostream.flush();&#125; //清空 #undef ll #undef OUT_SIZE #undef BUF_SIZE&#125;;using namespace fastIO;","categories":[{"name":"C++语法","slug":"C-语法","permalink":"https://anoyer.cn/categories/C-语法/"}],"tags":[{"name":"输入外挂","slug":"输入外挂","permalink":"https://anoyer.cn/tags/输入外挂/"}]},{"title":"C++记录程序运行时间5大方法","slug":"Run-Time","date":"2019-01-18T09:20:23.000Z","updated":"2019-01-18T09:46:58.711Z","comments":true,"path":"article/Run-Time.html","link":"","permalink":"https://anoyer.cn/article/Run-Time.html","excerpt":"","text":"1.用clock()函数用clock()函数，得到系统启动以后的毫秒级时间，然后除以CLOCKS_PER_SEC，就可以换成“秒”，标准c函数。1234clock_t start_time=clock();init();clock_t end_time=clock();cout &lt;&lt; \"The run time is: \" &lt;&lt;(double)(end_time - start_time) / CLOCKS_PER_SEC &lt;&lt; \"s\" &lt;&lt; endl;2.用GetTickCount()函数1234DWORD Start = GetTickCount();//这里运行你的程序代码DWORD End = GetTickCount();//则(End-Start)就是你的程序运行时间, 以毫秒为单位这个函数只精确到55ms，1个tick就是55ms。3.timeGetTime()函数12345DWORD Start = timeGetTime();//这里运行你的程序代码DWORD End = timeGetTime();//则(End-Start)就是你的程序运行时间, 以毫秒为单位//虽然返回的值单位应该是ms,但精度只有10ms。4.使用Boost库中的timertimer类可以测量时间的流逝，是小型计时器，提供毫秒级别的计时精度。头文件：#include&lt;boost/timer.hpp&gt;123timer t;//声明计时器对象并开始计时 //...测试代码cout&lt;&lt;\"运行时间：\"&lt;&lt;t.elapsed() &lt;&lt;\"s\"&lt;&lt;endl;//输出已流失的时间5.高精度时控函数QueryPerformanceFrequency()，QueryPerformanceCounter()QueryPerformanceCounter()这个函数返回高精确度性能计数器的值,它可以以微妙为单位计时.但是QueryPerformanceCounter()确切的精确计时的最小单位是与系统有关的,所以,必须要查询系统以得到QueryPerformanceCounter()返回的嘀哒声的频率.QueryPerformanceFrequency()提供了这个频率值,返回每秒嘀哒声的个数.计算确切的时间是从第一次调用QueryPerformanceCounter()开始的假设得到的LARGE_INTEGER为nStartCounter,过一段时间后再次调用该函数结束的,设得到nStopCounter.两者之差除以QueryPerformanceFrequency()的频率就是开始到结束之间的秒数.由于计时函数本身要耗费很少的时间,要减去一个很少的时间开销.但一般都把这个开销忽略。头文件：#include&lt;windows.h&gt;1234567891011double time=0; double counts=0; LARGE_INTEGER nFreq; LARGE_INTEGER nBeginTime; LARGE_INTEGER nEndTime; QueryPerformanceFrequency(&amp;nFreq); QueryPerformanceCounter(&amp;nBeginTime);//开始计时 //...测试代码QueryPerformanceCounter(&amp;nEndTime);//停止计时 time=(double)(nEndTime.QuadPart-nBeginTime.QuadPart)/(double)nFreq.QuadPart;//计算程序执行时间单位为s cout&lt;&lt;\"运行时间：\"&lt;&lt;time*1000&lt;&lt;\"ms\"&lt;&lt;endl;","categories":[{"name":"C++语法","slug":"C-语法","permalink":"https://anoyer.cn/categories/C-语法/"}],"tags":[{"name":"语法","slug":"语法","permalink":"https://anoyer.cn/tags/语法/"}]},{"title":"Henau-2018训练题1","slug":"henau-test1","date":"2018-12-22T10:48:03.000Z","updated":"2019-01-18T09:58:29.673Z","comments":true,"path":"article/henau-test1.html","link":"","permalink":"https://anoyer.cn/article/henau-test1.html","excerpt":"","text":"小刘爱复读12345678910111213141516#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 1e3 + 10;const int mod = 1e9 + 7;//把诗歌存入字符串char s[maxn] = \"I am the bone of my language repeater plastic is my body and wire is my blood I have created over a thousand copies Unknown to Death Nor known to Life Have withstood pain to create copies Yet,those hands will never hold anything So as I pray,unlimited repeat works\";int main()&#123; int len = strlen(s), cnt = 0; //cnt表示字母个数 for (int i = 0; i &lt; len; i++)&#123;//遍历一遍字符串 if ((s[i] &gt;= 'a'&amp;&amp;s[i] &lt;= 'z') || (s[i] &gt;= 'A'&amp;&amp;s[i] &lt;= 'Z'))cnt++; //如果当前字符是个字母，则cnt++; &#125; printf(\"%d\\n\", cnt); return 0;&#125;洋洋爱模仿12345678910111213141516171819#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e5 + 7;char s[maxn], t[maxn];int main()&#123; int T; scanf(\"%d\", &amp;T); while (T--)&#123; int ans = 0; //ans表示s,t串相同位相同字符个数 scanf(\"%s\", s); scanf(\"%s\", t); int len = strlen(s); //获取串长度 for (int i = 0; i &lt; len; i++) //for遍历字符串 if (s[i] == t[i])ans++; //如果发现一个s[i]和t[i]相同,ans++; printf(\"%.2f\\n\", (double)ans / (double)len); //ans/总字符数=相似度 &#125; return 0;&#125;小温爱蔬菜123456789101112131415161718192021222324252627#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 1e5 + 10;const int mod = 1e9 + 7;int sum[maxn]; //前缀和int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; int n, a, m; scanf(\"%d%d\", &amp;n, &amp;m); sum[0] = 0; for (int i = 1; i &lt;= n; i++)&#123; scanf(\"%d\", &amp;sum[i]); sum[i] += sum[i - 1]; //获取a数组的前缀和表 &#125; while (m--)&#123; int l, r; scanf(\"%d%d\", &amp;l, &amp;r); //前缀和性质：sum[r]-sum[l-1]=a[l]+....+a[r] printf(\"%d\\n\", sum[r] - sum[l - 1]); &#125; &#125; return 0;&#125;洋洋爱密码12345678910111213141516171819202122232425262728#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 1e5 + 10;const int mod = 1e9 + 7;int a[maxn];bool cmp(int a, int b)&#123; return a &gt; b;&#125;int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; int n, cnt = 0, ans = 0; //ans用来记录当前所花费金额 scanf(\"%d\", &amp;n); for (int i = 0; i &lt; n; i++)&#123; scanf(\"%d\", &amp;a[i]); &#125; sort(a, a + n, cmp); //先对物品价格从大到小排序 for (int i = 0; i &lt; n; i++)&#123; ans += a[i]; if (ans &gt;= 30)cnt++; //如果sum&gt;=30，则cnt++,输入密码次数cnt++ &#125; printf(\"%d\\n\", cnt); &#125; return 0;&#125;","categories":[{"name":"农大训练赛题解","slug":"农大训练赛题解","permalink":"https://anoyer.cn/categories/农大训练赛题解/"}],"tags":[{"name":"河南农业大学训练赛题解","slug":"河南农业大学训练赛题解","permalink":"https://anoyer.cn/tags/河南农业大学训练赛题解/"}]},{"title":"SPOJ - REPEATS - Repeats（RMQ+后缀数组）","slug":"SPOJ-REPEATS-Repeats","date":"2018-12-07T14:20:38.000Z","updated":"2018-12-07T15:46:10.084Z","comments":true,"path":"article/SPOJ-REPEATS-Repeats.html","link":"","permalink":"https://anoyer.cn/article/SPOJ-REPEATS-Repeats.html","excerpt":"","text":"博主链接题目链接题意：对于给出的字符串(长度&lt;= 50000,只包含字符’a’或’b’)找到最大的k使得存在某个字符串t重复k次是给出的字符串的子串题解：如果每一个循环节的长度为len, 那么在原字符串S中, S[ilen]与S[(i + 1)len]一定会被包含在答案的子串当中那么枚举可能的答案的循环节的长度, 然后枚举可能的位置, 对于每一组可能被包含的位置S[ilen], S[(i + 1)len]求出其对应后缀的最长公共前缀长度L, 则该循环节至少循环了L/len + 1次, 但是当L%len != 0时, 后面多余出来的部分(长度L%len的部分)可能和前面的拼凑成循环节, 于是对于位置ilen - (len - L % len)和(i + 1)len - (len - L % len)求其后缀的最长公共前缀长度, 如果大于之前的结果,自然就说明从这个位置开始可以比之前多一个循环节, 于是这样枚举得到最多循环次数代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;map&gt;#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;math.h&gt;using namespace std;#define REP(i,n) for(i=0;i&lt;(n);++i)#define UPTO(i,l,h) for(i=(l);i&lt;=(h);++i)#define DOWN(i,h,l) for(i=(h);i&gt;=(l);--i)const int maxn=1e6+10;const int mod=1e9+7;typedef long long ll;template &lt;typename T, int LEN&gt;struct suffixarray&#123; //rank[i] 第i个后缀的排名; SA[i] 排名为i的后缀位置; Height[i] 排名为i的后缀与排名为(i-1)的后缀的LCP int str[LEN*3],sa[LEN*3]; int rank[LEN],height[LEN]; int id[LEN]; int best[LEN][20]; int len; bool equal(int *str, int a, int b)&#123; return str[a]==str[b]&amp;&amp;str[a+1]==str[b+1]&amp;&amp;str[a+2]==str[b+2]; &#125; bool cmp3(int *str, int *nstr, int a, int b)&#123; if(str[a]!=str[b])return str[a]&lt;str[b]; if(str[a+1]!=str[b+1])return str[a+1]&lt;str[b+1]; return nstr[a+b%3]&lt;nstr[b+b%3]; &#125; void radixsort(int *str, int *sa, int *res, int n, int m)&#123; int i; REP(i,m)id[i]=0; REP(i,n)++id[str[sa[i]]]; REP(i,m)id[i+1]+=id[i]; DOWN(i,n-1,0)res[--id[str[sa[i]]]]=sa[i]; &#125; void dc3(int *str, int *sa, int n, int m)&#123; #define F(x) ((x)/3+((x)%3==1?0:one)) #define G(x) ((x)&lt;one?(x)*3+1:((x)-one)*3+2) int *nstr=str+n, *nsa=sa+n, *tmpa=rank, *tmpb=height; int i,j,k,len=0,num=0,zero=0,one=(n+1)/3; REP(i,n)if(i%3)tmpa[len++]=i; str[n]=str[n+1]=0; radixsort(str+2, tmpa, tmpb, len, m); radixsort(str+1, tmpb, tmpa, len, m); radixsort(str+0, tmpa, tmpb, len, m); nstr[F(tmpb[0])]=num++; UPTO(i,1,len-1) nstr[F(tmpb[i])]=equal(str,tmpb[i-1],tmpb[i])?num-1:num++; if(num&lt;len)dc3(nstr,nsa,len,num); else REP(i,len)nsa[nstr[i]]=i; if(n%3==1)tmpa[zero++]=n-1; REP(i,len)if(nsa[i]&lt;one)tmpa[zero++]=nsa[i]*3; radixsort(str, tmpa, tmpb, zero, m); REP(i,len)tmpa[nsa[i]=G(nsa[i])]=i; i=j=0; REP(k,n) if(j&gt;=len||(i&lt;zero&amp;&amp;cmp3(str,tmpa,tmpb[i],nsa[j])))sa[k]=tmpb[i++]; else sa[k]=nsa[j++]; &#125; void initSA(T *s, int n,int m)&#123; int i,j,k=0; str[len=n]=0;//末尾增加一个0，这样就省去一些特殊情况的讨论，也就是最后一个mod 3刚好等于0 REP(i,n)str[i]=s[i]; dc3(str,sa,n+1,m); //可以切换成dc3 REP(i,n)sa[i]=sa[i+1];//第0小的默认为最后一个字符0，所以答案向前移动一位，da算法不用 //da(str,sa,n,m); REP(i,n)rank[sa[i]]=i; REP(i,n)//计算height数组 &#123; if(k)--k; if(rank[i])for(j=sa[rank[i]-1];str[i+k]==str[j+k];++k); else k=0; height[rank[i]]=k; &#125; &#125; void initRMQ()&#123; int i,j; int m=(int)(log(len*1.0)/log(2.0)); REP(i,len)best[i][0]=height[i]; for(j=1;j&lt;=m;++j) for(i=0;i+(1&lt;&lt;j)-1&lt;len;++i) best[i][j]=min(best[i][j-1],best[i+(1&lt;&lt;(j-1))][j-1]); &#125; int RMQ(int l, int r)&#123; int k=int(log(r-l+1.0)/log(2.0)); return min(best[l][k],best[r-(1&lt;&lt;k)+1][k]); &#125; int LCPSA(int a, int b)&#123;//查询区间RMQ(i,j) a=rank[a],b=rank[b]; if(a&gt;b)swap(a,b); return RMQ(a+1,b); &#125;&#125;;suffixarray&lt;int,maxn&gt; msa;map&lt;int ,int &gt; mymap; //计算m,m表示不同字符个数，如果是字母直接用256char s[maxn];int ss[maxn];int main()&#123; int t,Max=0,ans,k; scanf(\"%d\",&amp;t); while(t--)&#123; int len; Max=1; scanf(\"%d\",&amp;len); for(int i=0;i&lt;len;i++)&#123; scanf(\"%s\",s); ss[i]=s[0]-'a'+1; &#125; msa.initSA(ss,len,4); msa.initRMQ(); for(int i=1;i&lt;=len;i++)&#123; //枚举长度 for(int j=0;j+i&lt;len;j+=i)&#123; //+i极大的降低了复杂度 //但也产生了需要向前比较的问题 ans=msa.LCPSA(j,j+i); //公共后缀的长度 k=j-(i-ans%i); //前推到k位置 ans=ans/i+1; //出现次数 if(k&gt;=0&amp;&amp;msa.LCPSA(k,k+i)&gt;=i)ans++; //printf(\"L=%d,R=%d\\n\",i,ans); Max=max(Max,ans); &#125; &#125; printf(\"%d\\n\",Max); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"后缀数组","slug":"后缀数组","permalink":"https://anoyer.cn/tags/后缀数组/"},{"name":"SPOJ","slug":"SPOJ","permalink":"https://anoyer.cn/tags/SPOJ/"}]},{"title":"后缀自动机DC3模板","slug":"Suffix-Array-DC3","date":"2018-12-06T15:11:27.000Z","updated":"2019-01-18T09:55:01.329Z","comments":true,"path":"article/Suffix-Array-DC3.html","link":"","permalink":"https://anoyer.cn/article/Suffix-Array-DC3.html","excerpt":"","text":"后缀数组一些性质suffix（j）和suffix（k）的最长公共前缀为height【rank【j】+1】到height【rank【k】】中的最小值；待更新123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116/*POJ-2406*/#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;map&gt;#include&lt;algorithm&gt;using namespace std;#define REP(i,n) for(i=0;i&lt;(n);++i)#define UPTO(i,l,h) for(i=(l);i&lt;=(h);++i)#define DOWN(i,h,l) for(i=(h);i&gt;=(l);--i)const int maxn=1e6+10;const int mod=1e9+7;typedef long long ll;template &lt;typename T, int LEN&gt;struct suffixarray&#123; //rank[i] 第i个后缀的排名; SA[i] 排名为i的后缀位置; Height[i] 排名为i的后缀与排名为(i-1)的后缀的LCP int str[LEN*3],sa[LEN*3]; int rank[LEN],height[LEN]; int id[LEN]; int best[LEN][20]; int len; bool equal(int *str, int a, int b)&#123; return str[a]==str[b]&amp;&amp;str[a+1]==str[b+1]&amp;&amp;str[a+2]==str[b+2]; &#125; bool cmp3(int *str, int *nstr, int a, int b)&#123; if(str[a]!=str[b])return str[a]&lt;str[b]; if(str[a+1]!=str[b+1])return str[a+1]&lt;str[b+1]; return nstr[a+b%3]&lt;nstr[b+b%3]; &#125; void radixsort(int *str, int *sa, int *res, int n, int m)&#123; int i; REP(i,m)id[i]=0; REP(i,n)++id[str[sa[i]]]; REP(i,m)id[i+1]+=id[i]; DOWN(i,n-1,0)res[--id[str[sa[i]]]]=sa[i]; &#125; void dc3(int *str, int *sa, int n, int m)&#123; #define F(x) ((x)/3+((x)%3==1?0:one)) #define G(x) ((x)&lt;one?(x)*3+1:((x)-one)*3+2) int *nstr=str+n, *nsa=sa+n, *tmpa=rank, *tmpb=height; int i,j,k,len=0,num=0,zero=0,one=(n+1)/3; REP(i,n)if(i%3)tmpa[len++]=i; str[n]=str[n+1]=0; radixsort(str+2, tmpa, tmpb, len, m); radixsort(str+1, tmpb, tmpa, len, m); radixsort(str+0, tmpa, tmpb, len, m); nstr[F(tmpb[0])]=num++; UPTO(i,1,len-1) nstr[F(tmpb[i])]=equal(str,tmpb[i-1],tmpb[i])?num-1:num++; if(num&lt;len)dc3(nstr,nsa,len,num); else REP(i,len)nsa[nstr[i]]=i; if(n%3==1)tmpa[zero++]=n-1; REP(i,len)if(nsa[i]&lt;one)tmpa[zero++]=nsa[i]*3; radixsort(str, tmpa, tmpb, zero, m); REP(i,len)tmpa[nsa[i]=G(nsa[i])]=i; i=j=0; REP(k,n) if(j&gt;=len||(i&lt;zero&amp;&amp;cmp3(str,tmpa,tmpb[i],nsa[j])))sa[k]=tmpb[i++]; else sa[k]=nsa[j++]; &#125; void initSA(T *s, int n,int m)&#123; int i,j,k=0; str[len=n]=0;//末尾增加一个0，这样就省去一些特殊情况的讨论，也就是最后一个mod 3刚好等于0 REP(i,n)str[i]=s[i]; dc3(str,sa,n+1,m); //可以切换成dc3 REP(i,n)sa[i]=sa[i+1];//第0小的默认为最后一个字符0，所以答案向前移动一位，da算法不用 //da(str,sa,n,m); REP(i,n)rank[sa[i]]=i; REP(i,n)//计算height数组 &#123; if(k)--k; if(rank[i])for(j=sa[rank[i]-1];str[i+k]==str[j+k];++k); else k=0; height[rank[i]]=k; &#125; &#125; void initRMQ()&#123; int i,j; int m=(int)(log(len*1.0)/log(2.0)); REP(i,len)best[i][0]=height[i]; for(j=1;j&lt;=m;++j) for(i=0;i+(1&lt;&lt;j)-1&lt;len;++i) best[i][j]=min(best[i][j-1],best[i+(1&lt;&lt;(j-1))][j-1]); &#125; int RMQ(int l, int r)&#123; int k=int(log(r-l+1.0)/log(2.0)); return min(best[l][k],best[r-(1&lt;&lt;k)+1][k]); &#125; int LCPSA(int a, int b)&#123;//查询区间RMQ(i,j) a=rank[a],b=rank[b]; if(a&gt;b)swap(a,b); return RMQ(a+1,b); &#125;&#125;;suffixarray&lt;char,maxn&gt; msa;map&lt;int ,int &gt; mymap; //计算m,m表示不同字符个数，如果是字母直接用256char s[maxn];int main()&#123; while(scanf(\"%s\",s))&#123; if(s[0]=='.')break; int len= strlen(s); msa.initSA(s,len,256); int flag = 0; for (int i = 1; i &lt;= len; i++) &#123; if (len % i == 0 &amp;&amp; msa.rank[0] == msa.rank[i] + 1 &amp;&amp; msa.height[msa.rank[0]] == len - i) &#123; printf(\"%d\\n\", len / i); flag = 1; break; &#125; &#125; if (!flag)printf(\"1\\n\"); &#125; return 0;&#125;一些模板利用求重复次数最多的连续重复子串例题：SPOJ - REPEATS-Repeats12345678910111213msa.initRMQ();for(int i=1;i&lt;=len;i++)&#123; //枚举长度 for(int j=0;j+i&lt;len;j+=i)&#123; //+i极大的降低了复杂度 //但也产生了需要向前比较的问题 ans=msa.LCPSA(j,j+i); //公共后缀的长度 k=j-(i-ans%i); //前推到k位置 ans=ans/i+1; //出现次数 if(k&gt;=0&amp;&amp;msa.LCPSA(k,k+i)&gt;=i)ans++; //printf(\"L=%d,R=%d\\n\",i,ans); Max=max(Max,ans); &#125;&#125;printf(\"%d\\n\",Max);求最小循环节例题：POJ-2406 - Power Strings123456789int flag = 0;for (int i = 1; i &lt;= len; i++) &#123; if (len % i == 0 &amp;&amp; msa.rank[0] == msa.rank[i] + 1 &amp;&amp; msa.height[msa.rank[0]] == len - i) &#123; printf(\"%d\\n\", len / i); flag = 1; break; &#125;&#125;if (!flag)printf(\"1\\n\");求两串中长度大于k的公共子串有多少个。例题：POJ - 3415 - Common Substrings1234567891011121314151617181920212223242526272829303132333435363738394041ll solve(int k)&#123; int top=0; ll ans=0,tot=0; for(int i=1;i&lt;n;i++)&#123; if(msa.height[i]&lt;k)tot=0,top=0; else&#123; int cnt=0; if(msa.sa[i-1]&lt;lena)&#123; //说明不在同一串中 cnt++; tot+=msa.height[i]-k+1; &#125; while(top&amp;&amp;msa.height[i]&lt;=sta[top-1][0])&#123; top--; tot+=(msa.height[i]-sta[top][0])*sta[top][1]; cnt+=sta[top][1]; &#125; sta[top][0]=msa.height[i],sta[top++][1]=cnt; if(msa.sa[i]&gt;lena)ans+=tot; &#125; &#125; tot=top=0; for(int i=1;i&lt;n;i++)&#123; if(msa.height[i]&lt;k)tot=0,top=0; else&#123; int cnt=0; if(msa.sa[i-1]&gt;lena)&#123; //说明不在同一串中 cnt++; tot+=msa.height[i]-k+1; &#125; while(top&amp;&amp;msa.height[i]&lt;=sta[top-1][0])&#123; top--; tot+=(msa.height[i]-sta[top][0])*sta[top][1]; cnt+=sta[top][1]; &#125; sta[top][0]=msa.height[i],sta[top++][1]=cnt; if(msa.sa[i]&lt;lena)ans+=tot; &#125; &#125; return ans;&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"HDU-3336-Count the string（KMP-Next数组性质）","slug":"HDU-3336-Count-the-string（KMP-Next数组性质）","date":"2018-12-05T12:56:24.000Z","updated":"2018-12-05T12:57:40.751Z","comments":true,"path":"article/HDU-3336-Count-the-string（KMP-Next数组性质）.html","link":"","permalink":"https://anoyer.cn/article/HDU-3336-Count-the-string（KMP-Next数组性质）.html","excerpt":"","text":"博主链接题目链接题意：求一个串中所有前缀子串出现次数之和题解：对于每个串他前缀串出现次数和一定大于或等于n,因为有n个前缀；所以此时只需要去计算一下每一个前缀在后面出现了几次，也就是next数组的值。结合next数组的性质可以很容易得知，next数组中存在一个非0位，就出现了一种前缀，ans就++。所以只需对字符串求一遍next数组，统计都是个非零元素就可以了。代码：12345678910111213141516171819202122232425262728293031323334#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 2*1e6 + 10;const int mod = 1e9 + 7;typedef long long ll;char s[maxn];int nex[maxn];void Get_nex() &#123; int j = 0; for (int i = 1; s[i]; i++) &#123; while (s[i] != s[j + 1] &amp;&amp; j != 0)j = nex[j]; if (s[i] == s[j + 1] &amp;&amp; i != 1)j++; nex[i] = j; &#125;&#125;int main() &#123; int t,n; scanf(\"%d\", &amp;t); while (t--) &#123; scanf(\"%d\", &amp;n); scanf(\"%s\", s+1); int ans = 0; Get_nex(); for (int i = 1; i &lt;=n; i++) &#123; if (nex[i] != 0)ans++; &#125; printf(\"%d\\n\", (n + ans) % 10007); &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"POJ-2406-Power Strings(循环节)","slug":"POJ-2406-Power-Strings","date":"2018-12-05T12:54:16.000Z","updated":"2018-12-05T12:55:46.719Z","comments":true,"path":"article/POJ-2406-Power-Strings.html","link":"","permalink":"https://anoyer.cn/article/POJ-2406-Power-Strings.html","excerpt":"","text":"博主链接题目链接题意：给我们一个字符串，我们要求出它最多由几个相同的连续子串连接而成。也就是求最小循环节题解：先注意到如果他是循环子串那么n-next[n]一定是最小循环节。于是可以先求出nxt然后暴力匹配一遍看看。但是事实上只要满足n%(n-next[n])==0就可以保证答案正确了。代码：123456789101112131415161718192021222324252627#include&lt;stdio.h&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=1e6+10;char s[maxn];int Next[maxn];void Get_Nex()&#123; int j=-1; for(int i=0;s[i];i++)&#123; while(s[i]!=s[j+1]&amp;&amp;j!=-1)j=Next[j]; if(s[i]==s[j+1]&amp;i!=0)j++; Next[i]=j; &#125;&#125;int main()&#123; while(scanf(\"%s\",s))&#123; if(s[0]=='.')break; Get_Nex(); int ans=1; int len=strlen(s); int L=Next[len-1]; if(len%(len-L-1)==0)ans=len/(len-L-1); printf(\"%d\\n\",ans); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"POJ","slug":"POJ","permalink":"https://anoyer.cn/tags/POJ/"}]},{"title":"POJ - 3974 - Palindrome(裸马拉车)","slug":"POJ-3974-Palindrome-裸马拉车","date":"2018-12-05T12:51:13.000Z","updated":"2018-12-05T12:53:51.047Z","comments":true,"path":"article/POJ-3974-Palindrome-裸马拉车.html","link":"","permalink":"https://anoyer.cn/article/POJ-3974-Palindrome-裸马拉车.html","excerpt":"","text":"博主链接题目链接题意：给一个字符串，求连续最长的回文子串的长度。题解：利用Manacher算法，裸的模板题，不多说了。不懂Manacher算法—-见Manacher最长回文串算法代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#define met(a) memset(a,0,sizeof(a));using namespace std;typedef long long ll;const int maxn = 1000050;char s[maxn];char s_new[maxn * 2];int p[maxn * 2];int Init()&#123; int len = strlen(s); s_new[0] = '$'; s_new[1] = '#'; int j = 2; for (int i = 0; i &lt; len; i++)&#123; s_new[j++] = s[i]; s_new[j++] = '#'; &#125; s_new[j] = '\\0'; //printf(\"%s\\n\",s_new); return j; //返回s_new的长度 &#125;int Manacher()&#123; int len = Init(); //取得新字符串长度并完成向s_new的转换 int maxLen = -1; //最长回文长度 int id; int mx = 0; for (int i = 1; i &lt; len; i++)&#123; if (i &lt; mx) p[i] = min(p[2 * id - i], mx - i); //需搞清楚上面那张图含义, mx和2*id-i的含义 else p[i] = 1; while (s_new[i - p[i]] == s_new[i + p[i]]) //不需边界判断，因为左有'$',右有'\\0' p[i]++; //我们每走一步i，都要和mx比较，我们希望mx尽可能的远，这样才能更有机会执行if (i &lt; mx)这句代码，从而提高效率 if (mx &lt; i + p[i]) &#123; id = i; mx = i + p[i]; &#125; maxLen = max(maxLen, p[i] - 1); // printf(\"%d %d %d\\n\",mx,id,maxLen); &#125; /*for(int i=1;i&lt;=len;i++)printf(\"%d \",p[i]); printf(\"\\n\");*/ return maxLen;&#125;int main()&#123; int t = 0; while (scanf(\"%s\", s))&#123; t++; memset(p, 0, sizeof(p)); if (s[0] == 'E'&amp;&amp;s[1] == 'N'&amp;&amp;s[2] == 'D')break; printf(\"Case %d: %d\\n\", t, Manacher()); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"Manacher","slug":"Manacher","permalink":"https://anoyer.cn/tags/Manacher/"},{"name":"POJ","slug":"POJ","permalink":"https://anoyer.cn/tags/POJ/"}]},{"title":"HDU-3746-Cyclic Nacklace （KMP求循环节）","slug":"HDU-3746-Cyclic-Nacklace-（KMP求循环节）","date":"2018-12-05T12:49:32.000Z","updated":"2018-12-05T12:50:51.998Z","comments":true,"path":"article/HDU-3746-Cyclic-Nacklace-（KMP求循环节）.html","link":"","permalink":"https://anoyer.cn/article/HDU-3746-Cyclic-Nacklace-（KMP求循环节）.html","excerpt":"","text":"博主链接题目链接Sample Input12345&gt;3&gt;aaa&gt;abca&gt;abcde&gt;Sample Output1234&gt; 0&gt; 2&gt; 5&gt;题意：给你一些串，问如果想让这个串里面的循环节至少循环两次，需要添加几个字符（只能在最前面或者最后面添加）。比如ababc 需要添加5个就是添加ababc。题解：利用Next数组的性质：符合 i % ( i - next[i] ) == 0 &amp;&amp; next[i] != 0 , 则**说明字符串循环，而且**循环节长度为: i - next[i]循环次数为: i / ( i - next[i] )代码：123456789101112131415161718192021222324252627282930313233#include &lt;stdio.h&gt;#include &lt;string.h&gt;const int N = 1e5+5;int n, next[N];char str[N];void getNext () &#123; n = strlen (str+1); int p = 0; for (int i = 2; i &lt;= n; i++) &#123; while (p &gt; 0 &amp;&amp; str[p+1] != str[i]) p = next[p]; if (str[p+1] == str[i]) p++; next[i] = p; &#125;&#125;int main () &#123; int cas; scanf(\"%d\", &amp;cas); while (cas--) &#123; scanf(\"%s\", str+1); getNext(); int n= strlen (str+1); if (next[n] == 0) printf(\"%d\\n\", n); else &#123; int k = n - next[n]; if (n%k == 0) printf(\"0\\n\"); else printf(\"%d\\n\", k - (n - (n/k) * k)); &#125; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"Codeforces Round #525 (Div. 2) -C. Ehab and a 2-operation task","slug":"Codeforces-Round-525-Div-2-C-Ehab-and-a-2-operation-task","date":"2018-12-04T16:25:42.000Z","updated":"2018-12-04T16:27:00.136Z","comments":true,"path":"article/Codeforces-Round-525-Div-2-C-Ehab-and-a-2-operation-task.html","link":"","permalink":"https://anoyer.cn/article/Codeforces-Round-525-Div-2-C-Ehab-and-a-2-operation-task.html","excerpt":"","text":"博主链接题目链接**Note** In the first sample, the array is already increasing so we don&apos;t need any operations. In the second sample: In the first step: the array becomes [8,6,3]. In the second step: the array becomes [0,2,3]. 题意：给你一个n，然后n个数a[1~n],现在你可以对数组进行两种操作：对a[1~i]所有的数+x对a[1~i]所有的数对x取模要求你在n+1次操作内将数组a变成一个递增序列，并输出每次的操作（答案不唯一）题解：答案说了可以n+1次，那么就先对每个位置都进行一次操作1，让所有数在着n次1操作结束后对n取模值等于下表i，因为每次操作影响范围为1~i，所以可以选择倒着扫，保证处理过的数不会再变化。最后进行一次操作2，对1~n进行对n取模123456789101112131415161718192021222324#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=1e4+7;const int mod=1e9+7;int a[maxn];int main()&#123; int n; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++)&#123; cin&gt;&gt;a[i]; &#125; cout&lt;&lt;n+1&lt;&lt;endl; ll sum=0; int ans=0; for(int i=n;i&gt;=1;i--)&#123; ans=(i-(a[i]+sum)%(n+1)+n+1)%(n+1); printf(\"1 %d %d\\n\",i,ans); sum+=ans; &#125; printf(\"2 %d %d\\n\",n,n+1); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"https://anoyer.cn/tags/codeforces/"},{"name":"思维题","slug":"思维题","permalink":"https://anoyer.cn/tags/思维题/"}]},{"title":"Codeforces Round #525 (Div. 2)-B. Ehab and subtraction","slug":"Codeforces-Round-525-Div-2-B-Ehab-and-subtraction","date":"2018-12-04T16:22:50.000Z","updated":"2018-12-04T16:24:21.059Z","comments":true,"path":"article/Codeforces-Round-525-Div-2-B-Ehab-and-subtraction.html","link":"","permalink":"https://anoyer.cn/article/Codeforces-Round-525-Div-2-B-Ehab-and-subtraction.html","excerpt":"","text":"博主链接题目链接NoteIn the first sample:In the first step: the array is [1,2,3][1,2,3], so the minimum non-zero element is 1.In the second step: the array is [0,1,2][0,1,2], so the minimum non-zero element is 1.In the third step: the array is [0,0,1][0,0,1], so the minimum non-zero element is 1.In the fourth and fifth step: the array is [0,0,0][0,0,0], so we printed 0.In the second sample:In the first step: the array is [10,3,5,3][10,3,5,3], so the minimum non-zero element is 3.In the second step: the array is [7,0,2,0][7,0,2,0], so the minimum non-zero element is 2.题意：给你两个整数n,k,然后n个整数a[1~n]。然后进行k次操作，每次操作打印出最小非零元素，并把所有非零元素减去这个数；如果没有没有非零数了就打印零题解：先用sort对a排序，然后从最小位置开始消，同时定义一个变量sum，记录每一次操作前面减去数字的和，也就是当前位置需要减的数字。同时特判下当前位置数-sum==0，如果为真直接跳过看下一位，同时因为跳过了所以一定要k++;代码：1234567891011121314151617181920212223242526#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=1e5+7;const int mod=1e9+7;int a[maxn];int main()&#123; int n,k; scanf(\"%d%d\",&amp;n,&amp;k); for(int i=0;i&lt;n;i++)scanf(\"%d\",&amp;a[i]); sort(a,a+n); ll sum=0; for(int i=0;i&lt;k;i++)&#123; if(i&gt;=n)printf(\"0\\n\"); else&#123; if(a[i]-sum==0)&#123; k++; continue; &#125; printf(\"%d\\n\",a[i]-sum); sum=a[i]; &#125; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"https://anoyer.cn/tags/codeforces/"},{"name":"思维题","slug":"思维题","permalink":"https://anoyer.cn/tags/思维题/"}]},{"title":"Codeforces Round #525 (Div. 2) (2)-A. Ehab and another construction problem","slug":"Codeforces-Round-525-Div-2-2-A-Ehab-and-another-construction-problem","date":"2018-12-04T16:19:49.000Z","updated":"2018-12-04T16:24:30.298Z","comments":true,"path":"article/Codeforces-Round-525-Div-2-2-A-Ehab-and-another-construction-problem.html","link":"","permalink":"https://anoyer.cn/article/Codeforces-Round-525-Div-2-2-A-Ehab-and-another-construction-problem.html","excerpt":"","text":"博主链接题目链接题意：给你一个x,让你求出两个整数a,b，满足他给的那些条件题解：数据范围很小就100，直接O(n*n)暴力枚举就可以了代码：1234567891011121314151617181920#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=1e6+7;const int mod=1e9+7;int main()&#123; int x; scanf(\"%d\",&amp;x); for(int i=1;i&lt;=x;i++)&#123; for(int j=1;j&lt;=i;j++)&#123; if(i%j==0&amp;&amp;j*i&gt;x)&#123; printf(\"%d %d\\n\",i,j); return 0; &#125; &#125; &#125; printf(\"-1\\n\"); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"https://anoyer.cn/tags/codeforces/"},{"name":"暴力题","slug":"暴力题","permalink":"https://anoyer.cn/tags/暴力题/"}]},{"title":"HDU-2328-Corporate Identity(利用string函数)","slug":"HDU-2328-Corporate-Identity-利用string函数","date":"2018-12-04T13:27:43.000Z","updated":"2018-12-04T16:28:30.843Z","comments":true,"path":"article/HDU-2328-Corporate-Identity-利用string函数.html","link":"","permalink":"https://anoyer.cn/article/HDU-2328-Corporate-Identity-利用string函数.html","excerpt":"","text":"博主链接题目链接题意：给你n个字符串，问你这n个串的最长公共子串题解：题目和HDU-1238感觉差不多，暴力枚举任意一个字符串的所有子串，然后暴力匹配，这里用string解决的；代码：123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=4050;const int mod=1e9+7;string s[maxn];int main()&#123; int n; ios::sync_with_stdio(0); while((cin&gt;&gt;n)&amp;&amp;n!=0)&#123; for(int i=1;i&lt;=n;i++)&#123; cin&gt;&gt;s[i]; &#125; string t; int cot=0; int maxx=0; int len=s[1].size(); for(int i=0;i&lt;len;i++)&#123; for(int j=1;j&lt;=len-i;j++)&#123; //枚举子串长度 if(j&lt;maxx)continue; cot=0; for(int k=2;k&lt;=n;k++)&#123; if(s[k].find(s[1].substr(i,j))==string::npos)break; //string函数查找 else cot++; &#125; if(cot==n-1)&#123; //如果这个子串出现了n-1次，选取的那个串本身就有一次，则维护maxx if(maxx&lt;j)&#123; maxx=j; t=s[1].substr(i,j); &#125; else if(maxx==j)&#123; if(t&gt;s[1].substr(i,j))t=s[1].substr(i,j); &#125; &#125; &#125; &#125; if(maxx==0)cout&lt;&lt;\"IDENTITY LOST\"&lt;&lt;endl; else cout&lt;&lt;t&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"暴力题","slug":"暴力题","permalink":"https://anoyer.cn/tags/暴力题/"},{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"STL","slug":"STL","permalink":"https://anoyer.cn/tags/STL/"}]},{"title":"HDU-1238-Substrings(求公共子串)","slug":"HDU-1238-Substrings-求公共子串","date":"2018-12-04T13:26:00.000Z","updated":"2018-12-04T16:28:40.567Z","comments":true,"path":"article/HDU-1238-Substrings-求公共子串.html","link":"","permalink":"https://anoyer.cn/article/HDU-1238-Substrings-求公共子串.html","excerpt":"","text":"博主链接题目链接题意：找出所有字符串中共同拥有的一个子串，该子串（正、逆字符）是任何一个母串的子串，求该子串的最长长度。题解：利用string库里的find函数+STL中的reverse反转函数。先找出最短的母串，即该符合要求的子串肯定在这个母串中，即在从长到短，从最短母串中取子串，在子串正反去查看是否符合要求。代码：12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int mod = 1e9 + 7;typedef long long ll;string s[120];int main() &#123; int t; scanf(\"%d\", &amp;t); while ( t--) &#123; int n,sub; scanf(\"%d\", &amp;n); int len = 1000; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; s[i]; if (s[i].size() &lt; len)len = s[i].size(), sub = i; &#125; int maxn = 0; for (int i = s[sub].size(); i &gt; 0; i--) &#123; for (int j = 0; j &lt;= s[sub].size(); j++) &#123; string s1, s2; s1 = s[sub].substr(j, i); s2 = s1; reverse(s2.begin(), s2.end()); //反转 int k; for (k = 0; k &lt; n; k++) &#123; if (s[k].find(s1, 0) == -1 &amp;&amp; s[k].find(s2, 0) == -1)break; &#125; if (k == n &amp;&amp; maxn &lt; s1.size())maxn = s1.size(); &#125; &#125; printf(\"%d\\n\", maxn); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"暴力题","slug":"暴力题","permalink":"https://anoyer.cn/tags/暴力题/"},{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"STL","slug":"STL","permalink":"https://anoyer.cn/tags/STL/"}]},{"title":"HDU - 4847 - Wow! Such Doge!(暴力)","slug":"HDU-4847-Wow-Such-Doge-暴力","date":"2018-12-04T13:23:59.000Z","updated":"2018-12-04T16:24:52.150Z","comments":true,"path":"article/HDU-4847-Wow-Such-Doge-暴力.html","link":"","permalink":"https://anoyer.cn/article/HDU-4847-Wow-Such-Doge-暴力.html","excerpt":"","text":"博主链接题目链接题面太长了，就不上题目截图了QAQ题意：在给出的段落里面找出“doge”出现的次数，大小写都可以。（超级大水题，就考你输入恶心恶心人）题解：直接暴力求每一句话出现的doge次数（大小写不限），在一块就可以了输入格式处理—-把类似于“Wow! Such Dooooooooooooooge!!!“这种一行输入看出多个字符串输入，这里看成三个字符串，所以直接用%s存，存一个处理一个代码：1234567891011121314151617181920212223#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=1e6+21;const int mod=1e9+7;char s[maxn];int ans=0;int main()&#123; while(scanf(\"%s\",s)!=EOF)&#123; int len=strlen(s); if(len&lt;3)continue; for(int i=0;i&lt;len-3;i++)&#123; if((s[i]=='d'||s[i]=='D')&amp;&amp;(s[i+1]=='o'||s[i+1]=='O')&amp;&amp;(s[i+2]=='g'||s[i+2]=='G')&amp;&amp;(s[i+3]=='e'||s[i+3]=='E'))&#123; ans++; i+=3; &#125; &#125; &#125; printf(\"%d\\n\",ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"暴力题","slug":"暴力题","permalink":"https://anoyer.cn/tags/暴力题/"},{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"HDU - 4513 - 吉哥系列故事――完美队形II (马拉车加判断条件)","slug":"HDU-4513-吉哥系列故事――完美队形II-马拉车加判断条件","date":"2018-12-04T13:20:21.000Z","updated":"2018-12-04T13:23:38.606Z","comments":true,"path":"article/HDU-4513-吉哥系列故事――完美队形II-马拉车加判断条件.html","link":"","permalink":"https://anoyer.cn/article/HDU-4513-吉哥系列故事――完美队形II-马拉车加判断条件.html","excerpt":"","text":"博主链接题目链接题意：在一个长度为n的数组里面找回文串，要求回文串从中间向两边一次递减题解：在manacher过程中添加限制语句保证题目要求即可1234if(s_new[i+p[i]]!=-1111)&#123; //如果前面位置大于当前位置，则不符合跳出 if(s_new[i+p[i]]&lt;=s_new[i+p[i]-2])p[i]++; else break;&#125;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;stdio.h&gt;#include&lt;iostream&gt;#include&lt;string.h&gt;#include&lt;algorithm&gt;using namespace std;int s[100050];int s_new[100050*2];int p[100050*2];int Init(int len)&#123; s_new[0] = -111; s_new[1] = -1111; int j = 2; for (int i = 0; i &lt; len; i++)&#123; s_new[j++] = s[i]; s_new[j++] = -1111; &#125; s_new[j] = -11; //别忘了哦 return j; //返回s_new的长度&#125;int Manacher(int len)&#123; //取得新字符串长度并完成向s_new的转换 int maxLen = -1; //最长回文长度 int id; int mx = 0; for (int i = 1; i &lt; len; i++)&#123; if (i &lt; mx) p[i] = min(p[2 * id - i], mx - i); //需搞清楚上面那张图含义, mx和2*id-i的含义 else p[i] = 1; while (s_new[i - p[i]] == s_new[i + p[i]]) //不需边界判断，因为左有'$',右有'\\0' &#123; if(s_new[i+p[i]]!=-1111)&#123; //如果前面位置大于当前位置，则不符合跳出 if(s_new[i+p[i]]&lt;=s_new[i+p[i]-2])p[i]++; else break; &#125; p[i]++; &#125; //我们每走一步i，都要和mx比较，我们希望mx尽可能的远，这样才能更有机会执行if (i &lt; mx)这句代码，从而提高效率 if (mx &lt; i + p[i]) &#123; id = i; mx = i + p[i]; &#125; maxLen = max(maxLen, p[i] - 1); &#125; return maxLen;&#125;int main()&#123; int t; scanf(\"%d\",&amp;t); while (t--)&#123; int n; scanf(\"%d\",&amp;n); for(int i=0;i&lt;n;i++)scanf(\"%d\",&amp;s[i]); int len=Init(n); printf(\"%d\\n\", Manacher(len)); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"Manacher","slug":"Manacher","permalink":"https://anoyer.cn/tags/Manacher/"}]},{"title":"HDU - 4763 -Theme Section(迭代求公共前后缀跑KMP)","slug":"HDU-4763-Theme-Section-迭代求公共前后缀跑KMP","date":"2018-12-04T13:17:14.000Z","updated":"2018-12-04T13:33:06.147Z","comments":true,"path":"article/HDU-4763-Theme-Section-迭代求公共前后缀跑KMP.html","link":"","permalink":"https://anoyer.cn/article/HDU-4763-Theme-Section-迭代求公共前后缀跑KMP.html","excerpt":"","text":"博主链接题目链接题意：给一个字符串，求出字符串的最大的相同前缀后缀，并且满足前缀后缀在字符串中间出现了。题解：可以先对字符串跑KMP求一下Next数组，由next数组定义可以知道，里面存的是当前字符最长前缀和后缀，所以我们只需要从最后一个字符出发，递归寻找每个长度为的Next值的前缀后缀，对于长度为len的前缀，只需要用该前缀起和字符串的除了前缀和后缀的部分匹配就可以了，如果匹配成功，就看是否需要更新答案。代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=1e6+21;const int mod=1e9+7;char s[maxn];int nex[maxn];int len;void GetNex()&#123; int j=-1; for(int i=0;s[i];i++)&#123; while(s[i]!=s[j+1]&amp;&amp;j!=-1)j=nex[j]; if(s[i]==s[j+1]&amp;&amp;i!=0)j++; nex[i]=j; &#125;&#125;bool kmp(int l)&#123; int j=-1; for(int i=l;i&lt;len-l;i++)&#123; while(j!=-1&amp;&amp;s[j+1]!=s[i])j=nex[j]; if(s[i]==s[j+1])j++; if(j+1==l)return true; &#125; return false;&#125;int main()&#123; int t; scanf(\"%d\",&amp;t); while(t--)&#123; scanf(\"%s\",s); len=strlen(s); if(len&lt;3)&#123; puts(\"0\"); continue; &#125; GetNex(); int ans=nex[len-1]; int mx=0; while(ans!=-1)&#123; if(kmp(ans+1))&#123; mx=max(mx,ans+1); //查找中间是否有这个串 &#125; ans=nex[ans]; &#125; printf(\"%d\\n\",mx); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"HDU - 3613 - Best Reward（马拉车加暴力）","slug":"HDU-3613-Best-Reward（马拉车加暴力）","date":"2018-12-04T13:14:11.000Z","updated":"2018-12-04T16:25:04.348Z","comments":true,"path":"article/HDU-3613-Best-Reward（马拉车加暴力）.html","link":"","permalink":"https://anoyer.cn/article/HDU-3613-Best-Reward（马拉车加暴力）.html","excerpt":"","text":"博主链接题目链接题意：字母表的26个字母都有一个价值，给你一个字符串，将该字符串切成两份，对于每一份，如果是回文串，就获得该子串的字母价值之和，否则该子串的价值为0。求出将字符串切成两份后能够获得的最大价值。题解：先用Manacher算法求出以每个字母为中心的回文串的长度，并计算该字符串的前缀价值和。然后枚举切割点，得到两份子串。这样就可以知道每个子串的中心点，然后检查以该子串的中心点作为中心点的回文串的长度，如果长度等于该子串的长度，那么就加上该子串的价值。然后和最优价值比较就行了。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define met(a) memset(a,0,sizeof(a));using namespace std;typedef long long ll;const int maxn = 500050;char s[maxn];char s_new[maxn * 2];int p[maxn * 2];int sum[maxn];int Init()&#123; int len = strlen(s); s_new[0] = '$'; s_new[1] = '#'; int j = 2; for (int i = 0; i &lt; len; i++)&#123; s_new[j++] = s[i]; s_new[j++] = '#'; &#125; s_new[j] = '\\0'; //printf(\"%s\\n\",s_new); return j; //返回s_new的长度 &#125;void Manacher()&#123; int len = Init(); //取得新字符串长度并完成向s_new的转换 //int maxLen = -1; //最长回文长度 int id; int mx = 0; for (int i = 1; i &lt; len; i++)&#123; if (i &lt; mx) p[i] = min(p[2 * id - i], mx - i); //需搞清楚上面那张图含义, mx和2*id-i的含义 else p[i] = 1; while (s_new[i - p[i]] == s_new[i + p[i]]) //不需边界判断，因为左有'$',右有'\\0' p[i]++; //我们每走一步i，都要和mx比较，我们希望mx尽可能的远，这样才能更有机会执行if (i &lt; mx)这句代码，从而提高效率 if (mx &lt; i + p[i]) &#123; id = i; mx = i + p[i]; &#125; //maxLen = max(maxLen, p[i] - 1); // printf(\"%d %d %d\\n\",mx,id,maxLen); &#125; /*for(int i=1;i&lt;=len;i++)printf(\"%d \",p[i]); printf(\"\\n\");*/ return ;&#125;int v[30];int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; memset(p, 0, sizeof(p)); for (int i = 0; i &lt; 26; i++)scanf(\"%d\", &amp;v[i]); scanf(\"%s\", s); sum[0] = v[s[0] - 'a']; for (int i = 1; s[i]; i++)&#123; sum[i] = sum[i - 1] + v[s[i] - 'a']; &#125; Manacher(); int Mx = 0; int len = strlen(s); for (int i = 0; i &lt; len - 1; i++)&#123; int tmp = 0; int num = p[i + 2] - 1; if (num == i + 1)tmp += sum[i]; num = p[i + len + 2] - 1; if (num == len - i - 1)tmp += sum[len - 1] - sum[i]; if (tmp&gt;Mx)Mx = tmp; &#125; printf(\"%d\\n\", Mx); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"暴力题","slug":"暴力题","permalink":"https://anoyer.cn/tags/暴力题/"},{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"Manacher","slug":"Manacher","permalink":"https://anoyer.cn/tags/Manacher/"}]},{"title":"HDU - 3294 - Girls research(裸马拉车)","slug":"HDU-3294-Girls-research-裸马拉车","date":"2018-12-03T14:13:55.000Z","updated":"2018-12-03T14:15:40.658Z","comments":true,"path":"article/HDU-3294-Girls-research-裸马拉车.html","link":"","permalink":"https://anoyer.cn/article/HDU-3294-Girls-research-裸马拉车.html","excerpt":"","text":"博主CSDN题目链接题意：通过第一个字符与a的关系翻译字符串，输出最长回文串和首尾下标，不存在则输出No solution!题解：用manachar求出最长回文串中心和半径，因为变换后的串各字符下标改变了，所以输出原首尾下标要公式倒推输出字符时要跳过插入的符号。如果你没有马拉车板子，或者说你不会马拉车，请见Manacher最长回文串算法代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#define met(a) memset(a,0,sizeof(a));using namespace std;typedef long long ll;const int maxn = 200050;char s[maxn];char s_new[maxn * 2];int p[maxn * 2];int iid = 0;int Init()&#123; int len = strlen(s); s_new[0] = '$'; s_new[1] = '#'; int j = 2; for (int i = 0; i &lt; len; i++)&#123; s_new[j++] = s[i]; s_new[j++] = '#'; &#125; s_new[j] = '\\0'; //printf(\"%s\\n\",s_new); return j; //返回s_new的长度 &#125;int Manacher()&#123; int len = Init(); //取得新字符串长度并完成向s_new的转换 int maxLen = -1; //最长回文长度 int id; int mx = 0; for (int i = 1; i &lt; len; i++)&#123; if (i &lt; mx) p[i] = min(p[2 * id - i], mx - i); //需搞清楚上面那张图含义, mx和2*id-i的含义 else p[i] = 1; while (s_new[i - p[i]] == s_new[i + p[i]]) //不需边界判断，因为左有'$',右有'\\0' p[i]++; //我们每走一步i，都要和mx比较，我们希望mx尽可能的远，这样才能更有机会执行if (i &lt; mx)这句代码，从而提高效率 if (mx &lt; i + p[i]) &#123; id = i; mx = i + p[i]; &#125; if (p[i] - 1&gt;maxLen)&#123; maxLen = p[i] - 1; iid = i; &#125; // printf(\"%d %d %d\\n\",mx,id,maxLen); &#125; /*for(int i=1;i&lt;=len;i++)printf(\"%d \",p[i]); printf(\"\\n\");*/ return maxLen;&#125;int main()&#123; char ch ; while (scanf(\"%c%s\",&amp;ch,s)!=EOF)&#123; getchar(); //memset(p, 0, sizeof(p)); int k = ch - 'a'; for (int i = 0; s[i]; i++)&#123; s[i] -= k; if (s[i] &lt; 'a')s[i] += 'z' - 'a' + 1; &#125; int mx = Manacher(); if (mx == 1)printf(\"No solution!\\n\"); else&#123; printf(\"%d %d\\n\", (iid - mx + 1)/2-1 , (iid + mx - 1)/2-1 ); for (int i = (iid - mx + 1)/2-1; i &lt;= (iid + mx - 1)/2-1; i++)printf(\"%c\", s[i]); puts(\"\"); &#125; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"Manacher","slug":"Manacher","permalink":"https://anoyer.cn/tags/Manacher/"}]},{"title":"HDU - 3068 - 最长回文(裸马拉车)","slug":"HDU-3068-最长回文-裸马拉车","date":"2018-12-03T14:08:07.000Z","updated":"2018-12-03T14:12:48.440Z","comments":true,"path":"article/HDU-3068-最长回文-裸马拉车.html","link":"","permalink":"https://anoyer.cn/article/HDU-3068-最长回文-裸马拉车.html","excerpt":"","text":"博主CSDN题目链接题意：给出一个只由小写英文字符a,b,c…y,z组成的字符串S,求S中最长回文串的长度.回文就是正反读都是一样的字符串,如aba, abba等题解：裸的马拉车（Manacher）算法，直接上板子就够了。如果你没有马拉车板子，或者说你不会马拉车，请见Manacher最长回文串算法代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#define met(a) memset(a,0,sizeof(a));using namespace std;typedef long long ll;const int maxn = 110050;char s[maxn];char s_new[maxn * 2];int p[maxn * 2];int Init()&#123; int len = strlen(s); s_new[0] = '$'; s_new[1] = '#'; int j = 2; for (int i = 0; i &lt; len; i++)&#123; s_new[j++] = s[i]; s_new[j++] = '#'; &#125; s_new[j] = '\\0'; //printf(\"%s\\n\",s_new); return j; //返回s_new的长度 &#125;int Manacher()&#123; int len = Init(); //取得新字符串长度并完成向s_new的转换 int maxLen = -1; //最长回文长度 int id; int mx = 0; for (int i = 1; i &lt; len; i++)&#123; if (i &lt; mx) p[i] = min(p[2 * id - i], mx - i); //需搞清楚上面那张图含义, mx和2*id-i的含义 else p[i] = 1; while (s_new[i - p[i]] == s_new[i + p[i]]) //不需边界判断，因为左有'$',右有'\\0' p[i]++; //我们每走一步i，都要和mx比较，我们希望mx尽可能的远，这样才能更有机会执行if (i &lt; mx)这句代码，从而提高效率 if (mx &lt; i + p[i]) &#123; id = i; mx = i + p[i]; &#125; maxLen = max(maxLen, p[i] - 1); // printf(\"%d %d %d\\n\",mx,id,maxLen); &#125; /*for(int i=1;i&lt;=len;i++)printf(\"%d \",p[i]); printf(\"\\n\");*/ return maxLen;&#125;int main()&#123; while (scanf(\"%s\", s)!=EOF)&#123; getchar(); getchar(); memset(p, 0, sizeof(p)); if (s[0] == 'E'&amp;&amp;s[1] == 'N'&amp;&amp;s[2] == 'D')break; printf(\"%d\\n\",Manacher()); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"Manacher","slug":"Manacher","permalink":"https://anoyer.cn/tags/Manacher/"}]},{"title":"HDU - 2609 - How many （最小表示法+set除重）","slug":"HDU-2609-How-many-（最小表示法-set除重）","date":"2018-12-03T14:02:12.000Z","updated":"2018-12-03T14:07:45.523Z","comments":true,"path":"article/HDU-2609-How-many-（最小表示法-set除重）.html","link":"","permalink":"https://anoyer.cn/article/HDU-2609-How-many-（最小表示法-set除重）.html","excerpt":"","text":"博主CSDN题目链接题意：有n个环形字符串，一个环形字符串移动会形成不能的字符串，我们把它们看作同一串字符串，求有多少个不同的字符串题解：用最小表示法把每个串的最小字典序找出来, ==(如果两个循环串相等则他们的最小字典序也一定相等)==,set带有除重功能，因为set具有除重功能所以用set来存每个串求出的最小字典序代码：12345678910111213141516171819202122232425262728293031323334353637#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=1e4+20;const int mod=1e9+7;string s;int len;int GetMin()&#123; int i=0,j=1,k=0; while(i&lt;len&amp;&amp;j&lt;len&amp;&amp;k&lt;len)&#123; int t=s[(i+k)%len]-s[(j+k)%len]; if(t==0)k++; else&#123; if(t&gt;0)i=i+k+1; else j=j+k+1; if(i==j)j++; k=0; &#125; &#125; return min(i,j);&#125;int main()&#123; int n; while(scanf(\"%d\",&amp;n)!=EOF)&#123; set&lt;string&gt;sub; for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;s; len=s.size(); s+=s; int l=GetMin(); sub.insert(s.substr(l,len)); &#125; printf(\"%d\\n\",sub.size()); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"最大最小表示法","slug":"最大最小表示法","permalink":"https://anoyer.cn/tags/最大最小表示法/"}]},{"title":"HDU - 2087-减花布条(裸KMP模板)","slug":"HDU-2087-减花布条-裸KMP模板","date":"2018-12-03T13:59:03.000Z","updated":"2018-12-04T13:32:41.537Z","comments":true,"path":"article/HDU-2087-减花布条-裸KMP模板.html","link":"","permalink":"https://anoyer.cn/article/HDU-2087-减花布条-裸KMP模板.html","excerpt":"","text":"博主CSDN题目链接题意：中文题面，题意也说得非常清楚了，给一个文本串，求文本串中有多少个不重复的模式串题解：kmp标准做法，甚至基本没有变动。 判断的时候，每当完整的匹配一次之后令j=0，ans++，即模式串的下标从0开始，匹配数量加1代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;cstdlib&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;map&gt;#include&lt;set&gt;#include&lt;vector&gt;using namespace std;const int maxn=1000030;int next1[10030];char s[maxn];char p[10030];int cnt=0;void prefix_next()&#123; next1[0]=0; next1[1]=0; int j; for(int i=1;p[i]!='\\0';i++)&#123; j = next1[i]; while(j &amp;&amp; p[j] != p[i]) j = next1[j]; next1[i+1] = p[j] == p[i] ? j + 1: 0; &#125; return;&#125;void kmp()&#123; int j=0,m=strlen(p),n=strlen(s); for(int i=0;s[i]!='\\0';i++)&#123; while(j &amp;&amp; p[j] != s[i]) j = next1[j]; if(p[j] == s[i]) j ++; if(j == m) &#123; cnt++; if(i+m&lt;n) j=0; else return; &#125; &#125; return;&#125;int main()&#123;/* #ifdef LOCAL freopen(\"C:/Users/Administrator/Desktop/input.txt\",\"r\",stdin); #endif*/ while(~scanf(\"%s\",s),strcmp(s,\"#\"))&#123; cnt=0; cin&gt;&gt;p; prefix_next(); kmp(); cout&lt;&lt;cnt&lt;&lt;endl; &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"HDU-1711-Number Sequence(数组跑KMP)","slug":"HDU-1711-Number-Sequence-数组跑KMP","date":"2018-12-03T13:55:24.000Z","updated":"2018-12-04T13:33:21.565Z","comments":true,"path":"article/HDU-1711-Number-Sequence-数组跑KMP.html","link":"","permalink":"https://anoyer.cn/article/HDU-1711-Number-Sequence-数组跑KMP.html","excerpt":"","text":"博主CSDN题目链接题意：给你两个数组的所有元素，让你对它们进行匹配，当位置为多少时候它们能完全匹配。题解：直接跑KMP就可以了，唯一注意的…..emmm….应该不用注意吧，也就原先是字符串，现在把字符串换成数组超级大水题代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt; using namespace std;int s[1000100],t[11000];int nex[1000100];//nex数组大小和短串一致int ans,n,m;inline void get_nex()&#123; int j=-1;//影响next[0] for (int i=0;i&lt;m;i++)&#123; while(t[i]!=t[j+1] &amp;&amp; j!=-1) j=nex[j]; if (t[i]==t[j+1] &amp;&amp; i!=0) j++; nex[i]=j; &#125;&#125;inline void kmp()&#123; int j=-1; for (int i=0;i&lt;n;i++)&#123; while(s[i]!=t[j+1] &amp;&amp; j!=-1) j=nex[j]; if (s[i]==t[j+1]) j++; if (j==m-1)&#123; ans++; printf(\"%d\\n\",i-j+1); break; &#125; &#125;&#125;int main()&#123; int tt; scanf(\"%d\",&amp;tt); while(tt--)&#123; ans=0; scanf(\"%d%d\",&amp;n,&amp;m); for(int i=0;i&lt;n;i++)scanf(\"%d\",&amp;s[i]); for(int i=0;i&lt;m;i++)scanf(\"%d\",&amp;t[i]); get_nex(); kmp(); if(ans==0)printf(\"-1\\n\"); &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"HDU-1841-Find the Shortest Common Superstring（kmp）","slug":"HDU-1841-Find-the-Shortest-Common-Superstring（kmp）","date":"2018-12-03T13:52:21.000Z","updated":"2018-12-04T13:33:36.357Z","comments":true,"path":"article/HDU-1841-Find-the-Shortest-Common-Superstring（kmp）.html","link":"","permalink":"https://anoyer.cn/article/HDU-1841-Find-the-Shortest-Common-Superstring（kmp）.html","excerpt":"","text":"博主CSDN题目链接题意：给出两个串，用这两个串组成一个新串，使新串包含这两个串，问这个新串的长度最小是多少；题解：显然，对于两个串A，B；A如果是B的子串或者B如果是A的子串的话，直接输出那个母串的长度即可，如果没有这种关系，那么看一个串的后缀是否是另一个串的前缀，如果某个串的后缀与另一个串的前缀的公共部分最长，则答案=A.length+B.length-公共长度，所以可以直接用kmp去做。(kmp匹配最后j值为模式串前缀和主串后缀最长公共长度)代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;cstring&gt; using namespace std; const int N = 1000100;char a[3][2*N];int fail[2*N];inline int max(int a, int b)&#123; return (a &gt; b) ? a : b;&#125;int kmp(int &amp;i, int &amp;j, char* str, char* pat)&#123; int k; memset(fail, -1, sizeof(fail)); for (i = 1; pat[i]; ++i)&#123; for (k = fail[i - 1]; k &gt;= 0 &amp;&amp; pat[i] != pat[k + 1]; k = fail[k]); if (pat[k + 1] == pat[i])&#123; fail[i] = k + 1; &#125; &#125; i = j = 0; while (str[i] &amp;&amp; pat[j])&#123; if (pat[j] == str[i])&#123; i++; j++; &#125; else if (j == 0)&#123; i++; &#125; else&#123; j = fail[j - 1] + 1; &#125; &#125; //printf(\"%d %d\\n\",i,j); if (pat[j])&#123; return -1; &#125; else&#123; return i - j; &#125;&#125;int main(int argc, const char * argv[])&#123; int T; scanf(\"%d\", &amp;T); while (T--)&#123; int i, j, l1 = 0, l2 = 0; cin &gt;&gt; a[0] &gt;&gt; a[1]; int len1 = (int)strlen(a[0]), len2 = (int)strlen(a[1]), val; val = kmp(i, j, a[1], a[0]); if (val != -1)&#123; l1 = len1; &#125; else&#123; if (i == len2 &amp;&amp; j - 1 &gt;= 0 &amp;&amp; a[1][len2 - 1] == a[0][j - 1])&#123; l1 = j; &#125; &#125; val = kmp(i, j, a[0], a[1]); if (val != -1)&#123; l2 = len2; &#125; else&#123; if (i == len1 &amp;&amp; j - 1 &gt;= 0 &amp;&amp; a[0][len1 - 1] == a[1][j - 1])&#123; l2 = j; &#125; &#125; printf(\"%d\\n\", len1 + len2 - max(l1, l2)); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"Python入门教程","slug":"Python入门教程","date":"2018-12-02T14:40:55.000Z","updated":"2019-01-18T09:50:54.910Z","comments":true,"path":"article/Python入门教程.html","link":"","permalink":"https://anoyer.cn/article/Python入门教程.html","excerpt":"","text":"基本语法1.注释———# 标注文本2.数字整数，不区分long和int进制0xa (16进制的10),0o10（8进制的10）,0b10（2进制的10）bool，2个值True，False浮点数1.2，3.1415.-0.12，1.46e9等价于1.46*10^9复数，1+2j3.字符串使用‘ “单双引号引用字符的序列‘ ’ ‘ ” “ ” 单双三引号，可以跨行，可以在其中自由的使用单双引号1234567print(''' welcome 'to' python''') #输出 welcome 'to' pythonprint(''' welcome 'to' 1\\ #输出 welcome 'to' 2\\ # 1233\\ # 'python''python' ''')在字符串前面加上r或者R前缀，表示该字符串不做特殊处理(比如字符串中含有\\)python为强类型语言，所以不允许’a‘+1字符串可以直接连接1print('abc'+'efg') #打印出abcefg4.转义序列\\\\ \\t \\r \\n \\‘ \\“前缀r,把里面的所有的字符当普通字符对待5.缩进未使用C等语言的花括号，而是采用缩进的方式表示层次关系约定使用4个空格缩进6.续行在行尾使用 \\如果使用各种括号，认为括号内的是一个整体，内部跨行不用 \\7.标识符一个名字，用来指代一个值只能字母，下划线和数字只能以字母或下划线开头不能是python的关键字，例如def，class就不能作为标识符python是大小写敏感的约定：不允许使用中文不允许使用歧义单词，例如class_在python中不要随便使用下划线开头的标识符8.常量一旦赋值就不能改变值的标识符python中无法定义常量9.字面常量一个单独的量，例如12，“abc”,’2341356514.03e-9’10.变量赋值后，可以改变值的标识符运算符Operator1.算数运算符+ - * / % ****表示次方12print(2**3) #输出 8print(4**0.5) #输出 2.0自然除/结果是浮点数，整除//。注：2.x中对于整数都是/和//都是整除2.位运算符&amp; | ~ ^ &lt;&lt; &gt;&gt;&amp; 按位与| 按位或~ 按反码补码取反（反出来会比真实相反数小一）原码5=&gt; 0b101, 1=&gt;0b1 ,-1=&gt; -0b1, bin(-1) #可以获取数字原码1bin(-1) #获得-0b1;反码正数将原码按位取反；负数符号位不变其余按位取反补码正数的补码是其本身；负数符合位不变其余按位取反后-1^ 按位异或&lt;&lt; 向左的位移1print(1&lt;&lt;2) #输出4>&gt; 向右的位移1print(4&gt;&gt;1) #输出 2常用方式：乘除2的倍数，32//4相当于32&gt;&gt;212,0xc,0o14,0b1100~12等于-133.比较运算符== != &gt; &lt; &gt;= &lt;=返回一个bool值1&lt;’1’ 1==’1’4.逻辑运算符与或非 and or not短路运算符and 如果第一个表达式位False，后面的就没有必要计算了，这个逻辑表达式一定Falseor 如果第一个表达式True，后面没有必要计算了，这个逻辑表达式一定是True5.赋值运算符a=min(3,5)+= -= == /= %=x=y=z=106.成员运算符in ,not in7.身份运算符is,not is8.运算优先级（由高到底）算数运算符 &gt; 位运算符 &gt; 身份运算符 &gt; 成员运算符 &gt; 逻辑运算符表达式 Expression1.由数字，符号，括号，变量等的组合算数表达式逻辑表达式赋值表达式Python，赋值及定义，如果一个变量了已经定义，赋值相当于重新定义程序控制顺序按照先后顺序一条一条执行例如，先洗手，再吃饭，再洗碗分支根据不同的情况判断，条件满足执行某条件下的语句例如，先洗手，如果饭没做好，玩游戏，如果饭做好了，就吃饭，如果饭都没做，叫外卖循环条件满足就反复执行，不满足就不执行或者不再执行例如：先洗手，看饭好了没有，没有好，一会来看一次是否好了，一会儿来看一次，直到饭好了，才可以吃饭。这里循环的条件就是饭好了没，饭没好，就循环的来看饭好了没有。单分支结构1.if语句​ if 表达式：代码块(必须由4个空格，不允许使用缩进) ​ 表达式必须是一个bool类型，这个地方有一个隐式转换bool(表达式)12if 1&lt;2: print('1 less than 2')2.代码块类似于if语句的冒号后面的就是一个代码块if, for , def ,class 等真值表 bool(表达式)对应的隐式转换对象/常量值“”假“string”真0假&gt;=1真&lt;=-1真()空原组假[]空列表假{}空字典假None假多分支结构if…elif…else语句123456789if 表达式1: 代码块1elif 表达式2: 代码块2elif 表达式3: 代码块3……else: 代码块1234567891011 a=4 if a&lt;1: print('S') elif a&lt;3: print('AS') elif a&lt;4: print('B') else: print('sss')#输出：sss2.分支嵌套举例1234567891011score=80if score&lt;0: print(\"wrong\")else: if score==0: print('egg') elif score&lt;=100: print('right') else: print('too big')#输出：right循环——while语句语句123while 表达式: 代码块#当条件满足表达式为true，进入循环题，执行代码块举例123456789101112131415flag=10while flag: print(flag) flag-=1#输出：10987654321循环——for语句*语法123for element in iteratable: block#当可迭代对象中有对象可以迭代，进入循环体，执行代码块range函数举例：打印1~1012345678910111213for i in range(10): //从0开始迭代到9，每次i++; print(i+1)#输出:1234567891012345678#打印0~9的偶数for i in range(2,10,2): //从2开始迭代到9，每次i+=2; print(i)#输出：2468循环continue语句中断当前循环的当次执行，继续下一次循环举例：计算10以内的偶数（for循环）12345678910for i in range(10): if i%2: continue print(i)#输出02468循环break语句终止当前循环举例：计算1000以内的被7整除的前20个数（for循环）123456789101112131415161718192021222324252627count=0;for i in range(0,1000,7): print(i) count+=1 if(count&gt;=20): break#输出：0714212835424956637077849198105112119126133循环else子句语法12345678while condition: blockelse: blockfor element in iteratable: blockelse: block如果循环正常的执行结束，就执行else子句；如果使用break终止，else子句不会执行Python输入输出1.输入input()1234567num=intput('请输入一个数') #输入一个数回车结束print(num) #输入1234 输出1234#在有的版本python中存在一下问题num=input() #输入的是一个字符串print num #如果输入1234 打印的是一个字符串’1234‘num=int(input()) #输入的是一个整数print num #打印这个整数print1234print a #打印变量aprint(a) #打印aprint(a,b) #打印(a,b)print a,b #打印a,b未完待续","categories":[{"name":"Pyhton","slug":"Pyhton","permalink":"https://anoyer.cn/categories/Pyhton/"}],"tags":[{"name":"Python入门","slug":"Python入门","permalink":"https://anoyer.cn/tags/Python入门/"}]},{"title":"Material Plus主题安装和使用文档","slug":"Material-Plus主题安装和使用文档","date":"2018-12-02T07:56:14.000Z","updated":"2018-12-05T05:37:11.935Z","comments":true,"path":"article/Material-Plus主题安装和使用文档.html","link":"","permalink":"https://anoyer.cn/article/Material-Plus主题安装和使用文档.html","excerpt":"这是一篇加密文档，请输入密码去阅读。","text":"这是一篇加密文档，请输入密码去阅读。 Incorrect Password! No content to display! ","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://anoyer.cn/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://anoyer.cn/tags/Hexo/"},{"name":"Material Plus","slug":"Material-Plus","permalink":"https://anoyer.cn/tags/Material-Plus/"}]},{"title":"记一次Hexo博客更新","slug":"记一次Hexo博客更新","date":"2018-12-02T07:22:22.000Z","updated":"2019-01-18T09:51:59.667Z","comments":true,"path":"article/记一次Hexo博客更新.html","link":"","permalink":"https://anoyer.cn/article/记一次Hexo博客更新.html","excerpt":"","text":"这次更新成功将博客从Next主题换到了Material Plus…….前言：先上一个更新前及更新后预览图对比更新前：更新后：是不是灰常好看捏^_^开工：第一步：删库备份首先，把E盘Blog仓库复制一份到D盘（方便以后两主题来回切换），然后删库你没听错，直接把E盘Blog删了，然后init一个新Blog仓库。第二步：下载主题及覆盖下载主题后把Blog里的themes和source，scaffolds覆盖了第三步：进行主题配置：因为版权问题，详细步骤请看—Material Plus主题安装和使用文档（还是别看了，加密的，哈哈哈）完工：本蒟蒻不懂前端，以上代码大部分都是去 Inspect Element 然后复制粘贴再改一下的成果。。。还请各位大佬指正！好了，本文结束，下篇文章再见~ ✿✿ヽ(°▽°)ノ✿","categories":[{"name":"闲记","slug":"闲记","permalink":"https://anoyer.cn/categories/闲记/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://anoyer.cn/tags/Hexo/"}]},{"title":"POJ-3261-Milk Patterns(后缀数组)","slug":"POJ-3261-Milk-Patterns-后缀数组","date":"2018-11-30T00:35:06.000Z","updated":"2018-12-02T06:44:56.724Z","comments":true,"path":"article/POJ-3261-Milk-Patterns-后缀数组.html","link":"","permalink":"https://anoyer.cn/article/POJ-3261-Milk-Patterns-后缀数组.html","excerpt":"","text":"博主CSDN题目链接题意：给定一个字符串S，求至少出现k次的最长重复子串，这k个子串可以重叠。题解：后缀数组。先二分答案，然后将后缀分成若干组。这里要判断的是有没有一个组的后缀个数不小于k。如果有，那么存在k个相同的子串满足条件，否则不存在。。代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394 /* 题意：找出出现k次的可重叠的最长子串的长度 这都是套路题了，二分长度L,按照height值分组，在同一组内的组数如果大于K,则成立。 */#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include&lt;iostream&gt;using namespace std;const int MAXN = 100005;char ch[MAXN], All[MAXN];int SA[MAXN], rank[MAXN], Height[MAXN], tax[MAXN], tp[MAXN], a[MAXN], n, m;char str[MAXN];int k,cnt;//rank[i] 第i个后缀的排名; SA[i] 排名为i的后缀位置; Height[i] 排名为i的后缀与排名为(i-1)的后缀的LCP//tax[i] 计数排序辅助数组; tp[i] rank的辅助数组(计数排序中的第二关键字),与SA意义一样。//a为原串void RSort() &#123; //rank第一关键字,tp第二关键字。 for (int i = 0; i &lt;= m; i ++) tax[i] = 0; for (int i = 1; i &lt;= n; i ++) tax[rank[tp[i]]] ++; for (int i = 1; i &lt;= m; i ++) tax[i] += tax[i-1]; for (int i = n; i &gt;= 1; i --) SA[tax[rank[tp[i]]] --] = tp[i]; //确保满足第一关键字的同时，再满足第二关键字的要求&#125; //计数排序,把新的二元组排序。int cmp(int *f, int x, int y, int w) &#123; return f[x] == f[y] &amp;&amp; f[x + w] == f[y + w]; &#125;//通过二元组两个下标的比较，确定两个子串是否相同void Suffix() &#123; //SA for (int i = 1; i &lt;= n; i ++) rank[i] = a[i], tp[i] = i; m = 127 ,RSort(); //一开始是以单个字符为单位，所以(m = 127) for (int w = 1, p = 1, i; p &lt; n; w += w, m = p) &#123; //把子串长度翻倍,更新rank //w 当前一个子串的长度; m 当前离散后的排名种类数 //当前的tp(第二关键字)可直接由上一次的SA的得到 for (p = 0, i = n - w + 1; i &lt;= n; i ++) tp[++ p] = i; //长度越界,第二关键字为0 for (i = 1; i &lt;= n; i ++) if (SA[i] &gt; w) tp[++ p] = SA[i] - w; //更新SA值,并用tp暂时存下上一轮的rank(用于cmp比较) RSort(), swap(rank, tp), rank[SA[1]] = p = 1; //用已经完成的SA来更新与它互逆的rank,并离散rank for (i = 2; i &lt;= n; i ++) rank[SA[i]] = cmp(tp, SA[i], SA[i - 1], w) ? p : ++ p; &#125; //离散：把相等的字符串的rank设为相同。 //LCP int j, k = 0; for(int i = 1; i &lt;= n; Height[rank[i ++]] = k) for( k = k ? k - 1 : k, j = SA[rank[i] - 1]; a[i + k] == a[j + k]; ++ k); //这个知道原理后就比较好理解程序&#125;bool check(int mid)&#123; cnt=1; for(int i=1;i&lt;=n;i++)&#123; if(Height[i]&lt;mid)cnt=1; else cnt++; if(cnt&gt;=k)return 1; &#125; return 0;&#125;void Init() &#123; for (int i=1; i &lt;=n; i ++) scanf(\"%d\",&amp;a[i]);&#125;int main() &#123; #ifdef LOCAL freopen(\"C:/Users/Administrator/Desktop/input.txt\", \"r\", stdin); #endif scanf(\"%d%d\",&amp;n,&amp;k); Init(); Suffix(); //for(int i=1;i&lt;=n;i++)cout&lt;&lt;SA[i]&lt;&lt;endl; for(int i=1;i&lt;=n;i++)cout&lt;&lt;Height[i]&lt;&lt;\" \"; cout&lt;&lt;endl; int res=0; int l=1,r=n; while(l&lt;=r)&#123; int mid=(l+r)&gt;&gt;1; if(check(mid))&#123; l=mid+1; res=max(res,mid); &#125; else r=mid-1; &#125; printf(\"%d\\n\",res);&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"POJ","slug":"POJ","permalink":"https://anoyer.cn/tags/POJ/"},{"name":"后缀数组","slug":"后缀数组","permalink":"https://anoyer.cn/tags/后缀数组/"}]},{"title":"HDU-4333-Revolving Digits(扩展KMP)","slug":"HDU-4333-Revolving-Digits-扩展KMP","date":"2018-11-30T00:34:52.000Z","updated":"2018-12-02T06:43:56.266Z","comments":true,"path":"article/HDU-4333-Revolving-Digits-扩展KMP.html","link":"","permalink":"https://anoyer.cn/article/HDU-4333-Revolving-Digits-扩展KMP.html","excerpt":"","text":"CSDN题目链接题意：给你一个字符串，你可以将该字符串的任意长度后缀截取下来然后接到最前面，让你统计所有新串中有多少种字典序小于、等于、大于原串。题解：首先我们将原串扩展成两倍，算一遍扩展KMP（自匹配），时间复杂度O(n)。这样一来，我们就得到了eKMP[i]，eKMP[i]代表s[i…len-1]与s的最长公共子串。为了避免重复子串重复计数，我们先求出s的最小循环节：然后我们只需统计最小循环节以内的字符就可。当eKMP[i]&gt;=len时，显然是原串，E++;否则我们只需比较一位就可判断大小，即：比较s[i+eKMP[i]]和s[eKMP[i]]的大小。为什么只需比较一位?因为s[0…eKMP[i]-1]和s[i…i+eKMP[i]-1]是相同的，只需判断第一个不相同的位置就可代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;stdio.h&gt;#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=100010;//字符串长度最大值int next1[maxn*2],ex[maxn];//ex数组即为extend数组char s[maxn*2],s2[maxn];int n;//预处理计算next数组void getnext()&#123; int i=0,j,po,len=strlen(s); next1[0]=len;//初始化next[0] while(s[i]==s[i+1]&amp;&amp;s[i+1])//计算next[1] i++; next1[1]=i; po=1;//初始化po的位置 for(i=2;i&lt;len;i++)&#123; if(next1[i-po]+i&lt;=next1[po]+po-1)//第一种情况，可以直接得到next[i]的值 next1[i]=next1[i-po]; else //第二种情况，要继续匹配才能得到next[i]的值 &#123; j=next1[po]+po-i; if(j&lt;0)j=0;//如果i&gt;po+next[po],则要从头开始匹配 while(i+j&lt;len&amp;&amp;s[j]==s[j+i])//计算next[i] j++; next1[i]=j; po=i;//更新po的位置 &#125; &#125;&#125;void work()&#123; int ret1,ret2,ret3; ret1=ret2=ret3=0; //for(int i=0;i&lt;2*n;i++)printf(\"%d \",next1[i]); //cout&lt;&lt;endl; for(int i=0;i&lt;n;i++)&#123; if(i!=0&amp;&amp;next1[i]&gt;=n)break; if(next1[i]&lt;n)&#123; if(s[i+next1[i]]&lt;s[next1[i]])ret1++; else ret3++; &#125;else ret2++; &#125; printf(\"%d %d %d\\n\",ret1,ret2,ret3);&#125;int main()&#123; int t,cas=0; scanf(\"%d\",&amp;t); while(t--)&#123; scanf(\"%s\",s); n=strlen(s); printf(\"Case %d: \",++cas); for(int i=0;i&lt;n;i++)&#123; s[n+i]=s[i]; &#125;s[2*n]='\\0'; //printf(\"\\n%s\",s); getnext(); work(); &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"扩展KMP","slug":"扩展KMP","permalink":"https://anoyer.cn/tags/扩展KMP/"}]},{"title":"Anoyer训练计划","slug":"Anoyer训练计划","date":"2018-11-30T00:34:41.000Z","updated":"2019-01-18T09:53:14.730Z","comments":true,"path":"article/Anoyer训练计划.html","link":"","permalink":"https://anoyer.cn/article/Anoyer训练计划.html","excerpt":"","text":"Anoyer JB训练规划前期：18年12月-19年2月低完成算法专题训练一阶段+一些专题散题：kuangbin-字符串所有专题kuangbin-数论所有专题各OJ专题散题+cf比赛该阶段必须掌握字符串和数论所有考点算法及其各种运用（这也是刷专题的意义所在），除去一些特难算法稀有神兽级别的算法（脑子不够，学意义也不大）中期：19年3月-省赛前完成计算几何 （重心） 和数据结构算法学习及专题训练++一些专题散题：kuangbin-计算几何所有专题kuangbin-数据结构所有专题各OJ专题散题+cf比赛该阶段结束时，必须掌握字符串,数论,计算机几何,数据结构所有考点算法及其各种运用（这也是刷专题的意义所在，粘贴复制上文的QAQ），除去一些特难算法稀有神兽级别的算法（脑子不够，学意义也不大）后期：省赛结束后-暑假前开始补cf以前的题，锻炼思维及出题速度 学习较为单一的一个阶段尽可能多的补cf以前的题，对于补的每一场比赛，尽可能的把这一场的题都补完，这样才是补题意义所在该阶段意义在于训练思维能力，能快速的对于一道题目给出解题思路，这也是我半年训练及两次现场赛的经验CF很重要，解题思维比算法更重要冲刺期：7月-8月准备参加多校训练或者时参加夏令营个人意向时参加夏令营，提升会很大也很快进行高压训练，每场比赛都可以看出本赛季的希望，且对知识巩固利用并实战同时利用空闲时间进行个人模板整理cf补题该阶段也是对知识点磨合对算法巩固脑子实战，也是队伍快速磨合阶段网络赛阶段：9月打6场网络赛，拿取名额。在冲刺期应该会有一场CCPC网络赛。目标打满该赛季的ICPC及一场CCPC（估计得经济倒退一阵子）网络赛cf补题好好打网络赛拿名额网络赛后备赛阶段，日常刷题训练cf补题专题复习平复赛前心态，以最好心态及状态参赛Anoyer训练规划讲完！！！","categories":[{"name":"闲记","slug":"闲记","permalink":"https://anoyer.cn/categories/闲记/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://anoyer.cn/tags/生活/"}]},{"title":"逆元模板","slug":"逆元模板","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:40:18.711Z","comments":true,"path":"article/逆元模板.html","link":"","permalink":"https://anoyer.cn/article/逆元模板.html","excerpt":"","text":"费马小定理求逆元12345678910111213141516171819202122ll quick_mod(ll a,ll b,ll c) //快速幂计算(a^b)%c&#123; ll ans = 1; while(b) &#123; if(b&amp;1) //相当于b%2==1 ans = (ans*a)%c; a = (a*a)%c; b&gt;&gt;=1; //相当于b/=2 &#125; return ans;&#125; ll inv(ll b,ll c) //计算b的逆元&#123; return quick_mod(b,c-2,c);&#125; ll div(ll a,ll b,ll c) //计算(a/b)%c&#123; return ((a%c)*(inv(b,c)%c))%c;&#125;扩展GCD求逆元12345678910111213void ex_gcd(ll a, ll b, ll &amp;d, ll &amp;x, ll &amp;y)&#123; if (!b) &#123;d = a, x = 1, y = 0;&#125; else&#123; ex_gcd(b, a % b, d, y, x); y -= x * (a / b); &#125;&#125; ll inv(ll a, ll p)&#123;//如果不存在，返回-1 a,p互质 ll d, x, y; ex_gcd(a, p, d, x, y); return d == 1 ? (x % p + p) % p : -1;&#125;递归求逆元当p是个质数的时候有inv(a) = (p - p / a) * inv(p % a) % p,且1的逆元就是112345 ll inv(ll t, ll p) &#123; //求t关于p的逆元，注意:t要小于p，最好传参前先把t%p一下 ,即inv(a%p, p)求a对p的逆元 return t == 1 ? 1 : (p - p / t) * inv(p % t, p) % p;&#125;打表求逆元1234567ll inv[maxn];void Prepare_inv(ll n,ll M)&#123; inv[1]=1; for(ll i=2;i&lt;=n;i++)&#123; inv[i]=(ll)(M-M/i)*inv[M%i]%M; &#125;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"素数筛+埃筛模板","slug":"素数筛","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:39:06.849Z","comments":true,"path":"article/素数筛.html","link":"","permalink":"https://anoyer.cn/article/素数筛.html","excerpt":"","text":"普通的素数筛1234567891011121314151617181920212223242526272829#include&lt;stdio.h&gt;#include&lt;cstring&gt;#include&lt;bits/stdc++.h&gt;using namespace std;const int MAX=1e7+7;//求MAX范围内的素数long long su[MAX],cnt;bool isprime[MAX];void prime()&#123; cnt=1; memset(isprime,1,sizeof(isprime));//初始化认为所有数都为素数 isprime[0]=isprime[1]=0;//0和1不是素数 for(long long i=2;i&lt;=MAX;i++) &#123; if(isprime[i]) su[cnt++]=i;//保存素数i for(long long j=1;j&lt;cnt&amp;&amp;su[j]*i&lt;MAX;j++) &#123; isprime[su[j]*i]=0;//筛掉小于等于i的素数和i的积构成的合数 &#125; &#125;&#125;int main()&#123; prime(); //for(long long i=1;i&lt;cnt;i++) // printf(\"%d \",su[i]); return 0;&#125;埃筛（线性筛）筛素数123456789101112131415int p[maxn], check[maxn], tot = 0;void prime()&#123; check[1]=1; check[0]=1; for(int i=2;i&lt;=n;i++) &#123; if(!check[i])p[++tot]=i; for(int j=1;j&lt;=tot&amp;&amp;i*p[j]&lt;=n;j++) &#123; check[i*p[j]]=1; if(!(i%p[j]))break;//*****关键 &#125; &#125;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"矩阵快速幂模板","slug":"矩阵快速幂","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:39:00.475Z","comments":true,"path":"article/矩阵快速幂.html","link":"","permalink":"https://anoyer.cn/article/矩阵快速幂.html","excerpt":"","text":"快速幂函数123456789101112ll quick_mod(ll a,ll b,ll c) //快速幂计算(a^b)%c&#123; ll ans = 1; while(b) &#123; if(b&amp;1) //相当于b%2==1 ans = (ans*a)%c; a = (a*a)%c; b&gt;&gt;=1; //相当于b/=2 &#125; return ans;&#125;矩阵快速幂模版12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt; using namespace std;int N=7;void Matrix(int (&amp;a)[2][2],int b[2][2])&#123; int tmp[2][2]=&#123;0&#125;; for(int i=0;i&lt;2;++i) for(int j=0;j&lt;2;++j) for(int k=0;k&lt;2;++k) tmp[i][j]=(tmp[i][j]+a[i][k]*b[k][j])%N; for(int i=0;i&lt;2;++i)&#123; for(int j=0;j&lt;2;++j)&#123; a[i][j]=tmp[i][j]; &#125; &#125;&#125;int main()&#123; int a,b,n; while(scanf(\"%d%d%d\",&amp;a,&amp;b,&amp;n))&#123; if(a==0&amp;&amp;b==0&amp;&amp;n==0)break; if(n==1)&#123; cout&lt;&lt;1&lt;&lt;endl; continue; &#125; int temp[2][2]=&#123;a,b,0,0&#125;,cot[2][2]=&#123;1,0,0,1&#125;, x[2] = &#123;1, 1&#125;; n-=2; while(n)&#123; if(n&amp;1)Matrix(cot,temp); Matrix(temp,temp); n/=2; &#125; int ans=0; for(int i=0;i&lt;2;i++) ans=(ans+x[i]*cot[0][i])%N; cout&lt;&lt;ans&lt;&lt;endl; &#125;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"浮点型数据高精度乘法","slug":"浮点型数据高精度乘法","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:38:50.513Z","comments":true,"path":"article/浮点型数据高精度乘法.html","link":"","permalink":"https://anoyer.cn/article/浮点型数据高精度乘法.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/*有2堆石子。A B两个人轮流拿，A先拿。每次可以从一堆中取任意个或从2堆中取相同数量的石子，但不可不取。拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出2堆石子的数量，问最后谁能赢得比赛。例如：2堆石子分别为3颗和5颗。那么不论A怎样拿，B都有对应的方法拿到最后1颗。Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 10000)第2 - T + 1行：每行2个数分别是2堆石子的数量，中间用空格分隔。(1 &lt;= N &lt;= 10^18)Output共T行，如果A获胜输出A，如果B获胜输出B。Input示例33 53 41 9Output示例BAA*///注意：sqrt产生精度问题 double最多存小数点后14位，模拟乘法 #include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long int ll;const int maxn = 1e4+5;//0.618033988749894848204586834... 拆成整数放进数组里，//拆成三部分即可 ll tmp[3] = &#123; 618033988,749894848,204586834 &#125;;ll MOD = 1e9;int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; ll a, b; scanf(\"%lld%lld\", &amp;a, &amp;b); if (a &gt; b)&#123; ll t = a; a = b; b = t; &#125; ll diff = b - a; //把10^18分成两部分10^9 ll ta = diff / MOD; ll tb = diff % MOD; ll tp = tb * tmp[2]; tp = ta * tmp[2] + tb * tmp[1] + tp / MOD; tp = ta * tmp[1] + tb * tmp[0] + tp / MOD; tp = ta * tmp[0] + tp / MOD + diff; if (tp == a) printf(\"B\\n\"); else printf(\"A\\n\"); &#125; return 0;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"Miller-Rabin素性测试模板","slug":"Miller-Rabin素性测试","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:44:48.960Z","comments":true,"path":"article/Miller-Rabin素性测试.html","link":"","permalink":"https://anoyer.cn/article/Miller-Rabin素性测试.html","excerpt":"","text":"/** 随机素数测试（伪素数原理理）* CALL: bool res = miller(n);* 快速测试n是否满⾜足素数的“必要”条件，出错概率极低* 对于任意奇数n &gt; 2和正整数s，算法出错概率≤2^(-s)*/123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define ll long long int#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 2*1e5 + 5;long long quicks(long long a, long long b, long long c)&#123; long long ans = 1; a = a % c; while (b != 0)&#123; if (b &amp; 1) ans = (ans*a) % c; b &gt;&gt;= 1; a = (a*a) % c; &#125; return ans;&#125;bool Miller_Rabin_1(long long n) &#123; //标准代码 long long t = 0; long long b = n - 1; while ((b &amp; 1) == 0)&#123; t++; b &gt;&gt;= 1; &#125; //现在的a^(b*2^t)=1(mod n) long long a = rand() % (n - 1) + 1; //测试 long long x = quicks(a, b, n); //个人认为这里如果加上优先判定是不是1，n-1的话，会更快一点？是不是呢？？？？？ for (long long i = 1; i &lt;= t; i++)&#123; long long y = quicks(x, 2, n); if (y == 1 &amp;&amp; x != 1 &amp;&amp; x != n - 1) return false; //这里的意思是如果a^(d*2^r)是1，但是a^(d*2^(r-1))不是1也不是n-1的情况，这时候我们认为是合数 x = y; &#125; if (x != 1) return false; else return true;&#125;int main() &#123; ll n; cin &gt;&gt; n; if (Miller_Rabin_1(n))cout &lt;&lt; \"Yes\" &lt;&lt; endl; else cout &lt;&lt; \"No\" &lt;&lt; endl; return 0;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"欧拉函数模板","slug":"欧拉函数","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:37:21.044Z","comments":true,"path":"article/欧拉函数.html","link":"","permalink":"https://anoyer.cn/article/欧拉函数.html","excerpt":"","text":"求一个数的欧拉函数123456789101112ll phi(ll x)&#123; //求1~n与n互质的个数 // phi(1323)=phi(3^3*7^2)=1323*(1-1/3)*(1-1/7) ll i, ans = x; for (i = 2; i*i &lt;= x; i++)&#123; if (x%i == 0) ans = ans - ans / i; while(x%i == 0) x /= i; &#125; if (x &gt; 1) ans = ans - ans / x; return ans;&#125;递推求欧拉函数12345678910111213141516171819ll _phi(ll x) &#123; //递推求欧拉函数 利用了欧拉函数的积性 //如果b质数 a%b！=0 phi(a*b) = phi(a)*b - phi(a)//当b是质数，a%b==0，phi(a*b)=phi(a)*b if (x == 0) return 0; ll res = 1, t = x; for (ll i = 2; i &lt;= (ll)sqrt(1.*x); i++) &#123; if (t%i == 0) &#123; res *= (i - 1); t /= i; while (t%i == 0) &#123; res *= i; t /= i; &#125; &#125; if (t == 1) break; &#125; if (t &gt; 1) &#123; res *= (t - 1); &#125; return res;&#125;递推欧拉函数打表12345678910111213141516171819202122ll phi[maxn]; void init()&#123; for(int i=1;i&lt;=maxn;i++) phi[i] = i; for (int i = 2; i*i &lt; maxn; i++)&#123; //最大素因子表 if (phi[i] == i)&#123; for (int j = i * i; j &lt; maxn; j += i)&#123; phi[j] = i; &#125; &#125; &#125; phi[1] = 1; for (int i = 2; i &lt; maxn; i++)&#123; if ((i / phi[i]) % phi[i] == 0)&#123; phi[i] = phi[i / phi[i]] * phi[i]; //当b是质数，a%b==0，phi(a*b)=phi(a)*b &#125; else &#123; phi[i] = phi[i / phi[i]] * (phi[i] - 1); //如果b质数 a%b！=0 phi(a*b) = phi(a)*b - phi(a) &#125; &#125;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"杜教筛模板","slug":"杜教筛","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:36:55.553Z","comments":true,"path":"article/杜教筛.html","link":"","permalink":"https://anoyer.cn/article/杜教筛.html","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define ll long long int;#define N 2001000#define ni 500000004 //2的逆元using namespace std;const long long int mod=0x3f3f3f3f3f3f3f;inline void read(long long &amp;x) //输入外挂 &#123; x=0; static int p;p=1; static char c;c=getchar(); while(!isdigit(c))&#123;if(c=='-')p=-1;c=getchar();&#125; while(isdigit(c)) &#123;x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c-48);c=getchar();&#125; x*=p;&#125;bool vis[N];int mu[N],sum1[N];long long phi[N],sum2[N];int cnt,prim[N];int e,e1;map&lt;long long ,int&gt;w,w1; //哈希 w用来求phi前缀和 w1用来求miu前缀和 void get(int maxn)&#123; phi[1]=mu[1]=1; for(int i=2;i&lt;=maxn;i++) &#123; if(!vis[i]) &#123; prim[++cnt]=i; mu[i]=-1;phi[i]=i-1; &#125; for(int j=1;j&lt;=cnt&amp;&amp;prim[j]*i&lt;=maxn;j++) &#123; vis[i*prim[j]]=1; if(i%prim[j]==0) &#123; phi[i*prim[j]]=phi[i]*prim[j]; break; &#125; else mu[i*prim[j]]=-mu[i],phi[i*prim[j]]=phi[i]*(prim[j]-1); &#125; &#125; for(int i=1;i&lt;=maxn;i++)sum1[i]=sum1[i-1]+mu[i],sum2[i]=(sum2[i-1]+phi[i])%mod; //打一个maxn的phi前缀和表 和miu前缀和表 &#125;int djsmu(long long x) // 求miu前缀和 &#123; if(x&lt;=2000000)return sum1[x]; if(w.count(x))return w[x]; int ans=1; for(long long l=2,r;l&lt;=x;l=r+1) &#123; r=x/(x/l); ans-=(r-l+1ll)*djsmu(x/l); &#125; return w[x]=ans;&#125;long long djsphi(long long x) //求phi 前缀和 &#123; if(x&lt;=2000000)return sum2[x]; if(w1.count(x))return w1[x]; long long ans=(x %mod* ((x + 1) % mod)) % mod*ni%mod; for(long long l=2,r;l&lt;=x;l=r+1) &#123; r=x/(x/l); //最后一个分块中的数 ans = (ans - ((r - l + 1) % mod*djsphi(x / l)) % mod + mod) % mod; &#125; return w1[x]=ans;&#125;int main()&#123; long long t; read(t); get(2000000); while(t--)&#123; static long long n; read(n); printf(\"%lld %d\\n\",djsphi(n),djsmu(n)); &#125; return 0;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"最长循环节模板","slug":"最长循环节","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:36:47.745Z","comments":true,"path":"article/最长循环节.html","link":"","permalink":"https://anoyer.cn/article/最长循环节.html","excerpt":"","text":"正整数k的倒数1/k，写为10进制的小数如果为无限循环小数，则存在一个循环节，求&lt;=n的数中，倒数循环节长度最长的那个数，假如存在多个最优的答案，输出所有答案中最大的那个数。如果1&lt;=b&lt;a,a没有2或5的质因子，并且a与b互质，那么b/a 的循环节位数恰好等于e 满足min(10^e≡1(moda))),e是正整数。如果1&lt;=b&lt;a,a没有2或5的质因子，并且a与b互质，那么b/a 的循环节位数必整除ϕ(a)。123456789101112131415161718192021222324252627282930#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define ll long long int#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)using namespace std;const int maxn = 1e6 + 7;int main(int argc, char *argv[]) &#123; int n,ans=1,maxx=0; scanf(\"%d\", &amp;n); for (int i = 2; i &lt;= n; i++) &#123; int tmp = i, tmp1 = 1, tmp2 = 0; while (tmp % 2 == 0)tmp /= 2; while (tmp % 5 == 0)tmp /= 5; if (tmp == 1)tmp2 = 0; else &#123; do &#123; tmp1 = tmp1 * 10 % tmp; ++tmp2; &#125; while (tmp1 != 1); &#125; if (tmp2 &gt; maxx) &#123; maxx = tmp2; ans = i; &#125; &#125; printf(\"%d\\n\", ans); return 0;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"莫比乌斯函数打表模板","slug":"莫比乌斯表","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:40:01.253Z","comments":true,"path":"article/莫比乌斯表.html","link":"","permalink":"https://anoyer.cn/article/莫比乌斯表.html","excerpt":"","text":"莫比乌斯打表（phi可以删除）phi–欧拉函数表 miu–莫比乌斯函数表 fac–i最大的素因子辅助打phi表123456789101112131415int phi[maxn],miu[maxn],fac[maxn];ll f[maxn], F[maxn];void init()&#123; for (int i = 1; i &lt; maxn; ++i) fac[i] = i; phi[1] = miu[1] = 1; for (int i = 2; i &lt; maxn; ++i) &#123; if (fac[i] == i) for (int j = i &lt;&lt; 1; j &lt; maxn; j += i) fac[j] = i; if (i / fac[i] % fac[i]) phi[i] = (fac[i] - 1)*phi[i / fac[i]], miu[i] = -miu[i / fac[i]]; //如果b质数 a%b！=0 phi(a*b) = phi(a)*b - phi(a) else phi[i] = fac[i] * phi[i / fac[i]], miu[i] = 0; //当b是质数，a%b==0，phi(a*b)=phi(a)*b &#125;&#125;求一个数的欧拉函数值–复杂度n^1/2123456789101112131415161718int miu(ll n)&#123; int prime = 1; int flag = 0; for (int i = 2; i*i &lt;= n; i++) &#123; if (n%i == 0) &#123; prime++; n /= i; if (n%i == 0) &#123; flag = 1; break; &#125; &#125; &#125; if (flag) return 0; if (prime % 2)return -1; else return 1;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"整除分块模板","slug":"整除分块模板","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:36:32.531Z","comments":true,"path":"article/整除分块模板.html","link":"","permalink":"https://anoyer.cn/article/整除分块模板.html","excerpt":"","text":"1234for(int i=1,last;i&lt;=n;i=last+1)&#123; last=n/(n/i); //该区间的最后一个数 ans+=(last-i+1)*(n/i);&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"欧几里得及拓展欧几里得模板","slug":"拓展欧几里得及欧几里得","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:36:18.645Z","comments":true,"path":"article/拓展欧几里得及欧几里得.html","link":"","permalink":"https://anoyer.cn/article/拓展欧几里得及欧几里得.html","excerpt":"","text":"欧几里得12345int gcd(int a,int b)&#123; return (b==0)?a:gcd(b,a%b); //一条语句搞定（三元运算符）装逼，跟上面略有不同，上面做到t=0,这里做到b=0 &#125;拓展欧几里得1234567891011121314151617181920212223int gcd(int a,int b)&#123; return (b==0)?a:gcd(b,a%b); //一条语句搞定（三元运算符）装逼，跟上面略有不同，上面做到t=0,这里做到b=0 &#125; ll lcm(ll a, ll b) &#123; return a / gcd(a,b) * b;&#125;int exgcd(int a,int b,int &amp;x,int &amp;y)&#123; if(b==0) &#123; x=1; y=0; return a; &#125; int r=exgcd(b,a%b,x,y); int t=x; x=y; y=t-a/b*y; return r;&#125;拓展欧几里得求整数解个数12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455ll gcd(ll a, ll b) &#123; return b ? gcd(b, a%b) : a;&#125; ll lcm(ll a, ll b) &#123; return a / gcd(a, b) * b;&#125; ll extend_gcd(ll a, ll b, ll&amp;x, ll&amp;y) &#123; if (!b) &#123; x = 1; y = 0; return a; &#125; ll xt = 0, yt = 0; ll d = extend_gcd(b, a % b, xt, yt); x = yt; y = xt - yt * (a / b); return d;&#125; ll cal(ll a, ll b, ll n) &#123; //计算ax+by == n的非负整数解组数 ll x = 0, y = 0, d; d = extend_gcd(a, b, x, y); if (n % d != 0) &#123; return 0; &#125; x *= n / d, y *= n / d; ll LCM = lcm(a, b); ll t1 = LCM / a, t2 = LCM / b; if (x &lt; 1) &#123; ll num = (1 - x) / t1; x += num * t1; y -= num * t2; if (x &lt; 1) &#123; y -= t2; x += t1; &#125; &#125; if (y &lt; 1) &#123; ll num = (1 - y) / t2; y += num * t2; x -= num * t1; if (y &lt; 1) &#123; y += t2; x -= t1; &#125; &#125; ll ans = x &gt; 0 &amp;&amp; y &gt; 0; if (ans) &#123; ans += min((x - 1) / t1, ((n - 1) / b - y) / t2); ans += min((y - 1) / t2, ((n - 1) / a - x) / t1); &#125; return ans;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"求大数的n次方对m取模（欧拉降幂）","slug":"大数次方模板","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:35:48.914Z","comments":true,"path":"article/大数次方模板.html","link":"","permalink":"https://anoyer.cn/article/大数次方模板.html","excerpt":"","text":"求2^n次方对mod取模，n为一个大数12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;stdio.h&gt;#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int INF = 0x3f3f3f3f;const int MAXN = 1e5 + 10;const int MOD = 1e9 + 7;char s[MAXN];long long phi(long long x)&#123; long long ret = x; for (int i = 2; i * i &lt;= x; ++i) if (x % i == 0) &#123; ret -= ret / i; while (x % i == 0) x /= i; &#125; if (x &gt; 1) ret -= ret / x; return ret;&#125;ll mpow(ll a, ll n, ll m) //a ^ n % m&#123; ll t = 1; while (n) &#123; if (n &amp; 1) t = (t * a) % m; a = (a * a) % m, n &gt;&gt;= 1; &#125; return t;&#125;int main()&#123;#ifdef LOCAL //freopen(\"C:/input.txt\", \"r\", stdin);#endif int T; cin &gt;&gt; T; while (T--) &#123; ll n = 0, p = phi(MOD); scanf(\"%s\", s); //求2^s次方 s为一个大数 for (int i = 0; s[i]; i++) n = (n * 10 + s[i] - '0') % p; n += p - 1; ll ans = mpow(2, n, MOD); cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"基数排序MSD模板","slug":"基数排序MSD","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:35:41.463Z","comments":true,"path":"article/基数排序MSD.html","link":"","permalink":"https://anoyer.cn/article/基数排序MSD.html","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;stdio.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#include&lt;malloc.h&gt;using namespace std;const int maxn=1e6+7;int arr[maxn]=&#123;12,14,54,5,6,3,9,8,47,89&#125;;int getdigit(int x,int d)&#123; int a[]=&#123;1,1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9&#125;; ////因为待排数据最大数据位数 return ((x/a[d])%10);&#125;void msdradix_sort(int begin,int end,int d)&#123; const int radix=10; //进制数 int count[radix],i,j; //count表示每个桶中元素个数 //置零 for(i=0;i&lt;10;++i)count[i]=0; //给桶分配空间 int *bucket=(int *)malloc((end-begin+1)*sizeof(int)); //统计各桶需要装的元素的个数 for(i=begin;i&lt;=end;++i)&#123; count[getdigit(arr[i], d)]++; &#125; //求出桶的边界索引，count[i]值为第i个桶的右边界索引+1 for(i=1;i&lt;radix;++i)&#123; count[i]+=count[i-1]; //每个桶的边界，便于下步将arr重新放入bucket里 &#125; //这里要从右向左扫描，保证排序稳定性 for(i=end;i&gt;=begin;--i)&#123; j=getdigit(arr[i],d); //求出关键码的第d位的数字， 例如：576的第3位是5 bucket[count[j]-1]=arr[i]; //放入对应的桶中，count[j]-1是第j个桶的右边界索引 --count[j]; //第j个桶放下一个元素的位置(右边界索引+1) &#125; //注意：此时count[i]为第i个桶左边界 //从各个桶中收集数据 for(i = begin, j = 0;i &lt;= end; ++i, ++j)&#123; arr[i] = bucket[j]; &#125; //释放存储空间 free(bucket); //对每个桶再次排序 for(i=0;i&lt;radix;i++)&#123; int p1=begin+count[i]; //第I个桶的左边界 int p2=begin+count[i+1]-1 ; //第i个桶的右边界 if(p1&lt;p2&amp;&amp;d&gt;1)&#123; msdradix_sort(p1, p2, d-1); //对第i个桶递归调用，进行基数排序，数位降 1 &#125; &#125;&#125;int main()&#123; int len=10; for(int i=0;i&lt;10;i++)cout&lt;&lt;arr[i]&lt;&lt;\" \"; cout&lt;&lt;endl; msdradix_sort(0,10-1,2); //2表示最高位数 for(int i=0;i&lt;10;i++)cout&lt;&lt;arr[i]&lt;&lt;\" \"; cout&lt;&lt;endl; &#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"BM杜教","slug":"BM杜教","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:42:23.949Z","comments":true,"path":"article/BM杜教.html","link":"","permalink":"https://anoyer.cn/article/BM杜教.html","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;cassert&gt;#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,a,n) for (int i=a;i&lt;n;i++)#define per(i,a,n) for (int i=n-1;i&gt;=a;i--)#define pb push_back#define mp make_pair#define all(x) (x).begin(),(x).end()#define fi first#define se second#define SZ(x) ((int)(x).size())typedef vector&lt;int&gt; VI;typedef long long ll;typedef pair&lt;int,int&gt; PII;const ll mod=1000000007;ll powmod(ll a,ll b) &#123;ll res=1;a%=mod; assert(b&gt;=0); for(;b;b&gt;&gt;=1)&#123;if(b&amp;1)res=res*a%mod;a=a*a%mod;&#125;return res;&#125;// headint _,n;namespace linear_seq &#123; const int N=10010; ll res[N],base[N],_c[N],_md[N]; vector&lt;int&gt; Md; void mul(ll *a,ll *b,int k) &#123; rep(i,0,k+k) _c[i]=0; rep(i,0,k) if (a[i]) rep(j,0,k) _c[i+j]=(_c[i+j]+a[i]*b[j])%mod; for (int i=k+k-1;i&gt;=k;i--) if (_c[i]) rep(j,0,SZ(Md)) _c[i-k+Md[j]]=(_c[i-k+Md[j]]-_c[i]*_md[Md[j]])%mod; rep(i,0,k) a[i]=_c[i]; &#125; int solve(ll n,VI a,VI b) &#123; // a 系数 b 初值 b[n+1]=a[0]*b[n]+...// printf(\"%d\\n\",SZ(b)); ll ans=0,pnt=0; int k=SZ(a); assert(SZ(a)==SZ(b)); rep(i,0,k) _md[k-1-i]=-a[i];_md[k]=1; Md.clear(); rep(i,0,k) if (_md[i]!=0) Md.push_back(i); rep(i,0,k) res[i]=base[i]=0; res[0]=1; while ((1ll&lt;&lt;pnt)&lt;=n) pnt++; for (int p=pnt;p&gt;=0;p--) &#123; mul(res,res,k); if ((n&gt;&gt;p)&amp;1) &#123; for (int i=k-1;i&gt;=0;i--) res[i+1]=res[i];res[0]=0; rep(j,0,SZ(Md)) res[Md[j]]=(res[Md[j]]-res[k]*_md[Md[j]])%mod; &#125; &#125; rep(i,0,k) ans=(ans+res[i]*b[i])%mod; if (ans&lt;0) ans+=mod; return ans; &#125; VI BM(VI s) &#123; VI C(1,1),B(1,1); int L=0,m=1,b=1; rep(n,0,SZ(s)) &#123; ll d=0; rep(i,0,L+1) d=(d+(ll)C[i]*s[n-i])%mod; if (d==0) ++m; else if (2*L&lt;=n) &#123; VI T=C; ll c=mod-d*powmod(b,mod-2)%mod; while (SZ(C)&lt;SZ(B)+m) C.pb(0); rep(i,0,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod; L=n+1-L; B=T; b=d; m=1; &#125; else &#123; ll c=mod-d*powmod(b,mod-2)%mod; while (SZ(C)&lt;SZ(B)+m) C.pb(0); rep(i,0,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod; ++m; &#125; &#125; return C; &#125; int gao(VI a,ll n) &#123; VI c=BM(a); c.erase(c.begin()); rep(i,0,SZ(c)) c[i]=(mod-c[i])%mod; return solve(n,c,VI(a.begin(),a.begin()+SZ(c))); &#125;&#125;;int main() &#123; while (~scanf(\"%d\",&amp;n)) &#123; vector&lt;int&gt;v; v.push_back(2);//前几项 v.push_back(4); v.push_back(6); v.push_back(8); v.push_back(10); v.push_back(12); //输入n ,输出第n项的值 printf(\"%d\\n\",linear_seq::gao(v,n-1)); &#125;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"线段树模板","slug":"组合数","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:39:41.091Z","comments":true,"path":"article/组合数.html","link":"","permalink":"https://anoyer.cn/article/组合数.html","excerpt":"","text":"123456789101112131415161718#include &lt;bits/stdc++.h&gt;using namespace std; int C[1005][1005];int main()&#123; C[0][0] = 1; for (int i = 1; i &lt;= 1000; i++) &#123; C[i][0] = 1; for (int j = 1; j &lt;= 1000; j++) C[i][j] = C[i - 1][j - 1] + C[i - 1][j]; &#125; cout &lt;&lt; C[4][3] &lt;&lt; endl; return 0;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"博弈论模板","slug":"博弈论","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:35:18.857Z","comments":true,"path":"article/博弈论.html","link":"","permalink":"https://anoyer.cn/article/博弈论.html","excerpt":"","text":"Bash–两人从一堆a个石子里面轮流取石子，每次最多去b个，取到最后一个石子获胜123456789101112int main() &#123; int t; scanf(\"%d\", &amp;t); while (t--) &#123; int a, b,flag; scanf(\"%d%d\", &amp;a, &amp;b); if (a % (b + 1) == 0)flag = 2; else flag = 1; if (flag == 1)printf(\"A\\n\"); else printf(\"B\\n\"); &#125;&#125;Nim–两人从n堆石子中任选一堆取石子，不得不取，可以把一堆直接去玩，拿到最后一颗石子得人获胜12345678910111213int main() &#123; int n; int stone, tag=0; scanf(\"%d\", &amp;n); while (n--) &#123; scanf(\"%d\", &amp;stone); tag ^= stone; &#125; // tag为0则为后⼿手赢，否则为先⼿手赢 if (tag == 0)printf(\"B\\n\"); else printf(\"A\\n\");&#125;威佐夫博弈–有2堆石子。A B两个人轮流拿，A先拿。每次可以从一堆中取任意个或从2堆中取相同数量的石子，但不可不取。拿到最后1颗石子的人获胜1234567891011121314int main() &#123; int n; int stone, tag=0; scanf(\"%d\", &amp;n); while (n--) &#123; int a, b; scanf(\"%d%d\", &amp;a,&amp;b); if (a &lt; b)swap(a, b); int flag = (a - b)*(sqrt(5) + 1) / 2; //黄金分割线 // 如果flag == b，则为后⼿手赢，否则先⼿手赢（奇异局） if (flag == b)printf(\"B\\n\"); else printf(\"A\\n\"); &#125;&#125;SG打表1234567891011121314151617181920212223//f[]：可以取走的石子个数//sg[]:0~n的SG函数值//hash[]:mex&#123;&#125;int f[N],sg[N],hash[N]; void getSG(int n)&#123; int i,j; memset(sg,0,sizeof(sg)); for(i=1;i&lt;=n;i++) &#123; memset(hash,0,sizeof(hash)); for(j=1;f[j]&lt;=i;j++) hash[sg[i-f[j]]]=1; for(j=0;j&lt;=n;j++) //求mes&#123;&#125;中未出现的最小的非负整数 &#123; if(hash[j]==0) &#123; sg[i]=j; break; &#125; &#125; &#125;&#125;SG-DFS打表12345678910111213141516171819202122232425int s[110],sg[10010],n;int SG_dfs(int x)&#123; int i; if(sg[x]!=-1) return sg[x]; bool vis[110]; memset(vis,0,sizeof(vis)); for(i=0;i&lt;n;i++) &#123; if(x&gt;=s[i]) &#123; SG_dfs(x-s[i]); vis[sg[x-s[i]]]=1; &#125; &#125; int e; for(i=0;;i++) if(!vis[i]) &#123; e=i; break; &#125; return sg[x]=e;&#125;一般DFS只在打表解决不了的情况下用，首选打表预处理。","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"log(n)分解一个数的所有素因子模板","slug":"分解素因子","date":"2018-11-27T05:55:49.000Z","updated":"2018-12-02T06:34:52.443Z","comments":true,"path":"article/分解素因子.html","link":"","permalink":"https://anoyer.cn/article/分解素因子.html","excerpt":"","text":"123456789101112131415161718192021 //n为要分解的数 //Fac数组存所有质因子 //cnt为质因子个数void primeFactor(int n)&#123; while(n%2==0)&#123; Fac[cnt++]=2; n/=2; &#125; // 经过第二步, 此时 n 一定为奇数 // 并且不存在偶数的素因子 // 所以我们可以跳过所有偶数 (i += 2) for(int i=3;i&lt;=sqrt(n);i+=2)&#123; while(n%i==0)&#123; Fac[cnt++]=i; n/=i; &#125; &#125; //此处为了防止是一个大于 2 的素数 if(n&gt;2)Fac[cnt++]=n;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"Hexo的入门教程及Next主题配置","slug":"Hexo 入门教程","date":"2018-11-22T03:35:22.000Z","updated":"2018-12-02T06:44:11.706Z","comments":true,"path":"article/Hexo 入门教程.html","link":"","permalink":"https://anoyer.cn/article/Hexo 入门教程.html","excerpt":"","text":"博主链接Hexo的入门教程及Next主题配置Node及Hexo安装hexo是什么？简单的说，就是一个静态博客的生成工具也可以说是一个搭建静态博客的框架，我这个博客就是就是基于hexo生成的。9月份把这个博客用hexo折腾出来，前几天ACM区域赛事结束了，所以想记录下来折腾的过程，留着以后备用。这里只说如何在windows下成功安装hexo并运行起来，关于主题以及配置不做记录。安装Node.js因为Hexo是基于Node.js的，所以必须先安装Node，所以请点击这里去下载适合自己windows版本的Node吧。（注意：在安装步骤里Custom Setup这一步记得选Add to PATH）。安装好以后，打开CMD，(那对于小白来说如何打开CMD呢？win+R然后输入cmd，点击确定，这样CMD就打开了.)，输入npm -v,如果出现版本号，那说明安装成功了，并且环境变量也配置好了，如果是未知命令那就要配置下环境变量。安装Hexo还是打开CMD然后输入安装hexo的命令：1npm install -g hexo-cli这一步需要一点时间，请稍等一会，让他安装好。安装完成后在CMD里输入hexo -v出现一系列版本号就是安装成功啦QAQ到这里，就要恭喜你成功完成了Hexo的安装了。生成一个博客初始化个人博客仓库在电脑中建一个文件夹（路径根据自己爱好，我是在E盘里建了一个名为Blog的文件夹），我在这里命名为Blog吧。然后通过CMD的cd到这个文件夹下，运行命令：1hexo init这个时候会将这个文件夹初始化为一个博客专用文件夹，生成过程稍微要点时间，耐心等待。然后输入：1npm install之后npm将会自动安装你需要的组件，只需要等待npm操作即可。开始生成博客继续操作：1hexo g然后输入：1hexo s会出现：在浏览器里打开http://localhost:4000/，你将会看到：到这里你已经有了一个属于你的本地Blog了。Coding部署why不是Github，因为我个人认为搭建一个个人博客用Github会有诸多不便。比如：1.搭建一个博客肯定就要往百度推送，不然别人搜不到你的博客有什么意思。而如果部署Github的话，百度无法抓取blog链接。2.Coding服务器在中国，所以Blog加载速度比GitHub快很多。注册Coding现在我们的博客已经在本地搭建完成，那要怎么才能让别人看到我们的博客呢？我们选择把我们的静态网页的代码发到coding上去，然后由coding负责将我们的代码展现出来。注册步骤比较简单，点击这里去注册。需要声明的是，如果你以后不想绑定独立域名，那么coding给你的域名默认为 仓库名.coding.me而你需要建立的仓库名需要与你的用户名保持一致，不然会出现问题，所以慎重起名字。然后填好个人信息，就会升级为银牌会员（能拥有5个私人仓库）。新建仓库在coding上面新建仓库项目名称写成你的用户名，比如我的仓库名字为Blog,然后描述写不写都行，自己选择公有还是私有，然后直接选择创建项目。配置ssh这个过程的目的是在你的电脑和coding之间建立联系的通道，不然谁都能往上面增加内容，那你的博客岂不乱套了？首先查看目录C:Users\\用户名有没有.ssh目录,如果没有，cmd在本地blog路径下,输入命令:1ssh-keygen -t rsa -C &quot;这里填上你的邮箱地址&quot;然后按3个回车。再检查有没有.ssh目录，打开目录，你会看到出现3个文件：然后用notepad++打开id——rsa.pub(这个是公钥，不带pub的是私钥，这个不要泄露出去），你会开到一堆字母，全选复制下来。下面打来浏览器，进入你刚才创建的仓库，设置-部署公钥-新建部署公钥，公钥名称可以不填，将刚才复制的公钥粘贴在公钥内容里面。把授予权限打上勾！，然后添加就可以了。站点配置下面我们进行博客的站点配置，打开Blog文件夹，你会看到这样的文件这个文件的意思就是对你的博客进行一些设置，比如的你的用户名等等，记住这个文件特别重要！，以后你进行配置都要在这里进行，下面我们用notepad++打开它，这是你的网站信息要是不懂英文就查字典写，注意：名称后面要放空格，不然会出错！！！。然后滑倒最下面，填写你的git地址，这一步特别关键，你可以照我这个写，同样，别忘了空格！（本张图片来自vzhiwen，因为我Blog修改了域名，后面会讲到）然后点击文件保存上传代码在Blog文件路径里，依次输入下列命令：123hexo cleanhexo dhexo g如果提及不上去，就下载一个插件，在命令行里输入：1npm install hexo-deployer-git --save再次提交就可以了clean表示清除缓存，d是deploy的缩写，意思是将代码推送到coding，然后等待一些时间，第一次需要输入coding的用户名和密码或者询问你yes/no，按照说明输入即可，出现下面的字样说明推送完毕打开pages服务打开浏览器，进入coding，代码-pages服务，部署来源选择master，然后可以选择https访问（）这个就是打开你网页的时候地址栏前面显示的绿锁头，后面写着安全，如果不选择，就会出现叹号，不过影响不大。现在，你的博客已经基本配置完成，现在就打开你的浏览器，输入你的网址试试吧！主题配置如果你感觉默认Blog主题可以通过这一块来学习，如果给自己Blog换个主题。主题安装为了使博客不太难看，我们需要安装一个主题，切换至刚刚生成的Hexo 目录，安装主题$ cd Blog$ git clone https://github.com/iissnan/hexo-theme-next themes/next如果没有Git可以去下一个，百度有一堆这里选了一个极简的主题，也是Hexo众多主题中最受欢迎的一个。上面出现的喵神的主题 在这里。Hexo也有更多主题供你选择。启用主题：在你的站点配置文件_config.yml里修改theme: next //刚刚安装主题的，名字主题配置：这是 NexT 默认的 Scheme —— Muse ，现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。 4）主题设定 选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：1234Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 即可。 选择 Pisce Scheme123#scheme: Muse#scheme: Mistscheme: Pisces写文章所有基础框架都已经创建完成，接下来可以开始写你的第一篇博客了在Blog/source/_posts下创建你的第一个博客吧，例如，创建一个名为FirstNight.md的文件，用Markdown大肆发挥吧，注意保存。如：1234---title: First Night---&gt; 我有一头**小毛驴**，可是我从来都不骑。然后本体测试看看，输入hexo s测试服务启动，你可以在浏览器中输入https://localhost:4000 访问了如果测试没问题，就可以上传到Coding了依次输入下面命令123hexo cleanhexo dhexo g然后你就可以再浏览器里输入你的Coding项目链接访问了标签 分类 关于 标签图标 侧边栏菜单创建文章在Blog路径下输入：1hexo new &quot;文章名称&quot;生产后会提示你文件路径，一般在Blog/source/_posts下文章基本设置12345678910---title: CentOS7下Tomcat启动慢的原因及解决方案date: 2017-12-02 21:01:24comments: true #是否可评论toc: true #是否显示文章目录categories: &quot;云服务器&quot; #分类tags: #标签 - centOS - tomcat---创建标签1hexo new page tags基本设置123title: tagsdate: 2017-12-02 21:01:24type: &quot;tags&quot;创建分类1hexo new page categories基本设置123title: categoriesdate: 2017-12-02 21:01:24type: &quot;categories&quot;标签图标实现效果图修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;设置菜单：设置 菜单 菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。 编辑主题配置文件，修改以下内容： 设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。 菜单示例配置(在主题配置文件中)1234567menu: home: / archives: /archives #about: /about #categories: /categories tags: /tags #commonweal: /404.html若你的站点运行在子目录中，请将链接前缀的 / 去掉 NexT 默认的菜单项有（标注 的项表示需要手动创建这个页面）：键值设定值显示文本（简体中文）homehome: /主页archivesarchives: /archives归档页categoriescategories: /categories分类页tagstags: /tags标签页aboutabout: /about关于页面commonwealcommonweal: /404.html公益 404设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml （{language} 为你所使用的语言）。 以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 languages/zh-Hans.yml，在 menu 字段下添加一项：123456789menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 commonweal: 公益404 something: 有料设定菜单项的图标，对应的字段是 menu_icons。 此设定格式是 item name: icon name，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。 菜单图标配置示例123456789menu_icons: enable: true # Icon Mapping. home: home about: user categories: th tags: tags archives: archive commonweal: heartbeat在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 作为图标。 请注意键值（如 home）的大小写要严格匹配 7）侧栏 默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 sidebar 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。 设置侧栏的位置，修改 sidebar.position 的值，支持的选项有：12left - 靠左放置right - 靠右放置目前仅 Pisces Scheme 支持 position 配置。影响版本5.0.0及更低版本。12sidebar: position: left设置侧栏显示的时机，修改 sidebar.display 的值，支持的选项有：123456post - 默认行为，在文章页面（拥有目录列表）时显示always - 在所有页面中都显示hide - 在所有页面中都隐藏（可以手动展开）remove - 完全移除sidebar: display: post搜索搜索功能真心好用，当文章多起来的时候，标签提供的作用已经很少了，只能简单索引，搜索却能精确查找，这里我用的依旧是最简单的本地站内搜索。安装插件1npm install hexo-generator-searchdb --save修改 站点配置 文件12345search: path: search.xml field: post format: html limit: 10000修改 主题配置文件12local_search: enable: true头像 （头像旋转）实现效果图：设置头像编辑 主题配置文件_config.yml， 修改字段1avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是地址值完整的互联网URI:http://example.com/avatar.png站点内的地址将头像放置主题目录下的source/uploads/（新建 uploads 目录若不存在） 配置为：avatar: /uploads/avatar.png或者 放置在 source/images/ 目录下, 配置为：avatar: /images/avatar.png1avatar: http://example.com/avatar.png实现头像旋转：打开\\themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author.styl，在里面添加如下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125;友链编辑主题配置文件添加：12345# titlelinks_title: Linkslinks: MacTalk: http://macshuo.com/ Title: http://example.com/社交网站侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在主题配置文件中。1、 链接放置在 social字段下，一行一个链接。其键值格式是 显示文本: 链接地址。12345678# Social linkssocial: GitHub: https://github.com/your-user-name Twitter: https://twitter.com/your-user-name 微博: http://weibo.com/your-user-name 豆瓣: http://douban.com/people/your-user-name 知乎: http://www.zhihu.com/people/your-user-name # 等等123456782、 设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键:Font Awesome图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是Font Awesome图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。1234567# Social Iconssocial_icons: enable: true # Icon Mappings GitHub: github Twitter: twitter 微博: weibo浏览量 访客量 阅读数打开文件： themes/next/_config.yml1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class=\"fa fa-user\"&gt;&lt;/i&gt; 访问人数 site_uv_footer: 人 # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class=\"fa fa-eye\"&gt;&lt;/i&gt; 总访问量 site_pv_footer: 次 # custom pv span for one page only page_pv: true page_pv_header: &lt;i class=\"fa fa-file-o\"&gt;&lt;/i&gt; 阅读数 page_pv_footer:相关操作：enable: true添加相关中文说明，不添加也行。修改统计规则及busuanzi失效修复打开\\themes\\next\\layout_partials\\footer.swig文件,在copyright前加上画红线这句话：代码如下：1&lt;script async src=\"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt;然后再合适的位置添加显示统计的代码，如图：代码如下：12345&lt;div class=\"powered-by\"&gt;&lt;i class=\"fa fa-user-md\"&gt;&lt;/i&gt;&lt;span id=\"busuanzi_container_site_uv\"&gt; 本站访客数:&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;在这里有两中不同计算方式的统计代码：pv的方式，单个用户连续点击n篇文章，记录n次访问量123&lt;span id=\"busuanzi_container_site_pv\"&gt; 本站总访问量&lt;span id=\"busuanzi_value_site_pv\"&gt;&lt;/span&gt;次&lt;/span&gt;uv的方式，单个用户连续点击n篇文章，只记录1次访客数123&lt;span id=\"busuanzi_container_site_uv\"&gt; 本站总访问量&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;次&lt;/span&gt;添加之后再执行hexo d -g，然后再刷新页面就能看到效果字数统计 阅读时长 总字数在站点的根目录下：1$ npm i --save hexo-wordcount打开 themes/next/_config.yml ，搜索关键字 post_wordcount：1234567891011# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true #字数统计 wordcount: true #预览时间 min2read: true #总字数,显示在页面底部 totalcount: true separated_meta: true文章发表 更新时间打开主题配置文件 _config.yml ,搜索关键字 updated_at 设置为 true ：123456# Post meta display settingspost_meta: item_text: true created_at: true updated_at: ture categories: true编辑文章,增加关键字updated（next可以根据文章改变时间自动更改）12345---layout: layouttitle: 关于date: 2017-08-18 15:41:18updated: 2017-09-05 20:18:54 #手动添加更新时间,不加这一行会自动更新背景图片在 themes/next/source/css/_custom/custom.styl 中添加如下代码：1234567body&#123; background:url(/images/bg.jpg); background-size:cover; background-repeat:no-repeat; background-attachment:fixed; background-position:center;&#125;动态粒子修改_layout.swig打开 next/layout/_layout.swig在 &lt; /body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面)123&#123;% if theme.canvas_nest %&#125;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125;修改配置文件打开 /next/_config.yml,在里面添加如下代码：(可以放在最后面)123456# --------------------------------------------------------------# background settings# --------------------------------------------------------------# add canvas-nest effect# see detail from https://github.com/hustcc/canvas-nest.jscanvas_nest: true到此就结束了，运行 hexo clean，然后运行 hexo g,然后运行 hexo s，最后打开浏览器在浏览器的地址栏输入 localhost:4000 就能看到效果了\\（￣︶￣）/如果你感觉默认的线条太多的话可以这么设置====&gt;在上一步修改 _layout.swig中，把刚才的这些代码：123&#123;% if theme.canvas_nest %&#125;&lt;script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"&gt;&lt;/script&gt;&#123;% endif %&#125;改为1234&#123;% if theme.canvas_nest %&#125;&lt;script type=\"text/javascript\"color=\"0,0,255\" opacity='0.7' zIndex=\"-2\" count=\"99\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"&gt;&lt;/script&gt;&#123;% endif %&#125;配置项说明color ：线条颜色, 默认: &#39;0,0,0&#39;；三个数字分别为(R,G,B)opacity: 线条透明度（0~1）, 默认: 0.5count: 线条的总数量, 默认: 150zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1加载动画打开 themes/next/_config.yml ，搜索关键字 pace ,设置为 true ,可以更换加载样式：12345678910111213141516171819# Progress bar in the top during page loading.pace: true# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-flash #替换更换样式透明背景内容板块透明博客根目录 themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl 文件 .content-wrap 标签下 background: white修改为：1background: rgba(255,255,255,0.7); //0.7是透明度菜单栏背景博客根目录 themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl 文件 .header-inner 标签下 background: white修改为：1background: rgba(255,255,255,0.7); //0.7是透明度站点概况背景博客根目录 themes\\next\\source\\css\\_schemes\\Pisces\\_sidebar.styl 文件 .sidebar-inner 标签下 background: white修改为：1background: rgba(255,255,255,0.7); //0.7是透明度然后修改博客根目录 themes\\next\\source\\css\\_schemes\\Pisces\\_layout.styl 文件 .sidebar 标签下 background: $body-bg-color修改为：1background: rgba(255,255,255,0.7); //0.7是透明度按钮背景博客根目录 themes\\next\\source\\css\\_common\\components\\post\\post-button.styl 同上修改对应位置为 background: transparent;修改底部Hexo和主题信息在图标库中找到你自己喜欢的图标, 修改桃心,打开 themes/next_config.yml ,搜索关键字 authoricon,替换图标名12# icon between year and author @Footerauthoricon: id-card2.隐藏网页底部 Hexo 强力驱动打开主题配置文件,搜索关键字 copyright ，如下:(或者直接删除)12# Footer `powered-by` and `theme-info` copyrightcopyright: false博客运行时间打开next\\layout\\_partials路径中的footer.swig,在文件中合适位置（我加在了最后面）加入下面代码段：1&lt;span id=\"timeDate\" title=\"网站运行时间\"&gt;载入天数...&lt;/span&gt;&lt;span id=\"times\" title=\"网站运行时间\"&gt;载入时分秒...&lt;/span&gt;在next\\layout\\_layout.swig中插入下面代码块：12345678910111213141516&lt;!--此处为建站时间 --&gt;&lt;script&gt; var now = new Date(); function createtime() &#123; var grt= new Date(\"09/24/2018 23:45:01\"); now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 )&#123;hnum = \"0\" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = \"0\" + mnum;&#125; seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = \"0\" + snum;&#125; document.getElementById(\"timeDate\").innerHTML =\"(ㆆᴗㆆ)本弱已菜菜的存活了\"+dnum+\"&amp;thinsp;天\"; document.getElementById(\"times\").innerHTML = hnum + \"&amp;thinsp;时\" + mnum + \"&amp;thinsp;分\" + snum + \"&amp;thinsp;秒\"; &#125; setInterval(\"createtime()\",250);然后就可以上传看效果啦版权声明自己使用的Hexo+NexT主题，主题默认的版权声明配置在themes\\next\\_config.yml文件中12345Copy# Declare license on postspost_copyright: enable: false license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/直接把enable 改为true即可开启。文章结尾–加入感谢阅读实现效果图具体实现方法在路径 \\themes\\next\\layout\\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=\"text-align:center;color: #ccc;font-size:14px;\"&gt;-------------本文结束&lt;i class=\"fa fa-paw\"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt;接着打开\\themes\\next\\layout\\_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）：代码如下：12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt;然后打开主题配置文件（_config.yml),在末尾添加：123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。Valine评论注册Leancloud评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号Leancloud官网，点我注册注册完以后需要创建一个应用，名字可以：blog ，然后 进入应用-&gt;设置-&gt;应用key获取你的appid 和 appkey 如图所示：博客主题配置文件配置拿到你的appid和appkey之后，打开主题配置文件 搜索 valine，填入appid 和 appkey123456789valine: enable: true appid: your app id appkey: your app key notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: just so so guest_info: nick,mail,link pageSize: 10配置域名记得在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去百度分享ShareSDK开始使用注册一个账号，然后打开后台，找到appkey打开1博客\\themes\\next\\layout\\_partials\\share新建一个文件名为 sharesdk.swig ，并输入以下代码：12345678910111213141516171819202122232425262728&lt;!--MOB SHARE BEGIN--&gt; &lt;div class=\"-mob-share-ui-button -mob-share-open\"&gt;分享&lt;/div&gt; &lt;div class=\"-mob-share-ui\" style=\"display: none\"&gt; &lt;ul class=\"-mob-share-list\"&gt; &lt;li class=\"-mob-share-weibo\"&gt;&lt;p&gt;新浪微博&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-tencentweibo\"&gt;&lt;p&gt;腾讯微博&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-qzone\"&gt;&lt;p&gt;QQ空间&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-qq\"&gt;&lt;p&gt;QQ好友&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-weixin\"&gt;&lt;p&gt;微信&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-douban\"&gt;&lt;p&gt;豆瓣&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-renren\"&gt;&lt;p&gt;人人网&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-kaixin\"&gt;&lt;p&gt;开心网&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-facebook\"&gt;&lt;p&gt;Facebook&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-twitter\"&gt;&lt;p&gt;Twitter&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-pocket\"&gt;&lt;p&gt;Pocket&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-google\"&gt;&lt;p&gt;Google+&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-youdao\"&gt;&lt;p&gt;有道云笔记&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-mingdao\"&gt;&lt;p&gt;明道&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-pengyou\"&gt;&lt;p&gt;朋友网&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-tumblr\"&gt;&lt;p&gt;Tumblr&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-instapaper\"&gt;&lt;p&gt;Instapaper&lt;/p&gt;&lt;/li&gt; &lt;li class=\"-mob-share-linkedin\"&gt;&lt;p&gt;LinkedIn&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=\"-mob-share-close\"&gt;取消&lt;/div&gt; &lt;/div&gt; &lt;div class=\"-mob-share-ui-bg\"&gt;&lt;/div&gt; &lt;script id=\"-mob-share\" src=\"http://f1.webshare.mob.com/code/mob-share.js?appkey=&#123;&#123; theme.shareSDKappkey &#125;&#125;\"&gt;&lt;/script&gt; &lt;!--MOB SHARE END--&gt;打开：1LX-Blog\\themes\\next\\layout\\post.swig将以下代码：1234567891011&lt;div class=\"post-spread\"&gt; &#123;% if theme.jiathis %&#125; &#123;% include '_partials/share/jiathis.swig' %&#125; &#123;% elseif theme.baidushare %&#125; &#123;% include '_partials/share/baidushare.swig' %&#125; &#123;% elseif theme.add_this_id %&#125; &#123;% include '_partials/share/add-this.swig' %&#125; &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125; &#123;% include '_partials/share/duoshuo_share.swig' %&#125; &#123;% endif %&#125; &lt;/div&gt;改成：12345678910111213&lt;div class=\"post-spread\"&gt; &#123;% if theme.jiathis %&#125; &#123;% include '_partials/share/jiathis.swig' %&#125; &#123;% elseif theme.baidushare %&#125; &#123;% include '_partials/share/baidushare.swig' %&#125; &#123;% elseif theme.add_this_id %&#125; &#123;% include '_partials/share/add-this.swig' %&#125; &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125; &#123;% include '_partials/share/duoshuo_share.swig' %&#125; &#123;% elseif theme.sharesdk %&#125; &#123;% include '_partials/share/sharesdk.swig' %&#125; &#123;% endif %&#125; &lt;/div&gt;打开 主题配置文件，添加以下代码：12sharesdk: trueshareSDKappkey: 你的appkey向百度站长推送当我们一开始建完博客时，搜索引擎是搜索不到的，我们需要做一项工作就是通知搜索引擎收录我们的网站。如何被百度收录这里需要做两个事情，一个是验证网站，一个是链接提交.验证网证我们到百度站长平台里面的站长工具里面去验证网站，大概步骤如下：第一步：输入网站第二步：站点属性第三步：验证网站前两步都很简单，第三步：验证网站有以下三种方法：文件验证HTML标签验证CNAME验证这里我们选择文件验证的方法，然后会得到一个baidu_verify_xxxxx.html文件。我使用的主题是next，所以我把这个验证文件放在theme/next/source/根目录下面，这样当我们编译网站hexo generate的时候，这个文件会被原封不动的拷贝到我们博客的public/根目录下。好，重要编译hexo并部署，完成验证.链接提交接下来我们进入链接提交.链接提交有手动和自动两种方法，手动就是每次你有新的链接生成，你就需要手动提交链接到百度，这种方法太麻烦了，不使用。自动提交有三种方式：主动推送(实时)自动推送sitemap这里我们选择sitemap方式。安装hexo的sitemap网站地图生成插件1npm install hexo-generator-baidu-sitemap --save在你的hexo站点的_config.yml添加下面的代码123# hexo sitemap网站地图baidusitemap: path: baidusitemap.xml配置成功后，hexo编译时会在hexo站点根目录生成baidusitemap.xml，部署网站后，提交到百度：代码复制下载插件clipboard.js 。将下载的clipboard.js文件下的dist文件夹中的文件拖到.\\themes\\next\\source\\js\\src 文件夹下也是在.\\themes\\next\\source\\js\\src目录下，创建clipboard-use.js，文件内容如下：1234567891011121314151617/*页面载入完成后，创建复制按钮*/!function (e, t, a) &#123; /* code */ var initCopyCode = function()&#123; var copyHtml = ''; copyHtml += '&lt;button class=\"btn-copy\" data-clipboard-snippet=\"\"&gt;'; copyHtml += ' &lt;i class=\"fa fa-globe\"&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;'; copyHtml += '&lt;/button&gt;'; $(\".highlight .code pre\").before(copyHtml); new ClipboardJS('.btn-copy', &#123; target: function(trigger) &#123; return trigger.nextElementSibling; &#125; &#125;); &#125; initCopyCode();&#125;(window, document);在.\\themes\\next\\source\\css\\_custom\\custom.styl样式文件中添加下面代码：123456789101112131415161718192021222324252627282930313233343536//代码块复制按钮.highlight&#123; //方便copy代码按钮（btn-copy）的定位 position: relative;&#125;.btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc,#eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0;&#125;.btn-copy span &#123; margin-left: 5px;&#125;.highlight:hover .btn-copy&#123; opacity: 1;&#125;在.\\themes\\next\\layout\\_layout.swig文件中，添加引用（注：在 swig 末尾或 body 结束标签（&lt;/body&gt;）之前添加）：123&lt;!-- 代码块复制功能 --&gt; &lt;script type=\"text/javascript\" src=\"/js/src/clipboard.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/js/src/clipboard-use.js\"&gt;&lt;/script&gt;博客压缩加速访问在站点的根目录下执行以下命令：12$ npm install gulp -g$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save在如下图所示，新建 gulpfile.js ，并填入以下内容：123456789101112131415161718192021222324252627282930313233var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');// 压缩 public 目录 cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩 public/js 目录 jsgulp.task('minify-js', function() &#123; return gulp.src('./public/**/*.js') .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 执行 gulp 命令时执行的任务gulp.task('default', [ 'minify-html','minify-css','minify-js']);生成博文是执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。主页文章添加阴影效果实现效果图具体实现方法打开\\themes\\next\\source\\css_custom\\custom.styl,向里面加入：12345678/*主页文章添加阴影效果*/ .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125;修改代码块自定义样式打开\\themes\\next\\source\\css\\_custom\\custom.styl,向里面加入：(颜色可以自己定义)123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125;博客宝宝效果如图安装依赖包,在站点根目录，打开Git Bash ，安装hexo-helper-live2d1npm install --save hexo-helper-live2d在站点配置文件或者主题配置文件添加以下内容1234567891011121314live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ model: use: live2d-widget-model-wanko display: position: right width: 150 height: 300 mobile: show: true安装需要的宠物文件1npm install &#123;packagename&#125;如效果图所示的宠物名为haruto， 则为 npm install live2d-widget-model-haruto,其他宠物包点击live2d-widget-models。如果需要修改宠物的位置，可以在display下添加1234# 水平位置hOffset: 0# 垂直位置vOffset: -20详细内容可参考hexo-helper-live2d点击红心特效和爆炸特效红心特效实现效果图：实现方法：在网址输入:http://7u2ss1.com1.z0.glb.clouddn.com/love.js然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\\themes\\next\\layout\\_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：12&lt;!-- 页面点击小红心 --&gt;&lt;script type=\"text/javascript\" src=\"/js/src/love.js\"&gt;&lt;/script&gt;爆炸特效实现效果图：实现方法：跟那个红心是差不多的，首先在themes/next/source/js/src里面建一个叫fireworks.js的文件，代码如下：1\"use strict\";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:\"linear\",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(\".fireworks\");if(canvasEl)&#123;var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;\"sidebar\"!==e.target.id&amp;&amp;\"toggle-sidebar\"!==e.target.id&amp;&amp;\"A\"!==e.target.nodeName&amp;&amp;\"IMG\"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)&#125;\"use strict\";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:\"linear\",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(\".fireworks\");if(canvasEl)&#123;var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;\"sidebar\"!==e.target.id&amp;&amp;\"toggle-sidebar\"!==e.target.id&amp;&amp;\"A\"!==e.target.nodeName&amp;&amp;\"IMG\"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)&#125;;打开themes/next/layout/_layout.swig,在&lt;/body&gt;上面写下如下代码：12345&#123;% if theme.fireworks %&#125; &lt;canvas class=\"fireworks\" style=\"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;\" &gt;&lt;/canvas&gt; &lt;script type=\"text/javascript\" src=\"//cdn.bootcss.com/animejs/2.2.0/anime.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/js/src/fireworks.js\"&gt;&lt;/script&gt;&#123;% endif %&#125;打开主题配置文件，在里面最后写下:12# Fireworksfireworks: true文章加密访问打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码：代码如下：12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt;然后在文章上写成类似这样：文章置顶打开 Hexo 站点下 node_modules/hexo-generator-index/lib/generator.js 文件。代码全部替换为：(next 5.1以后主题已自带此功能)12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;;打开文章添加top字段,设置数值，数值越大文章越靠前：1234567---layout: layouttitle: 标签1date: 2017-08-18 15:41:18tags: 标签1top: 100---域名更换1.申请域名我在万网购买的域名，地址：https://wanwang.aliyun.com/domain/com?spm=5176.8142029.388261.137.LoKzy7我这里是.cn结尾的域名，一年39大洋anoyer.cn2.解析域名添加如下的解析得到域名之后，到控制台进行解析控制台-&gt;域名与网站(万网)-&gt;域名-&gt;域名列表-&gt;解析在阿里云控制台，设置主机记录www，记录类型为A，记录值是IP103.210.21.11。其中103.210.21.11是Github Pages服务器指定的IP地址，访问该IP地址即表示访问Coding Pages。在阿里云控制台，设置主机记录@，记录类型为CNAME，记录值是anoyer.coding.me。表示将https://anoyer.cn这个主域名映射anoyer.coding.me如何知道知道的 Coding Pages IP在命令提示符中输入ping anoyer.cn成功之后:3.配置在博客的source文件夹下建立一个CNAME的文件内容写入你的域名信息，比如我这里是anoyer.cn发布到Coding即可4.Coding 配置进入Coding 项目的Pages服务，进入设置把刚解析的域名绑定上去。到这里就OK了。插入网易云音乐在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可我放在了layout/_macro/sidebar.swig 文件下1234&lt;div id=\"music163player\"&gt; &lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66\"&gt; &lt;/iframe&gt;&lt;/div&gt;阅读全文在文章中使用&lt; !--more--&gt; 手动进行截断这种方法可以根据文章的内容，自己在合适的位置添加 &lt; !--more--&gt; 标签，使用灵活，也是Hexo推荐的方法。在线联系​ 之前有访问过一些大佬的个人博客，里面有个在线联系功能，看着不错，所以也试着在自己的站点上接入了此功能。注册首先在DaoVoice注册个账号，点击-&gt;邀请码是2e5d695d。完成后，会得到一个app_id，后面会用到：修改head.swig修改/themes/next/layout/_partials/head.swig文件，添加内容如下：123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;) daovoice(&apos;init&apos;, &#123; app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot; &#125;); daovoice(&apos;update&apos;); &lt;/script&gt;&#123;% endif %&#125;位置贴图：主题配置文件在_config.yml文件中添加内容：123# Online contactdaovoice: truedaovoice_app_id: # 这里填你刚才获得的 app_id聊天窗口配置附上我的聊天窗口的颜色、位置等设置信息：至此，网页的在线联系功能已经完成，重新hexo g，hexo d上传GitHub后，页面上就能看到效果了。就比如说你现在往右下角看看(～￣▽￣)～ ，欢迎撩我（滑稽）。打赏因为next主题自带打赏功能，所以我们只需要在next的主题配置文件中找到如下代码,image文件夹是我在blog/source下面建立的文件夹，然后把你的微信及支付宝收钱码图片拉进去，修改名字为wechatreward.png和alipayreward.png123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /image/wechatreward.pngalipay: /image/alipayreward.png修改文章间分割线打开 themes/next/source/css/_common/components/post/post-eof.styl ,修改：12345678910.posts-expand &#123; .post-eof &#123; display: block; // margin: $post-eof-margin-top auto $post-eof-margin-bottom; width: 0%; //分割线长度 height: 0px; // 分割线高度 background: $grey-light; text-align: center; &#125;&#125;参考博客：1.https://www.jianshu.com/p/f054333ac9e62.https://blog.csdn.net/qsdsn/article/details/779466773.https://www.aisun.org/2017/10/hexo-next+dingzhi/","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://anoyer.cn/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://anoyer.cn/tags/Hexo/"},{"name":"Next","slug":"Next","permalink":"https://anoyer.cn/tags/Next/"}]},{"title":"置顶文章示例","slug":"article-top","date":"2018-11-22T03:35:22.000Z","updated":"2018-12-02T06:46:34.424Z","comments":true,"path":"article/article-top.html","link":"","permalink":"https://anoyer.cn/article/article-top.html","excerpt":"","text":"【前言】这是置顶文章的示例。在&lt;!-- more --&gt;标签前的内容都会显示在首页的文章列表的摘录中，内容不能太多，建议在一至两段后即可添加more标签。置顶文章的顶部参数设置img: 设置了首页列表左侧显示的图片，使用默认的置顶图片即可。如果需要替换，请进入博客根目录下的source\\img文件夹下进行替换。topimg: 设置是否显示右侧的置顶标志，true为显示，false为不显示。top: 设置置顶顺序，当top的值越大时，文章会显示在首页列表最上方。若无特殊需求，建议不要在其他文章中设置top参数，以免导致文章顺序排列错误。置顶文章的内容建议可将某篇特别的文章进行置顶展示或者专门用来编辑各种公告、通知、留言等内容。","categories":[],"tags":[]},{"title":"HDU-3374-String Problem(最大与最小表示法+kmp求循环节)","slug":"HDU - 3374 - String Problem(最大与最小表示法+kmp求循环节)","date":"2018-11-17T09:06:51.000Z","updated":"2018-12-04T13:34:45.686Z","comments":true,"path":"article/HDU - 3374 - String Problem(最大与最小表示法+kmp求循环节).html","link":"","permalink":"https://anoyer.cn/article/HDU - 3374 - String Problem(最大与最小表示法+kmp求循环节).html","excerpt":"","text":"博主链接HDU - 3374 - String Problem题意：给你一个字符串，问这个字符串经过移动后的字典序最小的字符串的首字符位置和字典序最大的字符串的首字符的位置，和能出现多少次最小字典序的字符串和最大字典序的字符串题解：利用最小表示法与最大表示法O(n)复杂度求出最小字典序和最大字典序串出现位置，然后利用kmp求出next，利用next数组性质求出循环节次数，因为最小和最大字典序串出现次数等于循环节次数（这个关系可以脑补下）代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=1e6+20;const int mod=1e9+7;char s[maxn];int len;int nex[maxn];void GetNex()&#123; memset(nex,0,sizeof(nex)); int j=-1; for(int i=0;s[i];i++)&#123; while(s[i]!=s[j+1]&amp;&amp;j!=-1)j=nex[j]; if(s[i]==s[j+1]&amp;&amp;i!=0)j++; nex[i]=j; &#125;&#125;int GetMin()&#123; int i=0,j=1,k=0; while(i&lt;len&amp;&amp;j&lt;len&amp;&amp;k&lt;len)&#123; int t=s[(i+k)%len]-s[(j+k)%len]; if(t==0)k++; else&#123; if(t&gt;0)i=i+k+1; else j=j+k+1; if(i==j)j++; k=0; &#125; &#125; return min(i,j);&#125;int GetMax()&#123; int i=0,j=1,k=0; while(i&lt;len&amp;&amp;j&lt;len&amp;&amp;k&lt;len)&#123; int t=s[(i+k)%len]-s[(j+k)%len]; if(t==0)k++; else&#123; if(t&gt;0)j=j+k+1; else i=i+k+1; if(i==j)j++; k=0; &#125; &#125; return i&lt;j?i:j;&#125;int main()&#123; while(scanf(\"%s\",s)!=EOF)&#123; len=strlen(s); int sum=0; int mi=GetMin();//获取最小表示下标 int mx=GetMax();//获取最大表示下标 GetNex(); if(len%(len-nex[len-1]-1)==0)sum=len/(len-nex[len-1]-1); else sum=1; printf(\"%d %d %d %d\\n\",mi+1,sum,mx+1,sum); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"最小表示法与最大表示法","slug":"最小表示法与最大表示法(O(n))","date":"2018-11-17T09:03:50.000Z","updated":"2018-12-02T06:36:40.425Z","comments":true,"path":"article/最小表示法与最大表示法(O(n)).html","link":"","permalink":"https://anoyer.cn/article/最小表示法与最大表示法(O(n)).html","excerpt":"","text":"博主CSDN最小表示法伪代码：最小表示法的算法思路是维护两个指针i,j。令i=0,j=1如果S[i] &gt; S[j] i=j, j=i+1如果S[i] &lt; S[j] j++如果S[i]==S[j] 设指针k，分别从i和j位置向下比较，直到S[i] != S[j]​ 如果S[i+k] &gt; S[j+k] i=i+k​ 否则j++返回i和j的小者模版：123456789101112131415161718192021222324252627282930313233343536373839#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn=1e6+7;const int mod=1e9+7;char s[maxn];int GetMin()&#123; int i=0,j=1,k=0; while(i&lt;len&amp;&amp;j&lt;len&amp;&amp;k&lt;len)&#123; int t=s[(i+k)%len]-s[(j+k)%len]; if(t==0)k++; else&#123; if(t&gt;0)i=i+k+1; else j=j+k+1; if(i==j)j++; k=0; &#125; &#125; return min(i,j);&#125;int GetMax()&#123; int i=0,j=1,k=0; while(i&lt;len&amp;&amp;j&lt;len&amp;&amp;k&lt;len)&#123; int t=s[(i+k)%len]-s[(j+k)%len]; if(t==0)k++; else&#123; if(t&gt;0)j=j+k+1; else i=i+k+1; if(i==j)j++; k=0; &#125; &#125; return i&lt;j?i:j;&#125;int main()&#123; scanf(\"%s\",s); return 0;&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"河南农业大学热身赛标程","slug":"河南农业大学热身赛标程","date":"2018-11-13T05:13:47.000Z","updated":"2019-01-01T13:04:00.355Z","comments":true,"path":"article/河南农业大学热身赛标程.html","link":"","permalink":"https://anoyer.cn/article/河南农业大学热身赛标程.html","excerpt":"","text":"河南农业大学热身赛标程博主CSDNA.宅宅的排位赛1234567891011121314151617181920212223#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 1e3 + 10;const int mod = 1e9 + 7;int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; int a, suma = 0, sumb = 0; for (int i = 0; i &lt;= 13; i++)&#123; //suma记录A1~N1的和 scanf(\"%d\", &amp;a); suma += a; &#125; for (int i = 0; i &lt;= 13; i++)&#123; //sumb记录A2~N2的和 scanf(\"%d\", &amp;a); sumb += a; &#125; printf(\"%d\\n\", suma - sumb); &#125; return 0;&#125;B.冒泡排序12345678910111213141516171819202122232425#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;int a[120];int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; int n, min_ = 9999,id=0; scanf(\"%d\", &amp;n); for (int i = 0; i &lt; n; i++)scanf(\"%d\", &amp;a[i]); //sort(a, a + n);//解法一：调用库函数快排函数 //解法二：手撸冒泡排序 for (int i = 0; i &lt; n; i++)&#123; min_ =a[i]; id = i; for (int j = i; j &lt; n; j++)&#123; if (a[j] &lt;= min_)min_ = a[j], id = j; &#125; swap(a[i], a[id]); //把为排序的最小值换到当前i位 &#125; for (int i = 0; i &lt; n; i++)printf(\"%d\\n\", a[i]); &#125; return 0;&#125;C.小刘数字母123456789101112131415161718192021#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt; //万能头文件using namespace std;char s[10050];int main()&#123; int t; char ch; scanf(\"%d\",&amp;t); while(t--)&#123; scanf(\"%s\",s); getchar(); //接收空格 scanf(\"%c\",&amp;ch); int cnt=0; //记录出现次数 int len=strlen(s); //求出输入串长度 for(int i=0;i&lt;len;i++)&#123; if(s[i]==ch)cnt++; //如果ch出现就cnt++ &#125; printf(\"%d\\n\",cnt); &#125; return 0;&#125;D.HH的LCM12345678910111213141516171819202122232425#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int t; scanf(\"%d\",&amp;t); //GCD解法 while(t--)&#123; int a,b; scanf(\"%d%d\",&amp;a,&amp;b); printf(\"%d\\n\",a*b/__gcd(a,b)); //a,b的最小公倍数=a*b/(a,b的最大公因数) &#125; // 暴力解法 /*while(t--)&#123; int a,b; scanf(\"%d%d\",&amp;a,&amp;b); for(int i=1;i&lt;=a*b;i++)&#123; //a*b肯定能被整除a,b，所以LCM不大于a*b if(i%a==0&amp;&amp;i%b==0)&#123; //第一个能被整除的a,b的便是他们的最小公倍数 printf(\"%d\\n\",i); break; &#125; &#125; &#125;*/ return 0;&#125;E.斐波那契数123456789101112131415161718192021222324252627282930#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 1e3 + 10;const int mod = 1e9 + 7;int Fib[maxn];int main()&#123; int cnt = 1; Fib[0] = 0; Fib[1] = 1; for (int i = 2; Fib[i - 1] &lt;= 100000; i++, cnt++)&#123; //暴力打表求出所有小于100000的斐波那契数 Fib[i] = Fib[i - 1] + Fib[i - 2]; &#125; int t; scanf(\"%d\", &amp;t); while (t--)&#123; int n, ans = 0; //ans用来记录数量 scanf(\"%d\", &amp;n); for (int i = 26; i &gt;= 1; i--)&#123; //对于n从最大的Fib数列往前扫， if (n &gt;= Fib[i])n -= Fib[i], ans++; //如果发现不大于n的Fib数，就用n-Fib[i],ans++ &#125; /* 贪心证明：因为对于任何n,比n小的且最大的Fib[i]一定满足 Fib[i]&lt;n&lt;2*Fib[i] 因为 Fib[i-1]+Fib[i]=Fib[i+1]&lt;2*Fib[i] */ printf(\"%d\\n\", ans); &#125; return 0;&#125;F.辉辉学长爱喝水123456789101112131415161718#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 1e3 + 10;const int mod = 1e9 + 7;int main()&#123; double n, m; scanf(\"%lf%lf\", &amp;n, &amp;m); int a = ceil(n / (m * 2)); if (n == 0)printf(\"0\\n\"); // 需要多少步 向上取整 else if (m == 0)printf(\"No answer!\\n\"); else if(n-a*m&lt;=0)&#123; printf(\"1\\n\"); &#125; else printf(\"%d\\n\", a + 1); return 0;&#125;G.打麻将123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;bool ok=0; //胡牌标记bool vis[20]; //标记这张牌有没有被使用char a[20];int d[20][5];int ttt[11];void dfs(int cur,char *str,int cnt)&#123; if(cur&gt;12)return; //因为组成刻子和顺子的牌需要12张，如果超过了就return if(cur==12&amp;&amp;cnt==4)&#123; //如果刻子和顺子用了12张牌且刻子和顺子数一共4，则进一步判断另外两张牌是不是对子 int a=0,b=0; for(int i=1;i&lt;=14;i++)if(!vis[i])&#123;vis[i]=true,a=i;break;&#125; //遍历出剩余第一张牌 for(int i=1;i&lt;=14;i++)if(!vis[i])&#123;vis[i]=true,b=i;break;&#125; //遍历出剩余第二张牌 if(str[a]==str[b]&amp;&amp;(str[a]!=' '&amp;&amp;str[b]!=' ')) //如果str[a]等于str[b]能胡牌 ，ok=true ok=true; vis[a]=vis[b]=false; return ; &#125; for(int i=1;i&lt;=12&amp;&amp;!ok;i++) //dfs遍历这14张牌所有组合情况 if(!vis[i]) for(int j=i+1;j&lt;=13&amp;&amp;!ok;j++) if(!vis[j]) for(int k=j+1;k&lt;=14&amp;&amp;!ok;k++)&#123; //挑3个牌str[i],str[j],str[k] if(!vis[k]) if((str[i]==str[j]&amp;&amp;str[j]==str[k])||(str[i]+1==str[j]&amp;&amp;str[j]+1==str[k]))&#123; //看能否成顺子或刻子 vis[i]=vis[j]=vis[k]=true; //把选的牌标记为已用 dfs(cur+3,str,cnt+1);//成了的话，cur+3，cur代表选的牌数，cnt+1，cnt代表现在顺子跟刻子的总和 vis[i]=vis[j]=vis[k]=false; //把牌标记为未用 &#125; &#125;&#125;int main()&#123; int t; scanf(\"%d\",&amp;t); while(t--)&#123; scanf(\"%s\",&amp;a[1]); //cnt++; int tt_=0; ok=false; memset(ttt,0,sizeof(ttt)); for(int i=1;i&lt;=14;i++)&#123; //判断是否是合法牌 ttt[a[i]-'0']++; if(ttt[a[i]-'0']&gt;4)&#123; printf(\"The data is error!\\n\"); tt_=1; break; &#125; &#125; if(tt_)continue; sort(a+1,a+15); //把牌从小到大排好序 dfs(0,a,0); if(!ok)printf(\"NO\\n\"); else printf(\"YES\\n\"); &#125; return 0;&#125;","categories":[{"name":"农大训练赛题解","slug":"农大训练赛题解","permalink":"https://anoyer.cn/categories/农大训练赛题解/"}],"tags":[{"name":"河南农业大学训练赛题解","slug":"河南农业大学训练赛题解","permalink":"https://anoyer.cn/tags/河南农业大学训练赛题解/"}]},{"title":"河南农业大学训练赛二标程","slug":"河南农业大学测试赛二标程","date":"2018-11-10T14:01:51.000Z","updated":"2019-01-01T13:04:30.398Z","comments":true,"path":"article/河南农业大学测试赛二标程.html","link":"","permalink":"https://anoyer.cn/article/河南农业大学测试赛二标程.html","excerpt":"","text":"河南农业大学测试赛二标程博主CSDNA.判断闰年1234567891011121314#include&lt;cstdio&gt; int main()&#123; int t; scanf(\"%d\",&amp;t); while(t--)&#123; int n; scanf(\"%d\",&amp;n); if((n%4==0&amp;&amp;n%100!=0)||(n%400==0)) printf(\"YES\\n\"); else printf(\"NO\\n\"); &#125; return 0;&#125;B.复读机1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int INF = 0x3f3f3f3f;int main()&#123;#ifdef LOCAL freopen(\"C:/input.txt\", \"r\", stdin);#endif int T; cin &gt;&gt; T; while (T--) &#123; int N; cin &gt;&gt; N; char c, last = 0; getchar(); for (int i = 0; i &lt; N; i++) &#123; c = getchar(); if (c != last) putchar(c), last = c; &#125; cout &lt;&lt; endl; &#125; return 0;&#125;C.hui姐识数1234567891011121314151617181920212223242526#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e3 + 7;char Num[20][100] = &#123; \"Ling\", \"Yi\", \"Er\", \"San\", \"Si\", \"Wu\", \"Liu\", \"Qi\", \"Ba\", \"Jiu\" &#125;;char Unit[10][100] = &#123; \"\", \"Shi\", \"Bai\", \"Qian\",\"Wan\" &#125;;int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; int n,k=4,flag=0,flag0=0; scanf(\"%d\", &amp;n); if (n == 0)&#123; printf(\"%s\\n\", Num[0]); continue; &#125; for (int i = 10000; k&gt;=0; i /= 10,k--)&#123; if (n / i)&#123; if (flag&amp;&amp;flag0)&#123; printf(\"%s\", Num[0]); flag = 0; &#125; printf(\"%s%s\", Num[n / i], Unit[k]); n %= i; flag =1; flag0 = 0; &#125; else if(flag)flag0 = 1; &#125; puts(\"\"); &#125;&#125;","categories":[{"name":"农大训练赛题解","slug":"农大训练赛题解","permalink":"https://anoyer.cn/categories/农大训练赛题解/"}],"tags":[{"name":"河南农业大学训练赛题解","slug":"河南农业大学训练赛题解","permalink":"https://anoyer.cn/tags/河南农业大学训练赛题解/"}]},{"title":"河南农业大学训练赛标程","slug":"河南农业大学测试赛标程","date":"2018-11-08T14:32:27.000Z","updated":"2019-01-01T13:04:18.583Z","comments":true,"path":"article/河南农业大学测试赛标程.html","link":"","permalink":"https://anoyer.cn/article/河南农业大学测试赛标程.html","excerpt":"","text":"河南农业大学测试赛标程博主CSDNA.最大最小值12345678910111213141516171819202122#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 1e9 + 10;const int mod = 1e9 + 7;int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; int n; scanf(\"%d\", &amp;n); ll a, min_ = maxn, max_ = -maxn; for (int i = 0; i &lt; n; i++)&#123; scanf(\"%lld\", &amp;a); if (a&gt;max_)max_ = a; if (a &lt; min_)min_ = a; &#125; printf(\"%lld %lld\\n\", max_, min_); &#125; return 0;&#125;B.找众数12345678910111213141516171819202122232425262728#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 1e9 + 10;const int mod = 1e9 + 7;int num[120];int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; int n,a; memset(num, 0, sizeof(num)); scanf(\"%d\", &amp;n); for (int i = 0; i &lt; n; i++)&#123; scanf(\"%d\", &amp;a); num[a]++; &#125; int b = 0; a = 0; for (int i = 0; i &lt;= 100; i++)&#123; if (num[i] &gt;= a)b = i,a=num[i]; &#125; printf(\"%d\\n\", b); &#125; return 0;&#125;C.买！买！买！123456789101112131415161718192021222324252627#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 1e3 + 10;const int mod = 1e9 + 7;int a[] = &#123; 15, 25&#125;;int dp[maxn];int main()&#123; int t; scanf(\"%d\", &amp;t); while (t--)&#123; int n; scanf(\"%d\", &amp;n); memset(dp, 0, sizeof(dp)); dp[0] = 1; for (int i = 10; i &lt;= n * 10; i+=5)&#123; for (int j = 0; j &lt; 2; j++)&#123; if (i &gt;= a[j])&#123; dp[i] += dp[i - a[j]]; &#125; &#125; &#125; printf(\"%d\\n\", dp[n * 10]); &#125; return 0;&#125;","categories":[{"name":"农大训练赛题解","slug":"农大训练赛题解","permalink":"https://anoyer.cn/categories/农大训练赛题解/"}],"tags":[{"name":"河南农业大学训练赛题解","slug":"河南农业大学训练赛题解","permalink":"https://anoyer.cn/tags/河南农业大学训练赛题解/"}]},{"title":"线性基模板","slug":"线性基模板","date":"2018-10-20T14:52:30.000Z","updated":"2018-12-05T06:55:54.250Z","comments":true,"path":"article/线性基模板.html","link":"","permalink":"https://anoyer.cn/article/线性基模板.html","excerpt":"","text":"博主CSDN12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long int ll;const int maxn=1e5+7;const int mod=1e9+7;struct Linear_Basis&#123; ll b[63],nb[63],tot; //b为线性基 nb用来求第K小异或值 tot为nb元素个数 bool flag=false; void Init()&#123; //初始化 tot=0; flag=false; memset(b,0,sizeof(b)); memset(nb,0,sizeof(nb)); &#125; void Ins(ll x)&#123; //插入 for(int i=62;i&gt;=0;i--)&#123; if(x&amp;(1ll&lt;&lt;i))&#123; if(!b[i])&#123; b[i]=x; return; &#125; x^=b[i]; &#125; &#125; flag=true; return; &#125; bool Fin(ll x)&#123; //验证存在性 if(x==0&amp;&amp;b[0])return 1; for(int i=62;i&gt;=1;i--)&#123; int j=i-1; if(x&amp;(1&lt;&lt;j))&#123; x^=b[i]; if(!x)return 1; &#125; &#125; return 0; &#125; ll Max(ll x)&#123; //求最大值 ll res=x; for(int i=62;i&gt;=0;i--)&#123; res=max(res,res^b[i]); &#125; return res; &#125; ll Min(ll x)&#123; //求最小值 ll res=x; for(int i=0;i&lt;=62;i++)&#123; if(b[i])res^=b[i]; &#125; return res; &#125; ll Rebuild()&#123; //第K大 for(int i=62;i&gt;=0;i--)&#123; if(b[i]==0)continue; for(int j=i-1;j&gt;=0;j--)&#123; if(b[j]==0)continue; if(b[i]&amp;(1ll&lt;&lt;j))b[i]^=b[j]; &#125; &#125; for(int i=0;i&lt;=62;i++)&#123; if(b[i])nb[tot++]=b[i]; &#125; &#125; ll Kth_Max(ll k)&#123; if(flag)k--; //??? ll res=0; if(k==0)return 0; if(k&gt;=(1ll&lt;&lt;tot))return -1; for(int i=62;i&gt;=0;i--)&#123; if(k&amp;(1ll&lt;&lt;i))res^=nb[i]; &#125; return res; &#125;&#125;LB;void merge(Linear_Basis &amp;a,Linear_Basis &amp;b)&#123;//a和b都变成a+b for(int i=31;i&gt;=1;i--)&#123; if(b.b[i]==0)continue; a.Ins(b.b[i]); &#125; b=a;&#125;int main()&#123; int n; scanf(\"%d\",&amp;n); return 0;&#125;","categories":[{"name":"数论模板","slug":"数论模板","permalink":"https://anoyer.cn/categories/数论模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"Codeforces-Round-515-(Div.3)--C.BooksQueries","slug":"Codeforces-Round-515-Div-3-C-Books-Queries","date":"2018-10-12T17:10:33.000Z","updated":"2018-12-02T06:43:12.061Z","comments":true,"path":"article/Codeforces-Round-515-Div-3-C-Books-Queries.html","link":"","permalink":"https://anoyer.cn/article/Codeforces-Round-515-Div-3-C-Books-Queries.html","excerpt":"","text":"博主链接题目题意：给Q次操作，可以往书架右边边缘加书或者左边边缘加书或者查询一本书里边缘的最短距离题解：用两个数组记录一本书是第几本放右边或左边的书，这样就可以保证如果这本书是当时通过放左边进入书架则距离为 ==min(L + b[id]-1,R - b[id])== ，如果通过右边则是 ==min(R + a[id]-1, L - a[id])== ，可以自己脑补下代码：123456789101112131415161718192021222324252627282930313233343536373839#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define ll long long intconst ll LINF=0x3f3f3f3f3f3f3f;#define MOD(x) (x)%modusing namespace std;const int maxn = 1e6 + 10;const int mod = 1e9 + 7;int a[maxn],b[maxn];int main(int argc, char *argv[]) &#123; int q,d; char ch[10]; int id,L=0, R=0; int cnt = 0; scanf(\"%d\", &amp;q); while (q--) &#123; cin &gt;&gt; ch &gt;&gt; id; if (ch[0] == 'L') &#123; ++cnt; a[id] = ++L; &#125; else if (ch[0] == 'R') &#123; ++cnt; b[id] = ++R; &#125; else &#123; if (a[id] == 0) &#123; printf(\"%d\\n\", min(L + b[id]-1,R - b[id])); &#125; else &#123; printf(\"%d\\n\", min(R + a[id]-1, L - a[id])); &#125; &#125; &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"https://anoyer.cn/tags/codeforces/"},{"name":"思维题","slug":"思维题","permalink":"https://anoyer.cn/tags/思维题/"}]},{"title":"Codeforces-Round-513-D-Social-Circles","slug":"Codeforces-Round-513-C-Social-Circles","date":"2018-10-04T11:12:27.000Z","updated":"2018-12-02T06:43:04.400Z","comments":true,"path":"article/Codeforces-Round-513-C-Social-Circles.html","link":"","permalink":"https://anoyer.cn/article/Codeforces-Round-513-C-Social-Circles.html","excerpt":"","text":"博主博客题目链接题意：有n个人，及每个人坐位置时左右需要有多少空椅子，求所有人入座至少需要多少椅子题解：利用贪心，将所有人的右边需要空的椅子数存在a数组里，右边需要空的椅子数存在b数组里，然后排序，将对应下标的max（a[i],b[i]）加起来再加上n，就是答案，因为大的和大的一合一起可以保证省去椅子最大123456789101112131415161718192021222324#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 1e5 + 10;const int mod = 1e9 + 7;typedef long long ll;int a[maxn], b[maxn];int main(int argc, char *argv[]) &#123; int n; scanf(\"%d\", &amp;n); for (int i = 0; i &lt; n; i++)scanf(\"%d%d\", &amp;a[i], &amp;b[i]); sort(a, a + n); sort(b, b + n); ll ans = 0; for (int i = n - 1; i &gt;= 0; i--) &#123; ans += max(a[i], b[i]); &#125; printf(\"%lld\\n\", ans+n); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"https://anoyer.cn/tags/codeforces/"},{"name":"思维题","slug":"思维题","permalink":"https://anoyer.cn/tags/思维题/"}]},{"title":"表达式求值（逆波兰）","slug":"表达式求值","date":"2018-10-03T16:19:05.000Z","updated":"2018-12-02T06:40:10.482Z","comments":true,"path":"article/表达式求值.html","link":"","permalink":"https://anoyer.cn/article/表达式求值.html","excerpt":"","text":"博主CSDN123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e3 + 10;typedef long long ll;char s[maxn];int cmp(char ch)&#123; switch (ch)&#123; case '+': case '-':return 1; case '*': case '/':return 2; default:return 0; &#125;&#125;string ss = \"\";void ToSuffix()&#123; stack&lt;char&gt;Se; double ans = 0; Se.push('#'); int len = strlen(s); for (int i = 0; i&lt;len; i++)&#123; if (s[i] &gt;= '0'&amp;&amp;s[i] &lt;= '9')&#123; ss += s[i++]; while (s[i] &gt;= '0'&amp;&amp;s[i] &lt;= '9')&#123; ss += s[i++]; &#125; ss += ' '; &#125; if (s[i] == '(')Se.push(s[i]); else if (s[i] == ')')&#123; while (Se.top() != '(')&#123; ss += Se.top(); ss += ' '; Se.pop(); &#125; Se.pop(); &#125; else if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/')&#123; while (cmp(Se.top()) &gt;= cmp(s[i]))&#123; ss += Se.top(); ss += ' '; Se.pop(); &#125; Se.push(s[i]); &#125; &#125; while (Se.top() != '#')&#123; ss += Se.top(); ss += ' '; Se.pop(); &#125; Se.pop();&#125;double Solve()&#123; stack&lt;double&gt;num; int i = 0; double x = 0, y = 0,ans=0; for (int i = 0; ss[i]; i++)&#123; if (ss[i] &gt;= '0'&amp;&amp;ss[i] &lt;= '9')&#123; ans = ss[i++] - '0'; while (ss[i] &gt;= '0'&amp;&amp;ss[i] &lt;= '9')&#123; ans =ans*10+ ss[i++]-'0'; &#125; num.push(ans); ans = 0; &#125; else if (ss[i] == ' '); else&#123; x = num.top(); num.pop(); y = num.top(); num.pop(); if (ss[i] == '+')num.push(x + y); else if (ss[i] == '-')num.push(y - x); else if (ss[i] == '*')num.push(x * y); else if (ss[i] == '/')num.push(y / x); &#125; &#125; x = num.top(); num.pop(); return x;&#125;int main()&#123; freopen(\"C:/Users/Administrator/Desktop/input.txt\", \"r\", stdin); int t; scanf(\"%d\", &amp;t); while (t--)&#123; scanf(\"%s\", s); ss = \"\"; ToSuffix(); printf(\"%.2f\\n\",Solve()); &#125; return 0;&#125;","categories":[{"name":"数据结构模板","slug":"数据结构模板","permalink":"https://anoyer.cn/categories/数据结构模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"},{"name":"逆波兰","slug":"逆波兰","permalink":"https://anoyer.cn/tags/逆波兰/"}]},{"title":"线段树模板","slug":"线段树模板","date":"2018-10-03T16:19:05.000Z","updated":"2018-12-02T06:39:29.272Z","comments":true,"path":"article/线段树模板.html","link":"","permalink":"https://anoyer.cn/article/线段树模板.html","excerpt":"","text":"博主CSDN12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;int n,p,a,b,m,x,y,ans;struct node&#123; int l,r,w,f;&#125;tree[400001];inline void build(int k,int ll,int rr) &#123;//建树 tree[k].l=ll,tree[k].r=rr; if(tree[k].l==tree[k].r)&#123; scanf(\"%d\",&amp;tree[k].w); return; &#125; int m=(ll+rr)/2; build(k*2,ll,m); build(k*2+1,m+1,rr); tree[k].w=tree[k*2].w+tree[k*2+1].w;&#125;inline void down(int k) &#123;//标记下传 tree[k*2].f+=tree[k].f; tree[k*2+1].f+=tree[k].f; tree[k*2].w+=tree[k].f*(tree[k*2].r-tree[k*2].l+1); tree[k*2+1].w+=tree[k].f*(tree[k*2+1].r-tree[k*2+1].l+1); tree[k].f=0;&#125;inline void ask_point(int k)&#123;//单点查询 if(tree[k].l==tree[k].r)&#123; ans=tree[k].w; return ; &#125; if(tree[k].f) down(k); int m=(tree[k].l+tree[k].r)/2; if(x&lt;=m) ask_point(k*2); else ask_point(k*2+1);&#125;inline void change_point(int k) &#123;//单点修改 if(tree[k].l==tree[k].r)&#123; tree[k].w+=y; return; &#125; if(tree[k].f) down(k); int m=(tree[k].l+tree[k].r)/2; if(x&lt;=m) change_point(k*2); else change_point(k*2+1); tree[k].w=tree[k*2].w+tree[k*2+1].w; &#125;inline void ask_interval(int k) &#123;//区间查询 if(tree[k].l&gt;=a&amp;&amp;tree[k].r&lt;=b) &#123; ans+=tree[k].w; return; &#125; if(tree[k].f) down(k); int m=(tree[k].l+tree[k].r)/2; if(a&lt;=m) ask_interval(k*2); if(b&gt;m) ask_interval(k*2+1);&#125;inline void change_interval(int k) &#123;//区间修改 if(tree[k].l&gt;=a&amp;&amp;tree[k].r&lt;=b)&#123; tree[k].w+=(tree[k].r-tree[k].l+1)*y; tree[k].f+=y; return; &#125; if(tree[k].f) down(k); int m=(tree[k].l+tree[k].r)/2; if(a&lt;=m) change_interval(k*2); if(b&gt;m) change_interval(k*2+1); tree[k].w=tree[k*2].w+tree[k*2+1].w;&#125;int main()&#123; scanf(\"%d\",&amp;n);//n个节点 build(1,1,n);//建树 scanf(\"%d\",&amp;m);//m种操作 for(int i=1;i&lt;=m;i++)&#123; scanf(\"%d\",&amp;p); ans=0; if(p==1)&#123; scanf(\"%d\",&amp;x); ask_point(1);//单点查询,输出第x个数 printf(\"%d\",ans); &#125; else if(p==2)&#123; scanf(\"%d%d\",&amp;x,&amp;y); change_point(1);//单点修改 &#125; else if(p==3)&#123; scanf(\"%d%d\",&amp;a,&amp;b);//区间查询 ask_interval(1); printf(\"%d\\n\",ans); &#125; else&#123; scanf(\"%d%d%d\",&amp;a,&amp;b,&amp;y);//区间修改 change_interval(1); &#125; &#125;&#125;","categories":[{"name":"数据结构模板","slug":"数据结构模板","permalink":"https://anoyer.cn/categories/数据结构模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"对数器模板","slug":"对数器模版","date":"2018-10-03T16:19:05.000Z","updated":"2018-12-02T06:36:09.934Z","comments":true,"path":"article/对数器模版.html","link":"","permalink":"https://anoyer.cn/article/对数器模版.html","excerpt":"","text":"博主CSDN123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687//需要建立主路径 和主路径下sample/ 保证程序文件存在#include &lt;bits/stdc++.h&gt;using namespace std;string mpat(\"D:/dsq/\"); //主路径 注意末尾跟'/'!!!! linuxpwd查看当前路径string an(\"A\"), bn(\"B\"); //程序名字int brek = 5; //几个错误停止 -1不停止int cmpt = 1; //编译模式void exec(const string &amp;cmd, string &amp;res)&#123; char buf[1024]; FILE *fp = _popen(cmd.c_str(), \"r\"); //linux下改为popen while (fgets(buf, 1024, fp)) res.append(buf); _pclose(fp); //linux下改为pclose&#125;void wrfile(const string &amp;path, stringstream &amp;ss)&#123; string str; FILE *fp = fopen(path.c_str(), \"wb\"); while (getline(ss, str)) fprintf(fp, \"%s\\r\\n\", str.c_str()); fclose(fp);&#125;long long d_rand(long long l, long long r)&#123; int k = rand() % 4; long long t = rand(); for (int i = 0; i &lt; k; i++) t = t &lt;&lt; 16 | rand(); return l + t % (r - l + 1);&#125;double f_rand(double l, double r)&#123; double t = rand() / 32767.0; return l + t * (r - l);&#125;char c_rand(const string &amp;ch)&#123; return ch[rand() % ch.size()];&#125;void sample(stringstream &amp;sout) //样例生成&#123;&#125;int main()&#123; srand(time(NULL)); rand(); if (cmpt) //编译功能 &#123; system((\"g++ \" + mpat + an + \".cpp -o \" + mpat + an + \".exe -std=c++11\").c_str()); //C++11支持 system((\"g++ \" + mpat + bn + \".cpp -o \" + mpat + bn + \".exe -std=c++11\").c_str()); &#125; string num, aout, bout, spat = mpat + \"sample/\"; //样例生成子路径 stringstream ss; int cnt = 0, wa = 0; for (int i = 1; i &lt;= brek; i++) &#123; ss.clear(), ss &lt;&lt; i, ss &gt;&gt; num; remove((spat + num + \"samp.txt\").c_str()); remove((spat + num + \"ans\" + an + \".txt\").c_str()); remove((spat + num + \"ans\" + bn + \".txt\").c_str()); &#125; while (wa &lt; brek &amp;&amp; cnt &lt; 1e4) //几个错误停止 极限1W个样例 &#123; ss.str(\"\"), ss.clear(), ss &lt;&lt; wa + 1, ss &gt;&gt; num; aout.clear(), bout.clear(), ss.clear(); sample(ss); wrfile(spat + num + \"samp.txt\", ss); cout &lt;&lt; ++cnt; exec(mpat + an + \".exe &lt; \" + spat + num + \"samp.txt\", aout); exec(mpat + bn + \".exe &lt; \" + spat + num + \"samp.txt\", bout); if (aout != bout) &#123; ss.clear(), ss.str(aout); wrfile(spat + num + \"ans\" + an + \".txt\", ss); ss.clear(), ss.str(bout); wrfile(spat + num + \"ans\" + bn + \".txt\", ss); ++wa; &#125; cout &lt;&lt; \"\\t\" &lt;&lt; wa &lt;&lt; endl; &#125; return 0;&#125;","categories":[{"name":"对数器","slug":"对数器","permalink":"https://anoyer.cn/categories/对数器/"}],"tags":[]},{"title":"后缀自动机模板","slug":"后缀自动机模板","date":"2018-10-03T08:56:15.000Z","updated":"2018-12-02T06:35:34.875Z","comments":true,"path":"article/后缀自动机模板.html","link":"","permalink":"https://anoyer.cn/article/后缀自动机模板.html","excerpt":"","text":"博主CSDNSAM常解决的问题：问题1.给定文本T，询问格式如下：给定字符串P，问P是否是T的子串。问题2.给定字符串S，问它有多少不同的子串。（模板中的GetSubNum函数）问题3.给定字符串S，求其所有不同子串的总长度。问题4.给定字符串S，一系列询问——给出整数K_i，计算S的所有子串排序后的第K_i个。问题5.给定字符串S，找到和它循环同构的字典序最小字符串。问题.给定文本T，询问格式如下：给定字符串P，希望找出P作为子串在文本T中出现了多少次（出现区间可以相交）。问题6.给定文本T，询问格式如下：给定字符串P，求P在文本中第一次出现的位置。问题7.给定文本T，询问格式如下：给定字符串P，要求给出P在T中的所有出现位置（出现区间可以相交）。问题8.给定两个字符串S和T。要求找出它们的最长公共子串，即一个字符串X，它同时是S和T的子串。模板1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define maxc 28using namespace std;const int maxn = 1e6 + 5;const int mod = 1e9 + 7;typedef long long ll;int len[maxn * 2], //最长子串的长度(该节点字串数量=len[x]-len[link[x]])link[maxn * 2], //后缀链接(最短串前部减少一个字符所到达的状态)cnt[maxn * 2], //被后缀连接的数nex[maxn * 2][maxc], //状态转移(尾部加一个字符的下一个状态)(图)idx, //节点编号last; //最后节点ll epos[maxn * 2]; // enpos数（该状态子串出现数量）char str[maxn];ll a[maxn]; //长度为i的子串出现最大次数void Iint() &#123; //初始化 last = idx = 1; //1表示root起始点 空集 link[1] = len[1] = 0;&#125;//SAM建图void Extend(int c) &#123; //插入字符，为字符ascll码值 int x = ++idx; //创建一个新节点x; len[x] = len[last] + 1; // 长度等于最后一个节点+1 epos[x] = 1; //接受节点子串除后缀连接还需加一 int p; //第一个有C转移的节点; for (p = last; p &amp;&amp; !nex[p][c]; p = link[p])nex[p][c] = x;//沿着后缀连接 将所有没有字符c转移的节点直接指向新节点 if (!p)link[x] = 1, cnt[1]++; //全部都没有c的转移 直接将新节点后缀连接到起点 else &#123; int q = nex[p][c]; //p通过c转移到的节点 if (len[p] + 1 == len[q]) //pq是连续的 link[x] = q, cnt[q]++; //将新节点后缀连接指向q即可,q节点的被后缀连接数+1 else &#123; int nq = ++idx; //不连续 需要复制一份q节点 len[nq] = len[p] + 1; //令nq与p连续 link[nq] = link[q]; //因后面link[q]改变此处不加cnt memcpy(nex[nq], nex[q], sizeof(nex[q])); //复制q的信息给nq for (; p&amp;&amp;nex[p][c] == q; p = link[p]) nex[p][c] = nq; //沿着后缀连接 将所有通过c转移为q的改为nq link[q] = link[x] = nq; //将x和q后缀连接改为nq cnt[nq] += 2; // nq增加两个后缀连接 &#125; &#125; last = x; //更新最后处理的节点&#125;void GetNpos() &#123; //求npos数，即该节点字串出现次数 queue&lt;int&gt;q; for (int i = 1; i &lt;= idx; i++) if (!cnt[i])q.push(i); //将所有没被后缀连接指向的节点入队 while (!q.empty()) &#123; int x = q.front(); q.pop(); epos[link[x]] += epos[x]; //子串数量等于所有后缀连接指向该节点的子串数量和+是否为接受节点 if (--cnt[link[x]] == 0)q.push(link[x]); //当所有后缀连接指向该节点的处理完毕后再入队 &#125;&#125;void GetSubNum() &#123; //求不相同字串数量 ll ans = 0; for (int i = 2; i &lt;= idx; i++)ans += len[i] - len[link[i]]; //一状态子串数量等于len[i]-len[link[i]] printf(\"%lld\\n\",ans);&#125;void GetSubMax() &#123; //求出所有长度为k的子串中出现次数最多的子串出现次数 GetNpos(); int n = strlen(str); for (int i = 1; i &lt;= idx; i++)a[len[i]] = max(a[len[i]], epos[i]); //长度≤k的子串中出现次数最多的子串出现次数的最小值 for (int i = n - 1; i &gt;= 1; i--)a[i] = max(a[i], a[i + 1]); //求一遍后缀最大值就是答案 for (int i = 1; i &lt;= n; i++)printf(\"%lld\\n\", a[i]);&#125;int main() &#123; //freopen(\"c:/input.txt\",\"r\",stdin); return 0;&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"HDU-4300-Clairewd’s message（KMP+特判）","slug":"HDU-4300-Clairewd’s-message（KMP-特判）","date":"2018-09-30T06:45:51.000Z","updated":"2018-12-04T13:35:07.632Z","comments":true,"path":"article/HDU-4300-Clairewd’s-message（KMP-特判）.html","link":"","permalink":"https://anoyer.cn/article/HDU-4300-Clairewd’s-message（KMP-特判）.html","excerpt":"","text":"博主链接题目题意：先给你一个密码表。然后给你一个不一定完整的串。原串满足前一半是密码，后一半是明码。要求你最小的补全这个串。题解：设给的串长度为len,则1…(len+1)/2的字母一定是密码。我们将1…(len+1)/2的字母全部安装密码表转换成原文，然后将得到的串求Next数组。再根据Next数组求出最大的相等的前后缀（长度一定小于或等于len/2，题目要求），然后输出就可以。然后这里一定要先加一个特判是不是不存在相等的前后缀，也就是s[1]!=s[len],这时输出原串一次，再输出一次原串全解密的串.代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 1e6 + 10;const int mod = 1e9 + 7;typedef long long ll;char s[maxn],s1[maxn];char t[maxn];char m[33];int nex[maxn];void Get_nex() &#123; int j = 0; for (int i = 1; s[i]; i++) &#123; while (s[i] != s[j + 1] &amp;&amp; j != 0)j = nex[j]; if (s[i] == s[j + 1] &amp;&amp; i != 1)j++; nex[i] = j; &#125;&#125;int main() &#123; int t,n; scanf(\"%d\", &amp;t); while (t--) &#123; scanf(\"%s\", m+1); scanf(\"%s\", s+1); int len = strlen(s+1); for (int i = 1;i&lt;=len+1; i++)s1[i] = s[i]; for (int j = 1; j &lt;= (len +1)/ 2; j++) &#123; //进行原串前半部分解密 for (int i = 1; i &lt;= 26; i++) &#123; if (s[j] == m[i]) &#123; s[j] = 'a' + i-1; break; &#125; &#125; &#125; Get_nex(); int nn =0; int a = nex[len]; if (a == 0) &#123; // 如果不存在相等的前后缀 printf(\"%s\", s1 + 1); for (int j = (len+1)/2+1; j &lt;= len; j++) &#123; for (int i = 1; i &lt;= 26; i++) &#123; if (s[j] == m[i]) &#123; s[j] = 'a' + i - 1; break; &#125; &#125; &#125; printf(\"%s\\n\", s+1); continue; &#125; while (a != 0) &#123; //找出最大的相等的前后缀且长度小于或等于len/2 if (s[a] == s[len]) &#123; if (a &lt;= len / 2)nn = max(nn, a); a = nex[a]; &#125; &#125; printf(\"%s\", s1+1); for (int i = nn+1; i &lt;= len -nn; ++i)printf(\"%c\",s[i]); printf(\"\\n\"); &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"HDU-2594-Simpsons’ Hidden Talents（KMP的next数组应用）","slug":"HDU-2594-Simpsons’-Hidden-Talents（KMP的next数组应用）","date":"2018-09-28T14:57:50.000Z","updated":"2018-12-04T13:35:33.280Z","comments":true,"path":"article/HDU-2594-Simpsons’-Hidden-Talents（KMP的next数组应用）.html","link":"","permalink":"https://anoyer.cn/article/HDU-2594-Simpsons’-Hidden-Talents（KMP的next数组应用）.html","excerpt":"","text":"博主链接题目题意：给你两个串，求第一个串的前缀和第二个串的后缀的相同长度题解：( 这题和POJ2752基本一样，都是利用next性质求公共前后缀 )。利用strcat(s,s1)将两个串接起来,利用KMP的next数组性质如果s[next[n-1]]=s[n],则此时前后缀相同，然后再开始回滚，若s[next[n-1]] == s[n-1]，则子串s[0,1,2,…,next[n-1]]是满足条件的子串。然后判断s[next[next[n-1]]] == s[n-1]是否成立，这样一直回滚，直到next[next[…..next[n-1]]] == -1为止，这样求出最长的长度ans，判断ans是否大于两个串的较短串的长度，如果大于ans=min(len1,len2);(因为如果ans大于min，则一定存在长度为min的公共前后缀)代码：12345678910111213141516171819202122232425262728293031323334353637#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e5 + 7;char s[maxn],s1[maxn];int nex[maxn],len;void Get_Nex() &#123; int j = -1; for (int i = 0; s[i]; i++) &#123; while (s[i] != s[j + 1] &amp;&amp; j != -1)j = nex[j]; if (s[i] == s[j + 1] &amp;&amp; i != 0)j++; nex[i] = j; &#125;&#125;int main() &#123; while (scanf(\"%s\", s) != EOF) &#123; scanf(\"%s\", s1); int len1 = strlen(s1); int len2 = strlen(s); strcat(s, s1); len = len1 + len2; Get_Nex(); int a = nex[len - 1], ans = 0, mi = min(len1, len2); while (a != -1) &#123; if (s[a] == s[len - 1]) &#123; if (ans &lt; a + 1)ans = a + 1; a = nex[a]; &#125; &#125; if (ans &gt; mi)ans = mi; for (int i = 0; i &lt; ans; i++) &#123; putchar(s[i]); if (i == ans - 1)printf(\" \"); &#125; printf(\"%d\\n\", ans); &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"POJ2752-Seek-the-Name-Seek-the-Fame（找相同的前后缀）","slug":"POJ-2752-Seek-the-Name-Seek-the-Fame（找相同的前后缀）","date":"2018-09-28T11:00:01.000Z","updated":"2018-12-04T13:37:00.218Z","comments":true,"path":"article/POJ-2752-Seek-the-Name-Seek-the-Fame（找相同的前后缀）.html","link":"","permalink":"https://anoyer.cn/article/POJ-2752-Seek-the-Name-Seek-the-Fame（找相同的前后缀）.html","excerpt":"","text":"题目博主博客题意：求一个串中相同前后缀长度，并输出思路：利用KMP的next数组性质；如果s[next[n-1]]=s[n],则此时前后缀相同，然后再开始回滚，==若s[next[n-1]] == s[n-1]，则子串s[0,1,2,…,next[n-1]]是满足条件的子串==。然后判断s[next[next[n-1]]] == s[n-1]是否成立，这样一直回滚，直到next[next[…..next[n-1]]] == -1为止代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;stdio.h&gt;#include&lt;cstring&gt;#include&lt;stack&gt;#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 4e5 + 10;const int mod = 1e9 + 7;typedef long long ll;char s[maxn];int nex[maxn];int len;void Get_Nex() &#123; int j = -1; for (int i = 0; i &lt; len; i++) &#123; while (s[i] != s[j + 1] &amp;&amp; j != -1)j = nex[j]; if (s[i] == s[j + 1] &amp;&amp; i != 0)j++; nex[i] = j; &#125;&#125;stack&lt;int&gt;M;int main() &#123; while (scanf(\"%s\", s) != EOF) &#123; len = strlen(s); Get_Nex(); int a = nex[len - 1]; M.push(len); while (a != -1) &#123; if (s[a] == s[len - 1]) &#123; M.push(a + 1); a = nex[a]; &#125; &#125; while (!M.empty()) &#123; printf(\"%d \", M.top()); M.pop(); &#125; puts(\"\"); //for (int i = 0; i &lt; len; i++)printf(\"%d \", nex[i]); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"POJ","slug":"POJ","permalink":"https://anoyer.cn/tags/POJ/"}]},{"title":"POJ-3080 Blue Jeans(kmp+暴力求子串)","slug":"POJ-3080-Blue-Jeans-kmp-暴力求子串","date":"2018-09-26T14:09:17.000Z","updated":"2018-12-04T16:25:17.234Z","comments":true,"path":"article/POJ-3080-Blue-Jeans-kmp-暴力求子串.html","link":"","permalink":"https://anoyer.cn/article/POJ-3080-Blue-Jeans-kmp-暴力求子串.html","excerpt":"","text":"题目题意：给一个n，输入n个长度为60的字符串，求==最长公共子串==（2&lt;n&lt;=10),如果公共串长度大于等于3就输出这个子串（~~开始真的是瞎了，看了题直接将所有字符串连接来，求了波next数组，然后完美求出了子串长度，却发现要求是输出子串，心里***~~）**思路：(==KMP+暴力求子串==)枚举第一个字符串的不同长度子串，判断她是否为下面多有的公共子串？如果是的话，那么我们就表明找到，则比较其长度，如果比已经找到的串长，那么就替换结果串 否则按字典序比较。取字典序考前的，就可以。代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;cstdio&gt;#include&lt;bits/stdc++.h&gt;using namespace std;char str[10][62];char substr[62];char result[62];char temp[62];int next[62];int len, n, max;void get_next() &#123; next[0] = -1; int j = -1; for (int i = 1; i &lt; len; i++) &#123; while (j &gt; -1 &amp;&amp; substr[j + 1] != substr[i]) j = next[j]; if (substr[j + 1] == substr[i]) j++; next[i] = j; &#125;&#125;void kmp() &#123; int j, m; get_next(); for (int k = 1; k &lt; n; k++) &#123; j = -1, m = -1;//m最好取-1 for (int i = 0; i &lt; 60; i++) &#123; while (j &gt; -1 &amp;&amp; substr[j + 1] != str[k][i]) j = next[j]; if (substr[j + 1] == str[k][i]) j++; if (j &gt; m) m = j; //m取可匹配到的最大值 &#125; if (m &lt; max) max = m;//max取可匹配到的最小值，公共子串以最小者为准 &#125;&#125;int main() &#123; int t, i, ans; scanf(\"%d\", &amp;t); while (t--) &#123; scanf(\"%d\", &amp;n); for (i = 0; i &lt; n; i++) scanf(\"%s\", str[i]); ans = 0; for (i = 0; i &lt; 58; i++) &#123; strcpy(substr, str[0] + i);//枚举第一个串的所有后缀串 len = 60 - i; max = 65; kmp(); if (max &gt; ans) &#123; ans = max; strncpy(result, str[0] + i, ans + 1); result[ans + 1] = '\\0'; &#125; else if (max == ans) &#123; //若有相等长度，取字典序小者 strncpy(temp, str[0] + i, ans + 1); temp[ans + 1] = '\\0'; if (strcmp(result, temp) &gt; 0) strcpy(result, temp); &#125; &#125; if (ans &gt;= 2) printf(\"%s\\n\", result); else printf(\"no significant commonalities\\n\"); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"暴力题","slug":"暴力题","permalink":"https://anoyer.cn/tags/暴力题/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"},{"name":"POJ","slug":"POJ","permalink":"https://anoyer.cn/tags/POJ/"}]},{"title":"C/C++文件读写大杂烩","slug":"C++文件读写","date":"2018-09-25T14:46:08.000Z","updated":"2018-12-02T06:42:32.571Z","comments":true,"path":"article/C++文件读写.html","link":"","permalink":"https://anoyer.cn/article/C++文件读写.html","excerpt":"","text":"c++：ifstream12345fstream in; //读文件in.open(\"路径\"); //只读 可以放在fstreaam in(\"路径\");fstream out; //写文件out.open(\"路径\");out.close();//关闭文件如果文件不存在返回错误1234if (!in.is_open()) &#123; //文件不存在，返回错误，并生成一个文件 cout &lt;&lt; \"Error!\" &lt;&lt; endl; exit(1); //终止程序&#125;如果文件不存在新建12fstream in;in.open(\"路径\",fstream::out||fstream::in);成功打开文件后写入数组,写入文件12in&gt;&gt;a[i];out&lt;&lt;a[i];C：stdio.h ,stdlib.h123456789FILE *fp; //文件指针变量fp=fopen(\"路径\",“文件使用方式”); //文件使用方式：r,w,a,rb,wb,ab,r+,w+,a+,rb+,wb+,ab+fclose(fp); //关闭文件fgetc(fp); //从fp指向文件读入一个字符fputs(ch,fp); //把字符写入fp指向文件fgets(str,n,fp); //从fp指向文件中读入一个长度为n-1的字符串存在str中fputs(str,fp) //把str写入fp指向文件fprintf(fp,\"%d%s\",i,str); //向fp中输入整数i,字符串str;fscanf(fp,\"%d%s\",i,str); //从fp文件中读出一个整数一个字符串给整数i,字符串str二进制读写–常用于读写结构体12fread(变量地址,size,count,fp); //从fp指的文件中读入连续count个size字节数据写入到变量fwrite(变量地址,size,count,fp); //从变量中取出连续count个size字节数据写入到fp指向文件中","categories":[{"name":"C++语法","slug":"C-语法","permalink":"https://anoyer.cn/categories/C-语法/"}],"tags":[{"name":"语法","slug":"语法","permalink":"https://anoyer.cn/tags/语法/"}]},{"title":"Codeforces Round 512--C.Vasya and Golden Ti","slug":"Codeforces-Round-512-Div-2-based-on-Technocup-2019-Elimination-Round-1-C-Vasya-and-Golden-Ti","date":"2018-09-23T16:00:44.000Z","updated":"2018-12-02T06:42:57.543Z","comments":true,"path":"article/Codeforces-Round-512-Div-2-based-on-Technocup-2019-Elimination-Round-1-C-Vasya-and-Golden-Ti.html","link":"","permalink":"https://anoyer.cn/article/Codeforces-Round-512-Div-2-based-on-Technocup-2019-Elimination-Round-1-C-Vasya-and-Golden-Ti.html","excerpt":"","text":"题目题意：给你一个由0-9组成的串，问能不能将串分成2份及两份以上，使每份数和相等解题思路：先特判下如果串中只有一种字符且串长度大于2则肯定可以，然后求出把0消去后串的前缀和（因为0对和没影响。再枚举i（i从1到n）位的前缀和num[i]，再看看（i-n）中有多少个前缀和num[j]能整除num[i]，如果满足的数量ans大于等于2且num[n]/ans==num[i],则一定可以分成ans份，否则输出no代码：123456789101112131415161718192021222324252627282930313233343536#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e6 + 5;char s[110];int num[110];int main() &#123; int n; scanf(\"%d\", &amp;n); scanf(\"%s\", s+1); int cnt = 1; for(int i=1;i&lt;=n;i++)&#123; if (s[i] == '0')continue; num[cnt] = num[cnt - 1] + s[i] - '0'; cnt++; &#125; int flag = 1; for (int i = 1; i &lt;n; i++) &#123; if (s[i] != s[i + 1])flag = 0; &#125; if (flag&amp;&amp;n &gt;= 2) &#123; printf(\"YES\\n\"); return 0; &#125; for (int i = 1; i &lt; cnt; i++) &#123; int ans = 0; for (int j = i; j &lt; cnt; j++) &#123; if (num[j] % num[i] == 0)ans++; &#125; if (ans &gt;= 2 &amp;&amp; num[cnt - 1] % num[i] == 0 &amp;&amp; num[cnt - 1] == num[i]*ans) &#123; printf(\"YES\\n\"); return 0; &#125; &#125; printf(\"NO\\n\");&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"https://anoyer.cn/tags/codeforces/"},{"name":"思维题","slug":"思维题","permalink":"https://anoyer.cn/tags/思维题/"}]},{"title":"Codeforces Round 512--B.Vasya and Cornfield","slug":"Codeforces-Round-512-Div-2-based-on-Technocup-2019-Elimination-Round-1-B-Vasya-and-Cornfield","date":"2018-09-23T15:51:08.000Z","updated":"2018-12-02T06:42:49.847Z","comments":true,"path":"article/Codeforces-Round-512-Div-2-based-on-Technocup-2019-Elimination-Round-1-B-Vasya-and-Cornfield.html","link":"","permalink":"https://anoyer.cn/article/Codeforces-Round-512-Div-2-based-on-Technocup-2019-Elimination-Round-1-B-Vasya-and-Cornfield.html","excerpt":"","text":"题目题意：给出一个矩形，顶点坐标具有笛卡尔性质，然后m次询问，每次询问给一个点，温这个点是否再矩形内解题思路：因为矩形顶点具有笛卡尔性质所以矩形4条边的方程分别为y=a+x,y=a-x,y=x-a,y=2*n-d-x,所以判断下点和4条边的关系便可值答案代码：12345678910111213141516171819202122#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 1e5 + 5;const int mod = 1e9 + 7;typedef long long ll;int main() &#123; int n, d; scanf(\"%d%d\", &amp;n, &amp;d); int m; scanf(\"%d\", &amp;m); int x, y; for (int i = 0; i &lt; m; i++) &#123; scanf(\"%d%d\", &amp;x, &amp;y); if (x + d&gt;=y&amp;&amp;x - d&lt;=y&amp;&amp;d - x &lt;=y &amp;&amp; 2 * n - d - x &gt;= y)printf(\"YES\\n\"); else printf(\"NO\\n\"); &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"https://anoyer.cn/tags/codeforces/"},{"name":"思维题","slug":"思维题","permalink":"https://anoyer.cn/tags/思维题/"}]},{"title":"HDU-1358-Period（KMP求前缀循环节）","slug":"HDU-1358-Period（KMP求前缀循环节）","date":"2018-09-23T07:50:11.000Z","updated":"2018-12-04T13:38:52.358Z","comments":true,"path":"article/HDU-1358-Period（KMP求前缀循环节）.html","link":"","permalink":"https://anoyer.cn/article/HDU-1358-Period（KMP求前缀循环节）.html","excerpt":"","text":"题目题意：给定一个字符串，求出所有循环的前缀串，输出前缀串的长度和循环的次数（大于一才算循环串）解题思路：思路是先构造出 next[] 数组，下标为 i，定义一个变量 j = i - next[i] 就是next数组下标和下标对应值的差，如果这个差能整除下标 i，即 i%j==0 ,则说明下标i之前的字符串（周期性字符串长度为 i）一定可以由一个前缀周期性的表示出来，这个前缀的长度为刚才求得的那个差，即 j，则这个前缀出现的次数为 i/j 。所以最后输出i和i/j即可。代码：123456789101112131415161718192021222324252627282930313233343536373839#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 1e6 + 5;char s[maxn];int nex[maxn];int n;void get_nex() &#123; int j = -1; for (int i = 0; s[i]; i++) &#123; while (s[i] != s[j + 1] &amp;&amp; j != -1)j = nex[j]; if (s[i] == s[j + 1]&amp;&amp;i!=0)j++; nex[i] = j; &#125;&#125;void Solve() &#123; for (int i = 1; i &lt; n; i++) &#123; int L = i - nex[i]; if ((i + 1) % L == 0 &amp;&amp; (i+1) / L &gt; 1) &#123; printf(\"%d %d\\n\", i+1, (i+1) / L); &#125; &#125;&#125;int main() &#123; int Case = 0; while (scanf(\"%d\", &amp;n)) &#123; if (n == 0)break; scanf(\"%s\", s); get_nex(); printf(\"Test case #%d\\n\",++Case); Solve(); printf(\"\\n\"); //for(int i=0;i&lt;n;i++)printf(\"%d \",nex[i]); &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"HDU","slug":"HDU","permalink":"https://anoyer.cn/tags/HDU/"},{"name":"KMP","slug":"KMP","permalink":"https://anoyer.cn/tags/KMP/"},{"name":"字符串题解","slug":"字符串题解","permalink":"https://anoyer.cn/tags/字符串题解/"}]},{"title":"Codeforces-Round-511-Div-2-C-Enlarge-GCD","slug":"Codeforces-Round-511-Div-2-C-Enlarge-GCD","date":"2018-09-21T16:56:54.000Z","updated":"2018-12-02T06:42:38.916Z","comments":true,"path":"article/Codeforces-Round-511-Div-2-C-Enlarge-GCD.html","link":"","permalink":"https://anoyer.cn/article/Codeforces-Round-511-Div-2-C-Enlarge-GCD.html","excerpt":"","text":"题目链接解题思路题解：先求出元素的最大公因子，开一个数组num记录每个数出现次数，再利用素数筛，求出所有数有当前质数因子的的个数代码12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 1.5e7 + 10;const int mod = 1e9 + 7;typedef long long ll;int P[maxn], num[maxn], a[300005], p[300005];int gcd(int a, int b)&#123; if (!b) return a; return gcd(b, a % b);&#125;int main() &#123; int n,d=0; scanf(\"%d\", &amp;n); for (int i = 0; i &lt; n; i++) &#123; scanf(\"%d\", &amp;a[i]); num[a[i]]++; if (!d) d = a[i]; else d = gcd(d, a[i]); &#125; int ans = n; for (int i = d + 1; i &lt; maxn; i++) if (!P[i]) &#123; int cnt = 0, j; for (j = i; j &lt; maxn; j += i) P[j] = 1, cnt += num[j]; ans = min(ans, n - cnt); &#125; if (ans &lt; n)printf(\"%d\\n\", ans); else printf(\"-1\\n\"); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://anoyer.cn/categories/题解/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"https://anoyer.cn/tags/codeforces/"},{"name":"思维题","slug":"思维题","permalink":"https://anoyer.cn/tags/思维题/"}]},{"title":"后缀数组DA模板","slug":"后缀数组模板","date":"2018-09-18T13:46:12.000Z","updated":"2018-12-06T15:24:09.020Z","comments":true,"path":"article/后缀数组模板.html","link":"","permalink":"https://anoyer.cn/article/后缀数组模板.html","excerpt":"","text":"sufﬁx array倍增算法 O(n*logn)待排序数组⻓长度为n,放在0~n-1中,在后⾯面补⼀一个0da(str, sa, rank, height, n, m);例如:n = 8;num[] = { 1, 1, 2, 1, 1, 1, 1, 2, $ }; 注意num后⼀一位为0,其他⼤大于0rank[] = { 4, 6, 8, 1, 2, 3, 5, 7, 0 }; rank[0~n-1]为有效值,rank[n]必定为0无效值sa[] = { 8, 3, 4, 5, 0, 6, 1, 7, 2 }; sa[1~n]为有效值,sa[0]必定为n是⽆无效值height[]= { 0, 0, 3, 2, 3, 1, 2, 0, 1 }; height[2~n]为有效值稍微改动可以求⻓长公共前缀，需要注意两串串起始位置相同的情况另外需要注意的是部分数组需要开两倍空间⼤大⼩小12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/* Problem: JZOJ1598(询问一个字符串中有多少至少出现两次的子串) Content: SA's Code and Explanation Author : Anoyer*/#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include&lt;iostream&gt;using namespace std;const int MAXN = 100005;char ch[MAXN], All[MAXN];int SA[MAXN], rank[MAXN], Height[MAXN], tax[MAXN], tp[MAXN], a[MAXN], n, m; char str[MAXN];//rank[i] 第i个后缀的排名; SA[i] 排名为i的后缀位置; Height[i] 排名为i的后缀与排名为(i-1)的后缀的LCP//tax[i] 计数排序辅助数组; tp[i] rank的辅助数组(计数排序中的第二关键字),与SA意义一样。//a为原串void RSort() &#123; //rank第一关键字,tp第二关键字。 for (int i = 0; i &lt;= m; i ++) tax[i] = 0; for (int i = 1; i &lt;= n; i ++) tax[rank[tp[i]]] ++; for (int i = 1; i &lt;= m; i ++) tax[i] += tax[i-1]; for (int i = n; i &gt;= 1; i --) SA[tax[rank[tp[i]]] --] = tp[i]; //确保满足第一关键字的同时，再满足第二关键字的要求&#125; //计数排序,把新的二元组排序。int cmp(int *f, int x, int y, int w) &#123; return f[x] == f[y] &amp;&amp; f[x + w] == f[y + w]; &#125; //通过二元组两个下标的比较，确定两个子串是否相同void Suffix() &#123; //SA for (int i = 1; i &lt;= n; i ++) rank[i] = a[i], tp[i] = i; m = 127 ,RSort(); //一开始是以单个字符为单位，所以(m = 127) for (int w = 1, p = 1, i; p &lt; n; w += w, m = p) &#123; //把子串长度翻倍,更新rank //w 当前一个子串的长度; m 当前离散后的排名种类数 //当前的tp(第二关键字)可直接由上一次的SA的得到 for (p = 0, i = n - w + 1; i &lt;= n; i ++) tp[++ p] = i; //长度越界,第二关键字为0 for (i = 1; i &lt;= n; i ++) if (SA[i] &gt; w) tp[++ p] = SA[i] - w; //更新SA值,并用tp暂时存下上一轮的rank(用于cmp比较) RSort(), swap(rank, tp), rank[SA[1]] = p = 1; //用已经完成的SA来更新与它互逆的rank,并离散rank for (i = 2; i &lt;= n; i ++) rank[SA[i]] = cmp(tp, SA[i], SA[i - 1], w) ? p : ++ p; &#125; //离散：把相等的字符串的rank设为相同。 //LCP int j, k = 0; for(int i = 1; i &lt;= n; Height[rank[i ++]] = k) for( k = k ? k - 1 : k, j = SA[rank[i] - 1]; a[i + k] == a[j + k]; ++ k); //这个知道原理后就比较好理解程序&#125;void Init() &#123; scanf(\"%s\", str+1); n = strlen(str+1); for (int i = 1; i &lt;=n; i ++) a[i ] = str[i];&#125;int main() &#123; Init(); Suffix(); for(int i=1;i&lt;=n;i++)cout&lt;&lt;SA[i]&lt;&lt;endl; for(int i=1;i&lt;=n;i++)&#123; printf(\"%s\\n\",str+SA[i]); &#125; /*int ans = Height[2]; for (int i = 3; i &lt;= n; i ++) ans += max(Height[i] - Height[i - 1], 0); printf(\"%d\\n\", ans); */&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"AC自动机模板","slug":"AC自动机模板","date":"2018-09-17T16:06:04.000Z","updated":"2018-12-02T06:40:35.118Z","comments":true,"path":"article/AC自动机模板.html","link":"","permalink":"https://anoyer.cn/article/AC自动机模板.html","excerpt":"","text":"经常用来解决多模式匹配问题：就是有多个模式串P1,P2,P3…，Pm，求出所有这些模式串在连续文本T1….n中的所有可能出现的位置。例如：求出模式集合{“nihao”,”hao”,”hs”,”hsr”}在给定文本”sdmfhsgnshejfgnihaofhsrnihao”中所有可能出现的位置给出L个模式字符串（加总长度为N），以及长度为M大文本，要求从大文本中提取每个模式字符串出现的位置。如果使用KMP算法，时间复杂度将达到O(LM+N)，而使用AC自动机可以在O(N+M)时间复杂度内解决这一问题，当L很大时，AC自动机的优势非常明显。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define ll long long int#define max_n 1000050#define max_tot 500050#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 1e5 + 7;struct Ac &#123; struct state &#123; //节点状态 int next[26]; int fail, cnt;//指针fail 到这个节点有cnt个串结束 &#125;stable[max_tot]; int size; //当前AC自动机节点个数 queue&lt;int&gt;q; void init() &#123; //初始化 met(stable); size = 1; while (!q.empty())q.pop(); &#125; void insert(char *s) &#123; //将模式串插入trie树 int now = 0; //代表走到那个节点 for (int i = 0; s[i]; i++) &#123; char ch = s[i]-'a'; if (!stable[now].next[ch]) //节点不存在该字母边，则新建一个 stable[now].next[ch] = size++; now = stable[now].next[ch]; &#125; stable[now].cnt++;//结束位置++； &#125; void build() &#123; //构造失配fail指针，要构造当前节点fail指针需先构造爸爸节点 for (int i = 0; i &lt; 26; i++)if (stable[0].next[i])q.push(stable[0].next[i]); while (!q.empty()) &#123; int u = q.front(); q.pop(); for (int i = 0; i &lt; 26; i++) &#123; if (stable[u].next[i]) &#123; //如果有i这条边 枚举下他儿子 int v = stable[u].fail; int a = stable[u].next[i]; while (v) &#123; //一直按箭头的fail if (stable[v].next[i]) &#123; //如果他某个祖先有i这条边 stable[a].fail = stable[v].next[i]; break; &#125; v = stable[v].fail; &#125; if (!stable[a].fail)stable[a].fail = stable[0].next[i]; q.push(stable[u].next[i]); //节点加进去 &#125; &#125; &#125; &#125; int get(int u) &#123; //算所有祖先的和 int res = 0; while (u) &#123; res = res + stable[u].cnt; stable[u].cnt = 0; //计算后不再计算，如果要计算不清零 u = stable[u].fail; &#125; return res; &#125; int match(char *s) &#123; //匹配 int res = 0, now = 0; for (int i = 0; s[i]; i++) &#123; char ch = s[i]-'a'; if (stable[now].next[ch]) //如果当前状态太能找到后继节点，则走他 now = stable[now].next[ch]; else &#123; //否则只能跳爸爸 int p = stable[now].fail; while (p &amp;&amp; stable[p].next[ch] == 0)p = stable[p].fail; //始终没找到，只能指根节点 //找到就跳对应地方 now = stable[p].next[ch]; &#125; if (stable[now].cnt)res = res + get(now);// &#125; return res; &#125;&#125;Ac;char s[max_n];int main(int argc, char *argv[]) &#123;#ifdef LOCAL freopen(\"C:/input.txt\", \"r\", stdin);#endif&#125;应用：查找母串中各单词出现次数–对应题目P3796123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define ll long long int#define max_n 1000050#define max_tot 500050#define met(a) memset(a,0,sizeof(a))#define fup(i,a,n,b) for(int i=a;i&lt;n;i+=b)#define fow(j,a,n,b) for(int j=a;j&gt;0;j-=b)#define MOD(x) (x)%modusing namespace std;const int maxn = 1e5 + 7;struct aa &#123; int i; int cnt;&#125;ans[180];int cmp(aa a, aa b) &#123; if (a.cnt == b.cnt)return a.i &lt; b.i; else return a.cnt &gt; b.cnt;&#125;struct Ac &#123; struct state &#123; //节点状态 int next[26]; int fail, cnt;//指针fail 到这个节点有cnt个串结束 &#125;stable[max_tot]; int size; //当前AC自动机节点个数 queue&lt;int&gt;q; void init() &#123; //初始化 met(stable); size = 1; while (!q.empty())q.pop(); for (int i = 0; i &lt;= 150; i++) &#123; ans[i].i = i; ans[i].cnt = 0; &#125; &#125; void insert(char *s,int n) &#123; //将模式串插入trie树 int now = 0; //代表走到那个节点 for (int i = 0; s[i]; i++) &#123; char ch = s[i]-'a'; if (!stable[now].next[ch]) //节点不存在该字母边，则新建一个 stable[now].next[ch] = size++; now = stable[now].next[ch]; &#125; stable[now].cnt=n;//结束位置++； &#125; void build() &#123; //构造失配fail指针，要构造当前节点fail指针需先构造爸爸节点 for (int i = 0; i &lt; 26; i++)if (stable[0].next[i])q.push(stable[0].next[i]); while (!q.empty()) &#123; int u = q.front(); q.pop(); for (int i = 0; i &lt; 26; i++) &#123; if (stable[u].next[i]) &#123; //如果有i这条边 枚举下他儿子 int v = stable[u].fail; int a = stable[u].next[i]; while (v) &#123; //一直按箭头的fail if (stable[v].next[i]) &#123; //如果他某个祖先有i这条边 stable[a].fail = stable[v].next[i]; break; &#125; v = stable[v].fail; &#125; if (!stable[a].fail)stable[a].fail = stable[0].next[i]; q.push(stable[u].next[i]); //节点加进去 &#125; &#125; &#125; &#125; void get(int u) &#123; //算所有祖先的和 int res = 0; u = stable[u].fail; while (u) &#123; if(stable[u].cnt)ans[stable[u].cnt].cnt++; //找个数 u = stable[u].fail; &#125; return; &#125; int match(char *s) &#123; //匹配 int res = 0, now = 0; for (int i = 0; s[i]; i++) &#123; char ch = s[i]-'a'; if (stable[now].next[ch]) //如果当前状态太能找到后继节点，则走他 now = stable[now].next[ch]; else &#123; //否则只能跳爸爸 int p = stable[now].fail; while (p &amp;&amp; stable[p].next[ch] == 0)p = stable[p].fail; //始终没找到，只能指根节点 //找到就跳对应地方 now = stable[p].next[ch]; &#125; if (stable[now].cnt) &#123; ans[stable[now].cnt].cnt++; &#125; get(now); &#125; return res; &#125;&#125;Ac;char s[max_n];char s1[200][80];int main(int argc, char *argv[]) &#123; /*ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);*/ int t, n; while (scanf(\"%d\", &amp;n)&amp;&amp;n!=0) &#123; Ac.init(); for (int i = 1; i &lt;= n; i++) &#123; scanf(\"%s\", s1[i]); Ac.insert(s1[i], i); &#125; Ac.build(); scanf(\"%s\", s); Ac.match(s); sort(ans, ans + n+1, cmp); printf(\"%d\\n\", ans[0].cnt); printf(\"%s\\n\", s1[ans[0].i]); for (int i = 1; i &lt; n; i++) &#123; if (ans[i].cnt == ans[0].cnt)printf(\"%s\\n\", s1[ans[i].i]); else break; &#125; &#125; return 0;&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"字符串Hash模板","slug":"字符串Hash模板","date":"2018-09-17T15:56:56.000Z","updated":"2018-12-02T06:36:01.996Z","comments":true,"path":"article/字符串Hash模板.html","link":"","permalink":"https://anoyer.cn/article/字符串Hash模板.html","excerpt":"","text":"字符串 Hash注意：m选择足够大的质数（至少大于字符串个数）12345678910111213141516171819#include&lt;stdio.h&gt;#include&lt;bits/stdc++.h&gt;#define ll long long intusing namespace std;ll gethash(char *s,int m)&#123; ll h=0; for(int i=0;s[i];i++) h=((h&lt;&lt;8)+s[i])%m; return h;&#125;int main()&#123; #ifdef LOCAL //freopen(\"C:/Users/Administrator/Desktop/input.txt\",\"r\",stdin); #endif char a[100]=\"22222222222222222222222222222\"; char b[100]=\"22222222222222222222222223222\"; printf(\"%lld\\n\",gethash(a,1e9+7)); printf(\"%lld\\n\",gethash(b,1e9+7));&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"Karp-Rabin算法模板","slug":"Karp-Rabin算法模板","date":"2018-09-17T15:53:25.000Z","updated":"2018-12-02T06:44:20.985Z","comments":true,"path":"article/Karp-Rabin算法模板.html","link":"","permalink":"https://anoyer.cn/article/Karp-Rabin算法模板.html","excerpt":"","text":"Karp Rabin 算法是利用hash函数的特性进行字符串匹配的。KR算法对模式串和循环中每一次要匹配的子串按一定的hash函数求值，如果hash值相同，才进一步比较这两个串是否真正相等12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;stdio.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#include&lt;cstring&gt;#define d 256 //字符表中字符数目 using namespace std;string s,p;void RK(int q)&#123; //assert( s&amp;&amp; p &amp;&amp; q &gt; 0 ); //如果传递的有错，则打印提示 int m=p.size(); int n=s.size(); int p_h=0; //模式串hash int s_h=0; //s串hash int h=1; for(int i=0;i&lt;m-1;i++)h=(h*d)%q; //h表示ts+1 = 10(31415 - 10000*3) +2 = 14152中的10000 for(int i=0;i&lt;m;i++)&#123; p_h= ( d * p_h + p[i] ) % q; s_h= ( d * s_h + s[i] ) % q; &#125; //求出开始p_h 和 s_h for(int i=0;i&lt;n-m;i++)&#123; if(p_h==s_h)&#123; int j; for(j=0;j&lt;m;j++) if(s[i+j]!=p[j])break; if(j==m)printf(\"P occurs with shifts: %d\\n\",i); &#125; if(i&lt;n-m)&#123; s_h=(d*(s_h-s[i]*h)+s[i+m])%q; if(s_h&lt;0) s_h+=q; &#125; &#125;&#125;int main()&#123; s=\"GEEKlmnaS FOR GEEKlmnaS njknaskjdaskjbdkjasbdjas njabijbaslbckjsbfGEEKlmnaS FOR GEEKlmnaS\"; p=\"GEEKlmna\"; int mod=127; ////需要比s长度大 RK(mod);&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"KMP模板及优化","slug":"KMP模板及优化","date":"2018-09-17T15:49:38.000Z","updated":"2018-12-02T06:44:35.391Z","comments":true,"path":"article/KMP模板及优化.html","link":"","permalink":"https://anoyer.cn/article/KMP模板及优化.html","excerpt":"","text":"解决问题：字符串匹配。给你两个字符串，寻找其中一个字符串是否包含另一个字符串，如果包含，返回包含的起始位置。 或者给你两个字符串，查找一个字符串在另外一个字符串中出现了几次1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn=10001;int next[maxn];char s[maxn];char p[maxn];int cnt=0;void prefix_next(int n)&#123; next[0]=0; int len=0; int i=1; while(i&lt;n)&#123; if(p[i]==p[len])&#123; len++; next[i]=len; &#125; else &#123; if(len&gt;0)&#123; len=next[len-1]; &#125; else&#123; next[i++]=len; &#125; &#125; &#125; return;&#125;void move_next(int n)&#123; for(int i=n-1;i&gt;0;i--)&#123; next[i]=next[i-1]; &#125; next[0]=-1; return;&#125;void kmp_search()&#123; int n=strlen(p); int m=strlen(s); prefix_next(n); move_next(n); int i=0; int j=0; while(i&lt;m)&#123; if(s[i]==p[j]&amp;&amp;j==n-1)&#123; printf(\"No.%d--&gt;%d\\n\",++cnt,i-j); j=next[j]; &#125; if(s[i]==p[j])&#123; i++; j++; &#125; else&#123; j=next[j]; if(j==-1)&#123; i++;j++; &#125; &#125; &#125; if(cnt==0)cout&lt;&lt;\"NO FOUD\"&lt;&lt;endl; return;&#125;int main()&#123; cin&gt;&gt;s; cin&gt;&gt;p; kmp_search();&#125;KMP优化模板12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;string.h&gt;using namespace std;char s[1000005],t[200000];int slen,tlen;int nex[200000];//nex数组大小和短串一致int ans,a,b,c,d,n,m;inline void get_nex()&#123; int j=-1;//j初始化为-1 for (int i=0;i&lt;tlen;i++)&#123; while (t[i]!=t[j+1] &amp;&amp; j!=-1)//如果下一个不同，那么j就变成next[j]，注意next[j]是小于j的，无论j取任何值 j=nex[j];//往前回溯 if (t[i]==t[j+1] &amp;&amp; i!=0) j++;//如果相同，j++ nex[i]=j;//这个是把算的j的值（就是相同的最大前缀和最大后缀长）赋给next[i] &#125;&#125;inline void kmp()&#123; int j=-1; for (int i=0;i&lt;slen;i++)&#123; while (s[i]!=t[j+1] &amp;&amp; j!=-1) j=nex[j]; if (s[i]==t[j+1]) j++; if (j==tlen-1) ans++,j=nex[j]; &#125;&#125;int main()&#123; scanf(\"%d\",&amp;n); for (int i=1;i&lt;=n;i++)&#123; ans=0; scanf(\"%s %s\",t,s); slen=strlen(s); tlen=strlen(t);//这两个长度应该设为全局变量最开始时求出，不能用一次求一次 get_nex(); kmp(); printf(\"%d\\n\",ans); &#125;&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"Sunday算法模板","slug":"Sunday算法模板","date":"2018-09-17T15:47:27.000Z","updated":"2018-12-02T06:45:11.188Z","comments":true,"path":"article/Sunday算法模板.html","link":"","permalink":"https://anoyer.cn/article/Sunday算法模板.html","excerpt":"","text":"Sunday算法由Daniel M.Sunday在1990年提出，它的思想跟BM算法很相似：1只不过Sunday算法是从前往后匹配，在匹配失败时关注的是主串中参加匹配的最末位字符的下一位字符。如果该字符没有在模式串中出现则直接跳过，即移动位数 = 模式串长度 + 1；否则，其移动位数 = 模式串长度 - 该字符最右出现的位置(以0开始) = 模式串中该字符最右出现的位置到尾部的距离 + 1。1234567891011121314151617181920212223242526272829303132333435363738#include&lt;stdio.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#include&lt;cstring&gt;using namespace std;string s,p;int next_[257];void getnext()&#123; int len=p.size(); for(int i=0;i&lt;256;i++)next_[i]=-1; for(int i=0;i&lt;len;i++)next_[p[i]]=i; //打next_表，记录模式串相应字符的位置 &#125;int sunday()&#123; int slen=s.size(); int plen=p.size(); if(slen==0)return -1; //如果s的长度为0，不需要匹配，直接返回-1 for(int i=0;i&lt;slen-plen;)&#123; int j=i; //s[j] int k=0; //p[k] for(;k&lt;plen&amp;&amp;j&lt;slen&amp;&amp;s[j]==p[k];j++,k++);//一直匹配，找到失配 j 和 k if(k==plen) //说明已经找到一段匹配串 return i; //如果要查找出现次数，改成cnt++ else&#123; if(i+plen&lt;slen)i+=(plen-next_[s[i+plen]]); else return -1;// //如果要查找出现次数，改成return cnt &#125; &#125; return -1;&#125;int main()&#123; s=\"I love DNF and Code\"; p=\"love\"; getnext(); if(sunday())printf(\"you find it at %d\\n\",sunday()); else printf(\"sorry,you do not find it!\\n\"); &#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"字符串编辑距离模板","slug":"字符串编辑距离模板","date":"2018-09-17T15:40:35.000Z","updated":"2018-12-02T06:35:54.797Z","comments":true,"path":"article/字符串编辑距离模板.html","link":"","permalink":"https://anoyer.cn/article/字符串编辑距离模板.html","excerpt":"","text":"编辑距离，又称Levenshtein距离（也叫做Edit Distance），是指两个字串之间，由⼀一个转成 另一个所需的少编辑操作次数。许可的编辑操作包括将⼀一个字符替换成另一个字符，插入一个字 符，删除一个字符12345678910111213141516171819202122232425#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 1e3 + 5; int T, cas = 0; int n, m; int dp[N][N]; char s[N], t[N]; int main()&#123; while(scanf(\"%s%s\",s,t)!=EOF)&#123; int n=(int)strlen(s),m=(int)strlen(t); for(int i=0;i&lt;=n;i++)&#123; dp[i][0]=i; &#125; for(int i=0;i&lt;=m;i++)&#123; dp[0][i]=i; &#125; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=m;j++)&#123; dp[i][j]=min(dp[i-1][j],dp[i][j-1])+1; dp[i][j]=min(dp[i][j],dp[i-1][j-1]+(s[i-1]!=t[j-1])); &#125; &#125; printf(\"%d\\n\",dp[n][m]); &#125;&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"Manacher回文串算法（马拉车）模板","slug":"Manacher回文串算法（马拉车）模板","date":"2018-09-17T15:37:45.000Z","updated":"2018-12-02T06:44:42.642Z","comments":true,"path":"article/Manacher回文串算法（马拉车）模板.html","link":"","permalink":"https://anoyer.cn/article/Manacher回文串算法（马拉车）模板.html","excerpt":"","text":"求一个串中最长回文串的长度给定一个字符串，求出其最长回文子串。例如：（1）s=”abcd”, 最长回文长度为 1；（2）s=”ababa”, 最长回文长度为 5；（3）s=”abccb”, 最长回文长度为 4，即 bccb。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;stdio.h&gt; #include&lt;iostream&gt; #include&lt;string.h&gt;#include&lt;algorithm&gt; using namespace std;char s[111111];char s_new[111111*2];int p[111111*2];int Init()&#123; int len = strlen(s); s_new[0] = '$'; s_new[1] = '#'; int j = 2; for (int i = 0; i &lt; len; i++) &#123; s_new[j++] = s[i]; s_new[j++] = '#'; &#125; s_new[j] = '\\0'; //别忘了哦 //printf(\"%s\\n\",s_new); return j; //返回s_new的长度 &#125;int Manacher()&#123; int len = Init(); //取得新字符串长度并完成向s_new的转换 int maxLen = -1; //最长回文长度 int id; int mx = 0; for (int i = 1; i &lt; len; i++) &#123; if (i &lt; mx) p[i] = min(p[2 * id - i], mx - i); //需搞清楚上面那张图含义, mx和2*id-i的含义 else p[i] = 1; while (s_new[i - p[i]] == s_new[i + p[i]]) //不需边界判断，因为左有'$',右有'\\0' p[i]++; //我们每走一步i，都要和mx比较，我们希望mx尽可能的远，这样才能更有机会执行if (i &lt; mx)这句代码，从而提高效率 if (mx &lt; i + p[i]) &#123; id = i; mx = i + p[i]; &#125; maxLen = max(maxLen, p[i] - 1); // printf(\"%d %d %d\\n\",mx,id,maxLen); &#125; /*for(int i=1;i&lt;=len;i++)printf(\"%d \",p[i]); printf(\"\\n\");*/ return maxLen;&#125;int main()&#123; while (~scanf(\"%s\", s)) &#123; printf(\"%d\\n\", Manacher()); &#125; return 0;&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"拓展KMP模板","slug":"拓展KMP模板","date":"2018-09-17T15:31:25.000Z","updated":"2018-12-02T06:36:25.602Z","comments":true,"path":"article/拓展KMP模板.html","link":"","permalink":"https://anoyer.cn/article/拓展KMP模板.html","excerpt":"","text":"博主CSDN扩展KMPnext[i]表示为模式串S2中以i为起点的后缀字符串和模式串S2的最长公共前缀长度.extend[i]表示为以字符串S1中以i为起点的后缀字符串和模式串S2的最长公共前缀长度.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn=100010;//字符串长度最大值 int next[maxn],ex[maxn];//ex数组即为extend数组char s[maxn],s2[maxn];int n;//预处理计算next数组void getnext()&#123; int i=0,j,po,len=strlen(s); next[0]=len;//初始化next[0] while(s[i]==s[i+1]&amp;&amp;i+1&lt;len)//计算next[1] i++; next[1]=i; po=1;//初始化po的位置 for(i=2;i&lt;len;i++)&#123; if(next[i-po]+i&lt;next[po]+po)//第一种情况，可以直接得到next[i]的值 next[i]=next[i-po]; else //第二种情况，要继续匹配才能得到next[i]的值 &#123; j=next[po]+po-i; if(j&lt;0)j=0;//如果i&gt;po+next[po],则要从头开始匹配 while(i+j&lt;len&amp;&amp;s[j]==s[j+i])//计算next[i] j++; next[i]=j; po=i;//更新po的位置 &#125; &#125; &#125; //计算extend数组void extend()&#123; int i=0,j,po,len=strlen(s),l2=strlen(s2); getnext();//计算子串的next数组 while(s[i]==s2[i]&amp;&amp;i&lt;len)i++; ex[0]=i; po=0;//初始化po的位置 for(i=1;i&lt;len;i++)&#123; if(next[i-po]+i&lt;ex[po]+po) ex[i]=next[i-po];//第一种情况 else&#123; j=ex[po]+po-i; if(j&lt;0)j=0;//如果j&gt;ex[po]+po则从头开始匹配 while(i+j&lt;len&amp;&amp;j&lt;&lt;l2&amp;&amp;s[j+i]==s2[j])//计算ex[i] j++; ex[i]=j; po=i; &#125; &#125; &#125;int main()&#123;&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"KMP最短公共祖先","slug":"KMP最短公共祖先","date":"2018-09-17T15:28:55.000Z","updated":"2018-12-02T06:44:27.478Z","comments":true,"path":"article/KMP最短公共祖先.html","link":"","permalink":"https://anoyer.cn/article/KMP最短公共祖先.html","excerpt":"","text":"HDU1841–题意是给出两个串，用这两个串组成一个新串，使新串包含这两个串，问这个新串的长度最小是多少，显然，对于两个串A，B，A如果是B的字串或者B如果是A的字串的话，直接输出那个母串的长度即可，如果没有这种关系，那么看一个串的后缀是否是另一个串的前缀如果某个串的后缀与另一个串的前缀的公共部分最长，则答案=A.length+B.length-公共长度。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;cstring&gt; using namespace std; const int N = 1000100;char a[3][2*N];int fail[2*N];inline int max(int a, int b)&#123; return (a &gt; b) ? a : b;&#125;int kmp(int &amp;i, int &amp;j, char* str, char* pat)&#123; int k; memset(fail, -1, sizeof(fail)); for (i = 1; pat[i]; ++i) &#123; for (k = fail[i - 1]; k &gt;= 0 &amp;&amp; pat[i] != pat[k + 1]; k = fail[k]); if (pat[k + 1] == pat[i]) &#123; fail[i] = k + 1; &#125; &#125; i = j = 0; while (str[i] &amp;&amp; pat[j]) &#123; if (pat[j] == str[i]) &#123; i++; j++; &#125; else if (j == 0) &#123; i++; &#125; else &#123; j = fail[j - 1] + 1; &#125; &#125; if (pat[j]) &#123; return -1; &#125; else &#123; return i - j; &#125;&#125;int main(int argc, const char * argv[])&#123; int T; scanf(\"%d\", &amp;T); while (T--) &#123; int i, j, l1 = 0, l2 = 0; cin &gt;&gt; a[0] &gt;&gt; a[1]; int len1 = (int)strlen(a[0]), len2 = (int)strlen(a[1]), val; val = kmp(i, j, a[1], a[0]); if (val != -1) &#123; l1 = len1; &#125; else &#123; if (i == len2 &amp;&amp; j - 1 &gt;= 0 &amp;&amp; a[1][len2 - 1] == a[0][j - 1]) &#123; l1 = j; &#125; &#125; val = kmp(i, j, a[0], a[1]); if (val != -1) &#123; l2 = len2; &#125; else &#123; if (i == len1 &amp;&amp; j - 1 &gt;= 0 &amp;&amp; a[0][len1 - 1] == a[1][j - 1]) &#123; l2 = j; &#125; &#125; printf(\"%d\\n\", len1 + len2 - max(l1, l2)); &#125; return 0;&#125;","categories":[{"name":"字符串模板","slug":"字符串模板","permalink":"https://anoyer.cn/categories/字符串模板/"}],"tags":[{"name":"ACM模板","slug":"ACM模板","permalink":"https://anoyer.cn/tags/ACM模板/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-09-17T13:40:12.000Z","updated":"2018-12-02T06:44:04.838Z","comments":true,"path":"article/hello-world.html","link":"","permalink":"https://anoyer.cn/article/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new \"My New Post\"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://anoyer.cn/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://anoyer.cn/tags/Hexo/"}]},{"title":"文章模板","slug":"模板","date":"2018-03-01T13:46:12.000Z","updated":"2018-12-02T06:37:05.230Z","comments":true,"path":"article/模板.html","link":"","permalink":"https://anoyer.cn/article/模板.html","excerpt":"","text":"","categories":[],"tags":[]}]}